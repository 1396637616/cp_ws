"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/graphql";
exports.ids = ["pages/api/graphql"];
exports.modules = {

/***/ "apollo-server-micro":
/*!**************************************!*\
  !*** external "apollo-server-micro" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("apollo-server-micro");

/***/ }),

/***/ "graphql":
/*!**************************!*\
  !*** external "graphql" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("graphql");

/***/ }),

/***/ "graphql-type-json":
/*!************************************!*\
  !*** external "graphql-type-json" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("graphql-type-json");

/***/ }),

/***/ "knex":
/*!***********************!*\
  !*** external "knex" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("knex");

/***/ }),

/***/ "lodash/camelCase":
/*!***********************************!*\
  !*** external "lodash/camelCase" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("lodash/camelCase");

/***/ }),

/***/ "lodash/capitalize":
/*!************************************!*\
  !*** external "lodash/capitalize" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("lodash/capitalize");

/***/ }),

/***/ "lodash/differenceWith":
/*!****************************************!*\
  !*** external "lodash/differenceWith" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("lodash/differenceWith");

/***/ }),

/***/ "lodash/isEmpty":
/*!*********************************!*\
  !*** external "lodash/isEmpty" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("lodash/isEmpty");

/***/ }),

/***/ "lodash/isEqual":
/*!*********************************!*\
  !*** external "lodash/isEqual" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("lodash/isEqual");

/***/ }),

/***/ "lodash/isNil":
/*!*******************************!*\
  !*** external "lodash/isNil" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("lodash/isNil");

/***/ }),

/***/ "lodash/isPlainObject":
/*!***************************************!*\
  !*** external "lodash/isPlainObject" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("lodash/isPlainObject");

/***/ }),

/***/ "lodash/mapKeys":
/*!*********************************!*\
  !*** external "lodash/mapKeys" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("lodash/mapKeys");

/***/ }),

/***/ "lodash/mapValues":
/*!***********************************!*\
  !*** external "lodash/mapValues" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("lodash/mapValues");

/***/ }),

/***/ "lodash/pickBy":
/*!********************************!*\
  !*** external "lodash/pickBy" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("lodash/pickBy");

/***/ }),

/***/ "lodash/reduce":
/*!********************************!*\
  !*** external "lodash/reduce" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("lodash/reduce");

/***/ }),

/***/ "lodash/snakeCase":
/*!***********************************!*\
  !*** external "lodash/snakeCase" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("lodash/snakeCase");

/***/ }),

/***/ "lodash/uniq":
/*!******************************!*\
  !*** external "lodash/uniq" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("lodash/uniq");

/***/ }),

/***/ "lodash/uniqBy":
/*!********************************!*\
  !*** external "lodash/uniqBy" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("lodash/uniqBy");

/***/ }),

/***/ "log4js":
/*!*************************!*\
  !*** external "log4js" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("log4js");

/***/ }),

/***/ "micro-cors":
/*!*****************************!*\
  !*** external "micro-cors" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("micro-cors");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "posthog-node":
/*!*******************************!*\
  !*** external "posthog-node" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("posthog-node");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "sql-formatter":
/*!********************************!*\
  !*** external "sql-formatter" ***!
  \********************************/
/***/ ((module) => {

module.exports = import("sql-formatter");;

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("uuid");;

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:crypto");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cgraphql.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cgraphql.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_graphql_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\graphql.ts */ \"(api)/./src/pages/api/graphql.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_graphql_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_graphql_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_graphql_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_graphql_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/graphql\",\n        pathname: \"/api/graphql\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_graphql_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmdyYXBocWwmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlNUNwYWdlcyU1Q2FwaSU1Q2dyYXBocWwudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDMEQ7QUFDMUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHNEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxzREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLz9kNTVkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9zcmNcXFxccGFnZXNcXFxcYXBpXFxcXGdyYXBocWwudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9ncmFwaHFsXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZ3JhcGhxbFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cgraphql.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/apollo/server/adaptors/ibisAdaptor.ts":
/*!***************************************************!*\
  !*** ./src/apollo/server/adaptors/ibisAdaptor.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IbisAdaptor: () => (/* binding */ IbisAdaptor),\n/* harmony export */   SupportedDataSource: () => (/* binding */ SupportedDataSource),\n/* harmony export */   ValidationRules: () => (/* binding */ ValidationRules)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var _server_utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils/logger */ \"(api)/./src/apollo/server/utils/logger.ts\");\n/* harmony import */ var _server_utils_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils/error */ \"(api)/./src/apollo/server/utils/error.ts\");\n/* harmony import */ var _server_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_services__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @server/services */ \"(api)/./src/apollo/server/services/index.ts\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _dataSource__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dataSource */ \"(api)/./src/apollo/server/dataSource.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__, _server_services__WEBPACK_IMPORTED_MODULE_5__]);\n([axios__WEBPACK_IMPORTED_MODULE_0__, _server_services__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nconst logger = (0,_server_utils_logger__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"IbisAdaptor\");\nlogger.level = \"debug\";\nconst config = (0,_server_config__WEBPACK_IMPORTED_MODULE_3__.getConfig)();\nvar SupportedDataSource;\n(function(SupportedDataSource) {\n    SupportedDataSource[\"POSTGRES\"] = \"POSTGRES\";\n    SupportedDataSource[\"BIG_QUERY\"] = \"BIG_QUERY\";\n    SupportedDataSource[\"SNOWFLAKE\"] = \"SNOWFLAKE\";\n    SupportedDataSource[\"MYSQL\"] = \"MYSQL\";\n    SupportedDataSource[\"MSSQL\"] = \"MSSQL\";\n    SupportedDataSource[\"CLICK_HOUSE\"] = \"CLICK_HOUSE\";\n    SupportedDataSource[\"TRINO\"] = \"TRINO\";\n})(SupportedDataSource || (SupportedDataSource = {}));\nconst dataSourceUrlMap = {\n    [\"POSTGRES\"]: \"postgres\",\n    [\"BIG_QUERY\"]: \"bigquery\",\n    [\"SNOWFLAKE\"]: \"snowflake\",\n    [\"MYSQL\"]: \"mysql\",\n    [\"MSSQL\"]: \"mssql\",\n    [\"CLICK_HOUSE\"]: \"clickhouse\",\n    [\"TRINO\"]: \"trino\"\n};\nvar ValidationRules;\n(function(ValidationRules) {\n    ValidationRules[\"COLUMN_IS_VALID\"] = \"COLUMN_IS_VALID\";\n})(ValidationRules || (ValidationRules = {}));\nvar IBIS_API_TYPE;\n(function(IBIS_API_TYPE) {\n    IBIS_API_TYPE[\"QUERY\"] = \"QUERY\";\n    IBIS_API_TYPE[\"DRY_RUN\"] = \"DRY_RUN\";\n    IBIS_API_TYPE[\"DRY_PLAN\"] = \"DRY_PLAN\";\n    IBIS_API_TYPE[\"METADATA\"] = \"METADATA\";\n    IBIS_API_TYPE[\"VALIDATION\"] = \"VALIDATION\";\n    IBIS_API_TYPE[\"ANALYSIS\"] = \"ANALYSIS\";\n})(IBIS_API_TYPE || (IBIS_API_TYPE = {}));\nclass IbisAdaptor {\n    constructor({ ibisServerEndpoint }){\n        this.ibisServerEndpoint = ibisServerEndpoint;\n    }\n    async getNativeSql(options) {\n        const { dataSource, mdl, sql } = options;\n        const body = {\n            sql,\n            manifestStr: Buffer.from(JSON.stringify(mdl)).toString(\"base64\")\n        };\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ibisServerEndpoint}/${this.getIbisApiVersion(\"DRY_PLAN\")}/connector/${dataSourceUrlMap[dataSource]}/dry-plan`, body);\n            return res.data;\n        } catch (e) {\n            logger.debug(`Got error when dry plan with ibis: ${e.response.data}`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.DRY_PLAN_ERROR, {\n                customMessage: e.response.data,\n                originalError: e\n            });\n        }\n    }\n    async query(query, options) {\n        const { dataSource, mdl } = options;\n        const connectionInfo = this.updateConnectionInfo(options.connectionInfo);\n        const ibisConnectionInfo = (0,_dataSource__WEBPACK_IMPORTED_MODULE_7__.toIbisConnectionInfo)(dataSource, connectionInfo);\n        const body = {\n            sql: query,\n            connectionInfo: ibisConnectionInfo,\n            manifestStr: Buffer.from(JSON.stringify(mdl)).toString(\"base64\")\n        };\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ibisServerEndpoint}/${this.getIbisApiVersion(\"QUERY\")}/connector/${dataSourceUrlMap[dataSource]}/query`, body, {\n                params: {\n                    limit: options.limit || _server_services__WEBPACK_IMPORTED_MODULE_5__.DEFAULT_PREVIEW_LIMIT\n                }\n            });\n            return {\n                ...res.data,\n                correlationId: res.headers[\"x-correlation-id\"],\n                processTime: res.headers[\"x-process-time\"]\n            };\n        } catch (e) {\n            logger.debug(`Got error when querying ibis: ${e.response?.data || e.message}`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.IBIS_SERVER_ERROR, {\n                customMessage: e.response?.data || e.message || \"Error querying ibis server\",\n                originalError: e,\n                other: {\n                    correlationId: e.response?.headers[\"x-correlation-id\"],\n                    processTime: e.response?.headers[\"x-process-time\"]\n                }\n            });\n        }\n    }\n    async dryRun(query, options) {\n        const { dataSource, mdl } = options;\n        const connectionInfo = this.updateConnectionInfo(options.connectionInfo);\n        const ibisConnectionInfo = (0,_dataSource__WEBPACK_IMPORTED_MODULE_7__.toIbisConnectionInfo)(dataSource, connectionInfo);\n        const body = {\n            sql: query,\n            connectionInfo: ibisConnectionInfo,\n            manifestStr: Buffer.from(JSON.stringify(mdl)).toString(\"base64\")\n        };\n        logger.debug(`Dry run sql from ibis with body:`);\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ibisServerEndpoint}/${this.getIbisApiVersion(\"DRY_RUN\")}/connector/${dataSourceUrlMap[dataSource]}/query?dryRun=true`, body);\n            logger.debug(`Ibis server Dry run success`);\n            return {\n                correlationId: response.headers[\"x-correlation-id\"],\n                processTime: response.headers[\"x-process-time\"]\n            };\n        } catch (err) {\n            logger.info(`Got error when dry running ibis`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.DRY_RUN_ERROR, {\n                customMessage: err.response?.data || err.message,\n                originalError: err,\n                other: {\n                    correlationId: err.response?.headers[\"x-correlation-id\"],\n                    processTime: err.response?.headers[\"x-process-time\"]\n                }\n            });\n        }\n    }\n    async getTables(dataSource, connectionInfo) {\n        try {\n            const getTablesByConnectionInfo = async (ibisConnectionInfo)=>{\n                const body = {\n                    connectionInfo: ibisConnectionInfo\n                };\n                logger.debug(`Getting tables from ibis`);\n                const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ibisServerEndpoint}/${this.getIbisApiVersion(\"METADATA\")}/connector/${dataSourceUrlMap[dataSource]}/metadata/tables`, body);\n                return this.transformDescriptionToProperties(res.data);\n            };\n            connectionInfo = this.updateConnectionInfo(connectionInfo);\n            // If the dataSource supports multiple connection info, we need to get tables from each connection info\n            const multipleIbisConnectionInfos = (0,_dataSource__WEBPACK_IMPORTED_MODULE_7__.toMultipleIbisConnectionInfos)(dataSource, connectionInfo);\n            if (multipleIbisConnectionInfos) {\n                const results = await Promise.all(multipleIbisConnectionInfos.map(getTablesByConnectionInfo));\n                return results.flat();\n            }\n            // If the dataSource does not support multiple connection info, we only need to get tables from one connection info\n            const ibisConnectionInfo = (0,_dataSource__WEBPACK_IMPORTED_MODULE_7__.toIbisConnectionInfo)(dataSource, connectionInfo);\n            return await getTablesByConnectionInfo(ibisConnectionInfo);\n        } catch (e) {\n            logger.debug(`Got error when getting table: ${e.response?.data || e.message}`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.IBIS_SERVER_ERROR, {\n                customMessage: e.response?.data || e.message || \"Error getting table from ibis server\",\n                originalError: e\n            });\n        }\n    }\n    async getConstraints(dataSource, connectionInfo) {\n        connectionInfo = this.updateConnectionInfo(connectionInfo);\n        const ibisConnectionInfo = (0,_dataSource__WEBPACK_IMPORTED_MODULE_7__.toIbisConnectionInfo)(dataSource, connectionInfo);\n        const body = {\n            connectionInfo: ibisConnectionInfo\n        };\n        try {\n            logger.debug(`Getting constraint from ibis`);\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ibisServerEndpoint}/${this.getIbisApiVersion(\"METADATA\")}/connector/${dataSourceUrlMap[dataSource]}/metadata/constraints`, body);\n            return res.data;\n        } catch (e) {\n            logger.debug(`Got error when getting constraint: ${e.response?.data || e.message}`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.IBIS_SERVER_ERROR, {\n                customMessage: e.response?.data || e.message || \"Error getting constraint from ibis server\",\n                originalError: e\n            });\n        }\n    }\n    async validate(dataSource, validationRule, connectionInfo, mdl, parameters) {\n        connectionInfo = this.updateConnectionInfo(connectionInfo);\n        const ibisConnectionInfo = (0,_dataSource__WEBPACK_IMPORTED_MODULE_7__.toIbisConnectionInfo)(dataSource, connectionInfo);\n        const body = {\n            connectionInfo: ibisConnectionInfo,\n            manifestStr: Buffer.from(JSON.stringify(mdl)).toString(\"base64\"),\n            parameters\n        };\n        try {\n            logger.debug(`Run validation rule \"${validationRule}\" with ibis`);\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.ibisServerEndpoint}/${this.getIbisApiVersion(\"VALIDATION\")}/connector/${dataSourceUrlMap[dataSource]}/validate/${lodash_snakeCase__WEBPACK_IMPORTED_MODULE_6___default()(validationRule)}`, body);\n            return {\n                valid: true,\n                message: null\n            };\n        } catch (e) {\n            logger.debug(`Got error when validating connection: ${e.response?.data || e.message}`);\n            return {\n                valid: false,\n                message: e.response?.data || e.message\n            };\n        }\n    }\n    updateConnectionInfo(connectionInfo) {\n        if (config.otherServiceUsingDocker && Object.hasOwnProperty.call(connectionInfo, \"host\")) {\n            connectionInfo.host = (0,_server_utils__WEBPACK_IMPORTED_MODULE_4__.toDockerHost)(connectionInfo.host);\n            logger.debug(`Host replaced with docker host`);\n        }\n        return connectionInfo;\n    }\n    transformDescriptionToProperties(tables) {\n        const handleColumnProperties = (column)=>{\n            const properties = column?.properties || {};\n            if (column.description) {\n                properties.description = column.description;\n            }\n            const nestedColumns = column.nestedColumns?.map((nc)=>{\n                return handleColumnProperties(nc);\n            });\n            return {\n                ...column,\n                properties,\n                nestedColumns\n            };\n        };\n        return tables.map((table)=>{\n            try {\n                const properties = table?.properties || {};\n                if (table.description) {\n                    properties.description = table.description;\n                }\n                if (table.columns) {\n                    const transformedColumns = table.columns.map((column)=>handleColumnProperties(column));\n                    table.columns = transformedColumns;\n                }\n                return {\n                    ...table,\n                    properties\n                };\n            } catch (e) {\n                console.log(\"e\", e);\n            }\n        });\n    }\n    getIbisApiVersion(apiType) {\n        if (!config.experimentalEngineRustVersion) {\n            return \"v2\";\n        }\n        const useV3 = [\n            \"QUERY\",\n            \"DRY_RUN\",\n            \"DRY_PLAN\",\n            \"VALIDATION\"\n        ].includes(apiType);\n        if (useV3) logger.debug(\"Using ibis v3 api\");\n        return useV3 ? \"v3\" : \"v2\";\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/adaptors/ibisAdaptor.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/adaptors/index.ts":
/*!*********************************************!*\
  !*** ./src/apollo/server/adaptors/index.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ibisAdaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ibisAdaptor */ \"(api)/./src/apollo/server/adaptors/ibisAdaptor.ts\");\n/* harmony import */ var _wrenAIAdaptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrenAIAdaptor */ \"(api)/./src/apollo/server/adaptors/wrenAIAdaptor.ts\");\n/* harmony import */ var _wrenEngineAdaptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wrenEngineAdaptor */ \"(api)/./src/apollo/server/adaptors/wrenEngineAdaptor.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_ibisAdaptor__WEBPACK_IMPORTED_MODULE_0__, _wrenAIAdaptor__WEBPACK_IMPORTED_MODULE_1__, _wrenEngineAdaptor__WEBPACK_IMPORTED_MODULE_2__]);\n([_ibisAdaptor__WEBPACK_IMPORTED_MODULE_0__, _wrenAIAdaptor__WEBPACK_IMPORTED_MODULE_1__, _wrenEngineAdaptor__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _ibisAdaptor__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _ibisAdaptor__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _wrenAIAdaptor__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _wrenAIAdaptor__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _wrenEngineAdaptor__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _wrenEngineAdaptor__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9hZGFwdG9ycy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQThCO0FBQ0U7QUFDSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9hZGFwdG9ycy9pbmRleC50cz81M2ZiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vaWJpc0FkYXB0b3InO1xuZXhwb3J0ICogZnJvbSAnLi93cmVuQUlBZGFwdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vd3JlbkVuZ2luZUFkYXB0b3InO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/adaptors/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/adaptors/wrenAIAdaptor.ts":
/*!*****************************************************!*\
  !*** ./src/apollo/server/adaptors/wrenAIAdaptor.ts ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WrenAIAdaptor: () => (/* binding */ WrenAIAdaptor)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_utils_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/utils/error */ \"(api)/./src/apollo/server/utils/error.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"WrenAIAdaptor\");\nlogger.level = \"debug\";\nconst getAIServiceError = (error)=>{\n    const { data } = error.response || {};\n    return data?.detail ? `${error.message}, detail: ${data.detail}` : error.message;\n};\nclass WrenAIAdaptor {\n    constructor({ wrenAIBaseEndpoint }){\n        this.wrenAIBaseEndpoint = wrenAIBaseEndpoint;\n    }\n    /**\n   * Ask AI service a question.\n   * AI service will return anwser candidates containing sql.\n   */ async ask(input) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/asks`, {\n                query: input.query,\n                id: input.deployId,\n                history: this.transfromHistoryInput(input.history),\n                configurations: input.configurations\n            });\n            return {\n                queryId: res.data.query_id\n            };\n        } catch (err) {\n            logger.debug(`Got error when asking wren AI: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async cancelAsk(queryId) {\n        // make PATCH request /v1/asks/:query_id to cancel the query\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patch(`${this.wrenAIBaseEndpoint}/v1/asks/${queryId}`, {\n                status: \"stopped\"\n            });\n        } catch (err) {\n            logger.debug(`Got error when canceling ask: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async getAskResult(queryId) {\n        // make GET request /v1/asks/:query_id/result to get the result\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/asks/${queryId}/result`);\n            return this.transformAskResult(res.data);\n        } catch (err) {\n            logger.debug(`Got error when getting ask result: ${getAIServiceError(err)}`);\n            // throw err;\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_3__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_3__.GeneralErrorCodes.INTERNAL_SERVER_ERROR, {\n                originalError: err\n            });\n        }\n    }\n    async getAskStreamingResult(queryId) {\n        // make GET request /v1/asks/:query_id/streaming-result to get the streaming result\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/asks/${queryId}/streaming-result`, {\n                responseType: \"stream\"\n            });\n            return res.data;\n        } catch (err) {\n            logger.debug(`Got error when getting ask streaming result: ${getAIServiceError(err)}`);\n            // throw err;\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_3__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_3__.GeneralErrorCodes.INTERNAL_SERVER_ERROR, {\n                originalError: err\n            });\n        }\n    }\n    /**\n   * After you choose a candidate, you can request AI service to generate the detail.\n   */ async generateAskDetail(input) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/ask-details`, input);\n            return {\n                queryId: res.data.query_id\n            };\n        } catch (err) {\n            logger.debug(`Got error when generating ask detail: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async getAskDetailResult(queryId) {\n        // make GET request /v1/ask-details/:query_id/result to get the result\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/ask-details/${queryId}/result`);\n            return this.transformAskDetailResult(res.data);\n        } catch (err) {\n            logger.debug(`Got error when getting ask detail result: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async deploy(deployData) {\n        const { manifest, hash } = deployData;\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/semantics-preparations`, {\n                mdl: JSON.stringify(manifest),\n                id: hash\n            });\n            const deployId = res.data.id;\n            logger.debug(`Wren AI: Deploying wren AI, hash: ${hash}, deployId: ${deployId}`);\n            const deploySuccess = await this.waitDeployFinished(deployId);\n            if (deploySuccess) {\n                logger.debug(`Wren AI: Deploy wren AI success, hash: ${hash}`);\n                return {\n                    status: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__.WrenAIDeployStatusEnum.SUCCESS\n                };\n            } else {\n                return {\n                    status: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__.WrenAIDeployStatusEnum.FAILED,\n                    error: `Wren AI: Deploy wren AI failed or timeout, hash: ${hash}`\n                };\n            }\n        } catch (err) {\n            logger.debug(`Got error when deploying to wren AI, hash: ${hash}. Error: ${err.message}`);\n            return {\n                status: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__.WrenAIDeployStatusEnum.FAILED,\n                error: `Wren AI Error: deployment hash:${hash}, ${err.message}`\n            };\n        }\n    }\n    async generateRecommendationQuestions(input) {\n        const body = {\n            mdl: JSON.stringify(input.manifest),\n            previous_questions: input.previousQuestions,\n            max_questions: input.maxQuestions,\n            max_categories: input.maxCategories,\n            configuration: input.configuration\n        };\n        logger.info(`Wren AI: Generating recommendation questions`);\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/question-recommendations`, body);\n            logger.info(`Wren AI: Generating recommendation questions, queryId: ${res.data.id}`);\n            return {\n                queryId: res.data.id\n            };\n        } catch (err) {\n            logger.debug(`Got error when generating recommendation questions: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async getRecommendationQuestionsResult(queryId) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/question-recommendations/${queryId}`);\n            return this.transformRecommendationQuestionsResult(res.data);\n        } catch (err) {\n            logger.debug(`Got error when getting recommendation questions result: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async createTextBasedAnswer(input) {\n        const body = {\n            query: input.query,\n            sql: input.sql,\n            sql_data: input.sqlData,\n            thread_id: input.threadId,\n            user_id: input.userId,\n            configurations: input.configurations\n        };\n        // make POST request /v1/sql-answers to create text-based answer\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/sql-answers`, body);\n            return {\n                queryId: res.data.query_id\n            };\n        } catch (err) {\n            logger.debug(`Got error when creating text-based answer: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async getTextBasedAnswerResult(queryId) {\n        // make GET request /v1/sql-answers/:query_id to get the result\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/sql-answers/${queryId}`);\n            return this.transformTextBasedAnswerResult(res.data);\n        } catch (err) {\n            logger.debug(`Got error when getting text-based answer result: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async streamTextBasedAnswer(queryId) {\n        // make GET request /v1/sql-answers/:query_id/streaming to get the streaming result\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/sql-answers/${queryId}/streaming`, {\n                responseType: \"stream\"\n            });\n            return res.data;\n        } catch (err) {\n            logger.debug(`Got error when getting text-based answer streaming result: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async generateChart(input) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/charts`, input);\n            return {\n                queryId: res.data.query_id\n            };\n        } catch (err) {\n            logger.debug(`Got error when creating chart: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async getChartResult(queryId) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/charts/${queryId}`);\n            return this.transformChartResult(res.data);\n        } catch (err) {\n            logger.debug(`Got error when getting chart result: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async cancelChart(queryId) {\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patch(`${this.wrenAIBaseEndpoint}/v1/charts/${queryId}`, {\n                status: \"stopped\"\n            });\n        } catch (err) {\n            logger.debug(`Got error when canceling chart: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async adjustChart(input) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenAIBaseEndpoint}/v1/chart-adjustments`, this.transformChartAdjustmentInput(input));\n            return {\n                queryId: res.data.query_id\n            };\n        } catch (err) {\n            logger.debug(`Got error when adjusting chart: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async getChartAdjustmentResult(queryId) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/chart-adjustments/${queryId}`);\n            return this.transformChartResult(res.data);\n        } catch (err) {\n            logger.debug(`Got error when getting chart adjustment result: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    async cancelChartAdjustment(queryId) {\n        try {\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patch(`${this.wrenAIBaseEndpoint}/v1/chart-adjustments/${queryId}`, {\n                status: \"stopped\"\n            });\n        } catch (err) {\n            logger.debug(`Got error when canceling chart adjustment: ${getAIServiceError(err)}`);\n            throw err;\n        }\n    }\n    transformChartAdjustmentInput(input) {\n        const { query, sql, adjustmentOption, chartSchema, configurations } = input;\n        return {\n            query,\n            sql,\n            adjustment_option: {\n                chart_type: adjustmentOption.chartType.toLowerCase(),\n                x_axis: adjustmentOption.xAxis,\n                y_axis: adjustmentOption.yAxis,\n                x_offset: adjustmentOption.xOffset,\n                color: adjustmentOption.color,\n                theta: adjustmentOption.theta\n            },\n            chart_schema: chartSchema,\n            configurations\n        };\n    }\n    transformChartResult(body) {\n        const { status, error } = this.transformStatusAndError(body);\n        return {\n            status: status,\n            error,\n            response: {\n                reasoning: body.response?.reasoning,\n                chartType: body.response?.chart_type,\n                chartSchema: body.response?.chart_schema\n            }\n        };\n    }\n    transformTextBasedAnswerResult(body) {\n        const { status, error } = this.transformStatusAndError(body);\n        return {\n            status: status,\n            numRowsUsedInLLM: body.num_rows_used_in_llm,\n            error\n        };\n    }\n    async waitDeployFinished(deployId) {\n        let deploySuccess = false;\n        // timeout after 30 seconds\n        for(let waitTime = 1; waitTime <= 7; waitTime++){\n            try {\n                const status = await this.getDeployStatus(deployId);\n                logger.debug(`Wren AI: Deploy status: ${status}`);\n                if (status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__.WrenAISystemStatus.FINISHED) {\n                    deploySuccess = true;\n                    break;\n                } else if (status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__.WrenAISystemStatus.FAILED) {\n                    break;\n                } else if (status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_1__.WrenAISystemStatus.INDEXING) {\n                // do nothing\n                } else {\n                    logger.debug(`Wren AI: Unknown Wren AI deploy status: ${status}`);\n                    return;\n                }\n            } catch (err) {\n                throw err;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, waitTime * 1000));\n        }\n        return deploySuccess;\n    }\n    async getDeployStatus(deployId) {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenAIBaseEndpoint}/v1/semantics-preparations/${deployId}/status`);\n            if (res.data.error) {\n                // passing AI response error string to catch block\n                throw new Error(res.data.error);\n            }\n            return res.data?.status.toUpperCase();\n        } catch (err) {\n            logger.debug(`Got error in API /v1/semantics-preparations/${deployId}/status: ${err.message}`);\n            throw err;\n        }\n    }\n    transformAskResult(body) {\n        const { type, intent_reasoning } = body;\n        const { status, error } = this.transformStatusAndError(body);\n        const candidates = (body?.response || []).map((candidate)=>({\n                type: candidate?.type?.toUpperCase(),\n                sql: candidate.sql,\n                viewId: candidate?.viewId ? Number(candidate.viewId) : null\n            }));\n        return {\n            type,\n            status: status,\n            error,\n            response: candidates,\n            intentReasoning: intent_reasoning\n        };\n    }\n    transformRecommendationQuestionsResult(body) {\n        const { status, error } = this.transformStatusAndError(body);\n        return {\n            ...body,\n            status,\n            error\n        };\n    }\n    transformAskDetailResult(body) {\n        const { type } = body;\n        const { status, error } = this.transformStatusAndError(body);\n        // snake_case to camelCase\n        const steps = (body?.response?.steps || []).map((step)=>({\n                summary: step.summary,\n                sql: step.sql,\n                cteName: step.cte_name\n            }));\n        return {\n            type,\n            status: status,\n            error,\n            response: {\n                description: body?.response?.description,\n                steps\n            }\n        };\n    }\n    transformStatusAndError(body) {\n        // transform status to enum\n        const status = body?.status?.toUpperCase();\n        if (!status) {\n            throw new Error(`Unknown ask status: ${body?.status}`);\n        }\n        // use custom error to transform error\n        const code = body?.error?.code;\n        const error = code ? _server_utils_error__WEBPACK_IMPORTED_MODULE_3__.create(code, code === _server_utils_error__WEBPACK_IMPORTED_MODULE_3__.GeneralErrorCodes.AI_SERVICE_UNDEFINED_ERROR ? {\n            customMessage: body?.error?.message\n        } : undefined) : null;\n        // format custom error into WrenAIError that is used in graphql\n        const formattedError = error ? {\n            code: error.extensions.code,\n            message: error.message,\n            shortMessage: error.extensions.shortMessage\n        } : null;\n        return {\n            status,\n            error: formattedError\n        };\n    }\n    transfromHistoryInput(history) {\n        if (!history) {\n            return null;\n        }\n        // make it snake_case\n        return {\n            ...history,\n            steps: history.steps.map((step)=>({\n                    sql: step.sql,\n                    summary: step.summary,\n                    cte_name: step.cteName\n                }))\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/adaptors/wrenAIAdaptor.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/adaptors/wrenEngineAdaptor.ts":
/*!*********************************************************!*\
  !*** ./src/apollo/server/adaptors/wrenEngineAdaptor.ts ***!
  \*********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WrenEngineAdaptor: () => (/* binding */ WrenEngineAdaptor),\n/* harmony export */   WrenEngineValidateStatus: () => (/* binding */ WrenEngineValidateStatus)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_utils_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils/error */ \"(api)/./src/apollo/server/utils/error.ts\");\n/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services */ \"(api)/./src/apollo/server/services/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__, _services__WEBPACK_IMPORTED_MODULE_3__]);\n([axios__WEBPACK_IMPORTED_MODULE_0__, _services__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"WrenEngineAdaptor\");\nlogger.level = \"debug\";\nvar WrenEngineValidateStatus;\n(function(WrenEngineValidateStatus) {\n    WrenEngineValidateStatus[\"PASS\"] = \"PASS\";\n    WrenEngineValidateStatus[\"ERROR\"] = \"ERROR\";\n    WrenEngineValidateStatus[\"FAIL\"] = \"FAIL\";\n    WrenEngineValidateStatus[\"WARN\"] = \"WARN\";\n    WrenEngineValidateStatus[\"SKIP\"] = \"SKIP\";\n})(WrenEngineValidateStatus || (WrenEngineValidateStatus = {}));\nclass WrenEngineAdaptor {\n    constructor({ wrenEngineEndpoint }){\n        this.sessionPropsUrlPath = \"/v1/data-source/duckdb/settings/session-sql\";\n        this.queryDuckdbUrlPath = \"/v1/data-source/duckdb/query\";\n        this.initSqlUrlPath = \"/v1/data-source/duckdb/settings/init-sql\";\n        this.previewUrlPath = \"/v1/mdl/preview\";\n        this.dryPlanUrlPath = \"/v1/mdl/dry-plan\";\n        this.dryRunUrlPath = \"/v1/mdl/dry-run\";\n        this.validateUrlPath = \"/v1/mdl/validate\";\n        this.wrenEngineBaseEndpoint = wrenEngineEndpoint;\n    }\n    async validateColumnIsValid(manifest, modelName, columnName) {\n        const model = manifest.models.find((m)=>m.name === modelName);\n        if (!model) {\n            return {\n                valid: false,\n                message: `Model ${modelName} not found in the manifest`\n            };\n        }\n        const column = model.columns.find((c)=>c.name === columnName);\n        if (!column) {\n            return {\n                valid: false,\n                message: `Column ${columnName} not found in model ${modelName} in the manifest`\n            };\n        }\n        try {\n            const payload = {\n                manifest,\n                parameters: {\n                    modelName,\n                    columnName\n                }\n            };\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`${this.wrenEngineBaseEndpoint}${this.validateUrlPath}/column_is_valid`, payload);\n            const result = res.data[0];\n            if (result.status === \"PASS\") {\n                return {\n                    valid: true\n                };\n            } else {\n                return {\n                    valid: false,\n                    message: JSON.stringify(result)\n                };\n            }\n        } catch (err) {\n            logger.debug(`Got error when validating column: ${err.message}`);\n            return {\n                valid: false,\n                message: err.message\n            };\n        }\n    }\n    async prepareDuckDB(options) {\n        const { initSql, sessionProps } = options;\n        await this.initDatabase(initSql);\n        await this.putSessionProps(sessionProps);\n    }\n    async listTables() {\n        const sql = \"SELECT       table_catalog, table_schema, table_name, column_name, ordinal_position, is_nullable, data_type      FROM INFORMATION_SCHEMA.COLUMNS;\";\n        const response = await this.queryDuckdb(sql);\n        return this.formatToCompactTable(response);\n    }\n    async putSessionProps(props) {\n        const setSessionStatements = Object.entries(props).map(([key, value])=>{\n            return `SET ${key} = '${value}';`;\n        }).join(\"\\n\");\n        try {\n            const url = new URL(this.sessionPropsUrlPath, this.wrenEngineBaseEndpoint);\n            const headers = {\n                \"Content-Type\": \"text/plain; charset=utf-8\"\n            };\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(url.href, setSessionStatements, {\n                headers\n            });\n        } catch (err) {\n            logger.debug(`Got error when put session props: ${err.message}`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.SESSION_PROPS_ERROR, {\n                customMessage: _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.errorMessages[_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.SESSION_PROPS_ERROR],\n                originalError: err\n            });\n        }\n    }\n    async queryDuckdb(sql) {\n        try {\n            const url = new URL(this.queryDuckdbUrlPath, this.wrenEngineBaseEndpoint);\n            const headers = {\n                \"Content-Type\": \"text/plain; charset=utf-8\"\n            };\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(url.href, sql, {\n                headers\n            });\n            return res.data;\n        } catch (err) {\n            logger.debug(`Got error when querying duckdb: ${err.message}`);\n            throw err;\n        }\n    }\n    async patchConfig(config) {\n        try {\n            const configPayload = Object.entries(config).map(([key, value])=>{\n                return {\n                    name: key,\n                    value\n                };\n            });\n            const url = new URL(\"/v1/config\", this.wrenEngineBaseEndpoint);\n            const headers = {\n                \"Content-Type\": \"application/json\"\n            };\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patch(url.href, configPayload, {\n                headers\n            });\n        } catch (err) {\n            logger.debug(`Got error when patching config: ${err.message}`);\n            throw err;\n        }\n    }\n    async previewData(sql, manifest, limit = _services__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PREVIEW_LIMIT) {\n        try {\n            const url = new URL(this.previewUrlPath, this.wrenEngineBaseEndpoint);\n            const headers = {\n                \"Content-Type\": \"application/json\"\n            };\n            const res = await (0,axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                method: \"get\",\n                url: url.href,\n                headers,\n                data: {\n                    sql,\n                    limit,\n                    manifest\n                }\n            });\n            return res.data;\n        } catch (err) {\n            logger.debug(`Got error when previewing data: ${err.message}`);\n            throw err;\n        }\n    }\n    async getNativeSQL(sql, options) {\n        try {\n            const props = {\n                modelingOnly: options?.modelingOnly ? true : false,\n                manifest: options?.manifest\n            };\n            const url = new URL(this.dryPlanUrlPath, this.wrenEngineBaseEndpoint);\n            const headers = {\n                \"Content-Type\": \"application/json\"\n            };\n            const res = await (0,axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                method: \"get\",\n                url: url.href,\n                headers,\n                data: {\n                    sql,\n                    ...props\n                }\n            });\n            return res.data;\n        } catch (err) {\n            logger.debug(`Got error when getting native SQL: ${err.message}`);\n            _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.DRY_PLAN_ERROR, {\n                customMessage: err.message,\n                originalError: err\n            });\n        }\n    }\n    async dryRun(sql, options) {\n        try {\n            const { manifest } = options;\n            const body = {\n                sql,\n                manifest\n            };\n            logger.debug(`Dry run wren engine with body: ${JSON.stringify(sql, null, 2)}`);\n            const url = new URL(this.dryRunUrlPath, this.wrenEngineBaseEndpoint);\n            const res = await (0,axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n                method: \"get\",\n                url: url.href,\n                data: body\n            });\n            logger.debug(`Wren Engine Dry run success`);\n            return res.data;\n        } catch (err) {\n            logger.info(`Got error when dry running`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.DRY_RUN_ERROR, {\n                customMessage: err.response.data.message,\n                originalError: err\n            });\n        }\n    }\n    async getDeployStatus() {\n        try {\n            const res = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${this.wrenEngineBaseEndpoint}/v1/mdl/status`);\n            return res.data;\n        } catch (err) {\n            logger.debug(`WrenEngine: Got error when getting deploy status: ${err.message}`);\n            throw err;\n        }\n    }\n    async initDatabase(sql) {\n        try {\n            const url = new URL(this.initSqlUrlPath, this.wrenEngineBaseEndpoint);\n            const headers = {\n                \"Content-Type\": \"text/plain; charset=utf-8\"\n            };\n            await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(url.href, sql, {\n                headers\n            });\n        } catch (err) {\n            logger.debug(`Got error when init database: ${err}`);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.INIT_SQL_ERROR, {\n                customMessage: _server_utils_error__WEBPACK_IMPORTED_MODULE_2__.errorMessages[_server_utils_error__WEBPACK_IMPORTED_MODULE_2__.GeneralErrorCodes.INIT_SQL_ERROR],\n                originalError: err\n            });\n        }\n    }\n    formatToCompactTable(columns) {\n        return columns.data.reduce((acc, row)=>{\n            const [table_catalog, table_schema, table_name, column_name, _ordinal_position, is_nullable, data_type] = row;\n            let table = acc.find((t)=>t.name === table_name && t.properties.schema === table_schema);\n            if (!table) {\n                table = {\n                    name: table_name,\n                    description: \"\",\n                    columns: [],\n                    properties: {\n                        schema: table_schema,\n                        catalog: table_catalog,\n                        table: table_name\n                    },\n                    primaryKey: null\n                };\n                acc.push(table);\n            }\n            table.columns.push({\n                name: column_name,\n                type: data_type,\n                notNull: is_nullable.toLocaleLowerCase() !== \"yes\",\n                description: \"\",\n                properties: {}\n            });\n            return acc;\n        }, []);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/adaptors/wrenEngineAdaptor.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/backgrounds/chart.ts":
/*!************************************************!*\
  !*** ./src/apollo/server/backgrounds/chart.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChartAdjustmentBackgroundTracker: () => (/* binding */ ChartAdjustmentBackgroundTracker),\n/* harmony export */   ChartBackgroundTracker: () => (/* binding */ ChartBackgroundTracker)\n/* harmony export */ });\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _server_utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils/logger */ \"(api)/./src/apollo/server/utils/logger.ts\");\n/* harmony import */ var _server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__]);\n_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst logger = (0,_server_utils_logger__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"ChartBackgroundTracker\");\nlogger.level = \"debug\";\nconst isFinalized = (status)=>{\n    return status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.FINISHED || status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.FAILED || status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.STOPPED;\n};\nclass ChartBackgroundTracker {\n    constructor({ telemetry, wrenAIAdaptor, threadResponseRepository }){\n        this.tasks = {};\n        this.runningJobs = new Set();\n        this.telemetry = telemetry;\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.threadResponseRepository = threadResponseRepository;\n        this.intervalTime = 1000;\n        this.start();\n    }\n    start() {\n        logger.info(\"Chart background tracker started\");\n        setInterval(()=>{\n            const jobs = Object.values(this.tasks).map((threadResponse)=>async ()=>{\n                    // check if same job is running\n                    if (this.runningJobs.has(threadResponse.id)) {\n                        return;\n                    }\n                    // mark the job as running\n                    this.runningJobs.add(threadResponse.id);\n                    // get the chart detail\n                    const chartDetail = threadResponse.chartDetail;\n                    // get the latest result from AI service\n                    const result = await this.wrenAIAdaptor.getChartResult(chartDetail.queryId);\n                    // check if status change\n                    if (chartDetail.status === result.status) {\n                        // mark the job as finished\n                        logger.debug(`Job ${threadResponse.id} chart status not changed, finished`);\n                        this.runningJobs.delete(threadResponse.id);\n                        return;\n                    }\n                    // update database\n                    const updatedChartDetail = {\n                        queryId: chartDetail.queryId,\n                        status: result?.status,\n                        error: result?.error,\n                        description: result?.response?.reasoning,\n                        chartType: result?.response?.chartType?.toUpperCase() || null,\n                        chartSchema: result?.response?.chartSchema\n                    };\n                    logger.debug(`Job ${threadResponse.id} chart status changed, updating`);\n                    await this.threadResponseRepository.updateOne(threadResponse.id, {\n                        chartDetail: updatedChartDetail\n                    });\n                    // remove the task from tracker if it is finalized\n                    if (isFinalized(result.status)) {\n                        const eventProperties = {\n                            question: threadResponse.question,\n                            error: result.error\n                        };\n                        if (result.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.FINISHED) {\n                            this.telemetry.sendEvent(_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__.TelemetryEvent.HOME_ANSWER_CHART, eventProperties);\n                        } else {\n                            this.telemetry.sendEvent(_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__.TelemetryEvent.HOME_ANSWER_CHART, eventProperties, _server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__.WrenService.AI, false);\n                        }\n                        logger.debug(`Job ${threadResponse.id} chart is finalized, removing`);\n                        delete this.tasks[threadResponse.id];\n                    }\n                    // mark the job as finished\n                    this.runningJobs.delete(threadResponse.id);\n                });\n            // run the jobs\n            Promise.allSettled(jobs.map((job)=>job())).then((results)=>{\n                // show reason of rejection\n                results.forEach((result, index)=>{\n                    if (result.status === \"rejected\") {\n                        logger.error(`Job ${index} failed: ${result.reason}`);\n                    }\n                });\n            });\n        }, this.intervalTime);\n    }\n    addTask(threadResponse) {\n        this.tasks[threadResponse.id] = threadResponse;\n    }\n    getTasks() {\n        return this.tasks;\n    }\n}\nclass ChartAdjustmentBackgroundTracker {\n    constructor({ telemetry, wrenAIAdaptor, threadResponseRepository }){\n        this.tasks = {};\n        this.runningJobs = new Set();\n        this.telemetry = telemetry;\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.threadResponseRepository = threadResponseRepository;\n        this.intervalTime = 1000;\n        this.start();\n    }\n    start() {\n        logger.info(\"Chart adjustment background tracker started\");\n        setInterval(()=>{\n            const jobs = Object.values(this.tasks).map((threadResponse)=>async ()=>{\n                    // check if same job is running\n                    if (this.runningJobs.has(threadResponse.id)) {\n                        return;\n                    }\n                    // mark the job as running\n                    this.runningJobs.add(threadResponse.id);\n                    // get the chart detail\n                    const chartDetail = threadResponse.chartDetail;\n                    // get the latest result from AI service\n                    const result = await this.wrenAIAdaptor.getChartAdjustmentResult(chartDetail.queryId);\n                    // check if status change\n                    if (chartDetail.status === result.status) {\n                        // mark the job as finished\n                        logger.debug(`Job ${threadResponse.id} chart status not changed, finished`);\n                        this.runningJobs.delete(threadResponse.id);\n                        return;\n                    }\n                    // update database\n                    const updatedChartDetail = {\n                        queryId: chartDetail.queryId,\n                        status: result?.status,\n                        error: result?.error,\n                        description: result?.response?.reasoning,\n                        chartType: result?.response?.chartType?.toUpperCase() || null,\n                        chartSchema: result?.response?.chartSchema,\n                        adjustment: true\n                    };\n                    logger.debug(`Job ${threadResponse.id} chart status changed, updating`);\n                    await this.threadResponseRepository.updateOne(threadResponse.id, {\n                        chartDetail: updatedChartDetail\n                    });\n                    // remove the task from tracker if it is finalized\n                    if (isFinalized(result.status)) {\n                        const eventProperties = {\n                            question: threadResponse.question,\n                            error: result.error\n                        };\n                        if (result.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.FINISHED) {\n                            this.telemetry.sendEvent(_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__.TelemetryEvent.HOME_ANSWER_ADJUST_CHART, eventProperties);\n                        } else {\n                            this.telemetry.sendEvent(_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__.TelemetryEvent.HOME_ANSWER_ADJUST_CHART, eventProperties, _server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_2__.WrenService.AI, false);\n                        }\n                        logger.debug(`Job ${threadResponse.id} chart is finalized, removing`);\n                        delete this.tasks[threadResponse.id];\n                    }\n                    // mark the job as finished\n                    this.runningJobs.delete(threadResponse.id);\n                });\n            // run the jobs\n            Promise.allSettled(jobs.map((job)=>job())).then((results)=>{\n                // show reason of rejection\n                results.forEach((result, index)=>{\n                    if (result.status === \"rejected\") {\n                        logger.error(`Job ${index} failed: ${result.reason}`);\n                    }\n                });\n            });\n        }, this.intervalTime);\n    }\n    addTask(threadResponse) {\n        this.tasks[threadResponse.id] = threadResponse;\n    }\n    getTasks() {\n        return this.tasks;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/backgrounds/chart.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/backgrounds/index.ts":
/*!************************************************!*\
  !*** ./src/apollo/server/backgrounds/index.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _recommend_question__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./recommend-question */ \"(api)/./src/apollo/server/backgrounds/recommend-question.ts\");\n/* harmony import */ var _chart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chart */ \"(api)/./src/apollo/server/backgrounds/chart.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_recommend_question__WEBPACK_IMPORTED_MODULE_0__, _chart__WEBPACK_IMPORTED_MODULE_1__]);\n([_recommend_question__WEBPACK_IMPORTED_MODULE_0__, _chart__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _recommend_question__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _recommend_question__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _chart__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _chart__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9iYWNrZ3JvdW5kcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBcUM7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9iYWNrZ3JvdW5kcy9pbmRleC50cz85ZTYzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vcmVjb21tZW5kLXF1ZXN0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vY2hhcnQnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/backgrounds/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/backgrounds/recommend-question.ts":
/*!*************************************************************!*\
  !*** ./src/apollo/server/backgrounds/recommend-question.ts ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectRecommendQuestionBackgroundTracker: () => (/* binding */ ProjectRecommendQuestionBackgroundTracker),\n/* harmony export */   ThreadRecommendQuestionBackgroundTracker: () => (/* binding */ ThreadRecommendQuestionBackgroundTracker)\n/* harmony export */ });\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ \"(api)/./src/apollo/server/utils/logger.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__]);\n_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// PRQ background tracker : project recommend question background tracker\nconst loggerPrefix = \"PRQBT:\";\nconst isFinalized = (status)=>{\n    return [\n        _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.RecommendationQuestionStatus.FINISHED,\n        _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.RecommendationQuestionStatus.FAILED\n    ].includes(status);\n};\nclass ProjectRecommendQuestionBackgroundTracker {\n    constructor({ telemetry, wrenAIAdaptor, projectRepository }){\n        // tasks is a kv pair of task id and thread response\n        this.tasks = {};\n        this.runningJobs = new Set();\n        this.logger = (0,_utils_logger__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"PRQ Background Tracker\");\n        this.logger.level = \"debug\";\n        this.telemetry = telemetry;\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.projectRepository = projectRepository;\n        this.intervalTime = 1000;\n        this.start();\n    }\n    start() {\n        this.logger.info(\"Recommend question background tracker started\");\n        setInterval(()=>{\n            const jobs = Object.values(this.tasks).map((project)=>async ()=>{\n                    // check if same job is running\n                    if (this.runningJobs.has(this.taskKey(project))) {\n                        return;\n                    }\n                    // mark the job as running\n                    this.runningJobs.add(this.taskKey(project));\n                    // get the latest result from AI service\n                    const result = await this.wrenAIAdaptor.getRecommendationQuestionsResult(project.queryId);\n                    // check if status change\n                    if (project.questionsStatus === result.status && result.response?.questions.length === (project.questions || []).length) {\n                        // mark the job as finished\n                        this.logger.debug(`${loggerPrefix}job ${this.taskKey(project)} status not changed, returning question count: ${result.response?.questions.length || 0}`);\n                        this.runningJobs.delete(this.taskKey(project));\n                        return;\n                    }\n                    // update database\n                    if (result.status !== project.questionsStatus || result.response?.questions.length !== (project.questions || []).length) {\n                        this.logger.debug(`${loggerPrefix}job ${this.taskKey(project)} have changes, returning question count: ${result.response?.questions.length || 0}, updating`);\n                        await this.projectRepository.updateOne(project.id, {\n                            questionsStatus: result.status.toUpperCase(),\n                            questions: result.response?.questions,\n                            questionsError: result.error\n                        });\n                        project.questionsStatus = result.status;\n                        project.questions = result.response?.questions;\n                    }\n                    // remove the task from tracker if it is finalized\n                    if (isFinalized(result.status)) {\n                        const eventProperties = {\n                            projectId: project.id,\n                            projectType: project.type,\n                            status: result.status,\n                            questions: project.questions,\n                            error: result.error\n                        };\n                        if (result.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.RecommendationQuestionStatus.FINISHED) {\n                            this.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__.TelemetryEvent.HOME_GENERATE_PROJECT_RECOMMENDATION_QUESTIONS, eventProperties);\n                        } else {\n                            this.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__.TelemetryEvent.HOME_GENERATE_PROJECT_RECOMMENDATION_QUESTIONS, eventProperties, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__.WrenService.AI, false);\n                        }\n                        this.logger.debug(`${loggerPrefix}job ${this.taskKey(project)} is finalized, removing`);\n                        delete this.tasks[this.taskKey(project)];\n                    }\n                    // mark the job as finished\n                    this.runningJobs.delete(this.taskKey(project));\n                });\n            // run the jobs\n            Promise.allSettled(jobs.map((job)=>job())).then((results)=>{\n                // show reason of rejection\n                results.forEach((result, index)=>{\n                    if (result.status === \"rejected\") {\n                        this.logger.error(`Job ${index} failed: ${result.reason}`);\n                    }\n                });\n            });\n        }, this.intervalTime);\n    }\n    addTask(project) {\n        this.tasks[this.taskKey(project)] = project;\n    }\n    getTasks() {\n        return this.tasks;\n    }\n    async initialize() {\n        const projects = await this.projectRepository.findAll();\n        for (const project of projects){\n            if (this.taskKey(project) && !isFinalized(project.questionsStatus)) {\n                this.addTask(project);\n            }\n        }\n    }\n    taskKey(project) {\n        return project.id;\n    }\n    isExist(project) {\n        return this.tasks[this.taskKey(project)];\n    }\n}\nclass ThreadRecommendQuestionBackgroundTracker {\n    constructor({ telemetry, wrenAIAdaptor, threadRepository }){\n        // tasks is a kv pair of task id and thread response\n        this.tasks = {};\n        this.runningJobs = new Set();\n        this.logger = (0,_utils_logger__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"TRQ Background Tracker\");\n        this.logger.level = \"debug\";\n        this.telemetry = telemetry;\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.threadRepository = threadRepository;\n        this.intervalTime = 1000;\n        this.start();\n    }\n    start() {\n        this.logger.info(\"Recommend question background tracker started\");\n        setInterval(()=>{\n            const jobs = Object.values(this.tasks).map((thread)=>async ()=>{\n                    // check if same job is running\n                    if (this.runningJobs.has(this.taskKey(thread))) {\n                        return;\n                    }\n                    // mark the job as running\n                    this.runningJobs.add(this.taskKey(thread));\n                    // get the latest result from AI service\n                    const result = await this.wrenAIAdaptor.getRecommendationQuestionsResult(thread.queryId);\n                    // check if status change\n                    if (thread.questionsStatus === result.status && result.response?.questions.length === (thread.questions || []).length) {\n                        // mark the job as finished\n                        this.logger.debug(`${loggerPrefix}job ${this.taskKey(thread)} status not changed, returning question count: ${result.response?.questions.length || 0}`);\n                        this.runningJobs.delete(this.taskKey(thread));\n                        return;\n                    }\n                    // update database\n                    if (result.status !== thread.questionsStatus || result.response?.questions.length !== (thread.questions || []).length) {\n                        this.logger.debug(`${loggerPrefix}job ${this.taskKey(thread)} have changes, returning question count: ${result.response?.questions.length || 0}, updating`);\n                        await this.threadRepository.updateOne(thread.id, {\n                            questionsStatus: result.status.toUpperCase(),\n                            questions: result.response?.questions,\n                            questionsError: result.error\n                        });\n                        thread.questionsStatus = result.status;\n                        thread.questions = result.response?.questions;\n                    }\n                    // remove the task from tracker if it is finalized\n                    if (isFinalized(result.status)) {\n                        const eventProperties = {\n                            thread_id: thread.id,\n                            status: result.status,\n                            questions: thread.questions,\n                            error: result.error\n                        };\n                        if (result.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.RecommendationQuestionStatus.FINISHED) {\n                            this.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__.TelemetryEvent.HOME_GENERATE_THREAD_RECOMMENDATION_QUESTIONS, eventProperties);\n                        } else {\n                            this.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__.TelemetryEvent.HOME_GENERATE_THREAD_RECOMMENDATION_QUESTIONS, eventProperties, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_1__.WrenService.AI, false);\n                        }\n                        this.logger.debug(`${loggerPrefix}job ${this.taskKey(thread)} is finalized, removing`);\n                        delete this.tasks[this.taskKey(thread)];\n                    }\n                    // mark the job as finished\n                    this.runningJobs.delete(this.taskKey(thread));\n                });\n            // run the jobs\n            Promise.allSettled(jobs.map((job)=>job())).then((results)=>{\n                // show reason of rejection\n                results.forEach((result, index)=>{\n                    if (result.status === \"rejected\") {\n                        this.logger.error(`Job ${index} failed: ${result.reason}`);\n                    }\n                });\n            });\n        }, this.intervalTime);\n    }\n    addTask(thread) {\n        this.tasks[this.taskKey(thread)] = thread;\n    }\n    getTasks() {\n        return this.tasks;\n    }\n    async initialize() {\n        const threads = await this.threadRepository.findAll();\n        for (const thread of threads){\n            if (!this.tasks[this.taskKey(thread)] && thread.queryId && !isFinalized(thread.questionsStatus)) {\n                this.addTask(thread);\n            }\n        }\n    }\n    taskKey(thread) {\n        return thread.id;\n    }\n    isExist(thread) {\n        return this.tasks[this.taskKey(thread)];\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/backgrounds/recommend-question.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/backgrounds/textBasedAnswerBackgroundTracker.ts":
/*!***************************************************************************!*\
  !*** ./src/apollo/server/backgrounds/textBasedAnswerBackgroundTracker.ts ***!
  \***************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TextBasedAnswerBackgroundTracker: () => (/* binding */ TextBasedAnswerBackgroundTracker)\n/* harmony export */ });\n/* harmony import */ var _models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services */ \"(api)/./src/apollo/server/services/index.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_services__WEBPACK_IMPORTED_MODULE_1__]);\n_services__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"TextBasedAnswerBackgroundTracker\");\nlogger.level = \"debug\";\nclass TextBasedAnswerBackgroundTracker {\n    constructor({ wrenAIAdaptor, threadResponseRepository, projectService, deployService, queryService }){\n        // tasks is a kv pair of task id and thread response\n        this.tasks = {};\n        this.runningJobs = new Set();\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.threadResponseRepository = threadResponseRepository;\n        this.projectService = projectService;\n        this.deployService = deployService;\n        this.queryService = queryService;\n        this.intervalTime = 1000;\n        this.start();\n    }\n    start() {\n        setInterval(async ()=>{\n            const jobs = Object.values(this.tasks).map((threadResponse)=>async ()=>{\n                    if (this.runningJobs.has(threadResponse.id) || !threadResponse.answerDetail) {\n                        return;\n                    }\n                    this.runningJobs.add(threadResponse.id);\n                    // update the status to fetching data\n                    await this.threadResponseRepository.updateOne(threadResponse.id, {\n                        answerDetail: {\n                            ...threadResponse.answerDetail,\n                            status: _services__WEBPACK_IMPORTED_MODULE_1__.ThreadResponseAnswerStatus.FETCHING_DATA\n                        }\n                    });\n                    // get sql data\n                    const project = await this.projectService.getCurrentProject();\n                    const deployment = await this.deployService.getLastDeployment(project.id);\n                    const mdl = deployment.manifest;\n                    const data = await this.queryService.preview(threadResponse.sql, {\n                        project,\n                        manifest: mdl,\n                        modelingOnly: false,\n                        limit: 500\n                    });\n                    // request AI service\n                    const response = await this.wrenAIAdaptor.createTextBasedAnswer({\n                        query: threadResponse.question,\n                        sql: threadResponse.sql,\n                        sqlData: data,\n                        threadId: threadResponse.threadId.toString(),\n                        configurations: {\n                            language: _models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n                        }\n                    });\n                    // update the status to preprocessing\n                    await this.threadResponseRepository.updateOne(threadResponse.id, {\n                        answerDetail: {\n                            ...threadResponse.answerDetail,\n                            status: _services__WEBPACK_IMPORTED_MODULE_1__.ThreadResponseAnswerStatus.PREPROCESSING\n                        }\n                    });\n                    // polling query id to check the status\n                    let result;\n                    do {\n                        result = await this.wrenAIAdaptor.getTextBasedAnswerResult(response.queryId);\n                        if (result.status === _models_adaptor__WEBPACK_IMPORTED_MODULE_0__.TextBasedAnswerStatus.PREPROCESSING) {\n                            await new Promise((resolve)=>setTimeout(resolve, 500));\n                        }\n                    }while (result.status === _models_adaptor__WEBPACK_IMPORTED_MODULE_0__.TextBasedAnswerStatus.PREPROCESSING);\n                    // update the status to final\n                    const updatedAnswerDetail = {\n                        queryId: response.queryId,\n                        status: result.status === _models_adaptor__WEBPACK_IMPORTED_MODULE_0__.TextBasedAnswerStatus.SUCCEEDED ? _services__WEBPACK_IMPORTED_MODULE_1__.ThreadResponseAnswerStatus.STREAMING : _services__WEBPACK_IMPORTED_MODULE_1__.ThreadResponseAnswerStatus.FAILED,\n                        numRowsUsedInLLM: result.numRowsUsedInLLM,\n                        error: result.error\n                    };\n                    await this.threadResponseRepository.updateOne(threadResponse.id, {\n                        answerDetail: updatedAnswerDetail\n                    });\n                    delete this.tasks[threadResponse.id];\n                    // Mark the job as finished\n                    this.runningJobs.delete(threadResponse.id);\n                });\n            // Run the jobs\n            Promise.allSettled(jobs.map((job)=>job())).then((results)=>{\n                // Show reason of rejection\n                results.forEach((result, index)=>{\n                    if (result.status === \"rejected\") {\n                        logger.error(`Job ${index} failed: ${result.reason}`);\n                    }\n                });\n            });\n        }, this.intervalTime);\n    }\n    addTask(threadResponse) {\n        this.tasks[threadResponse.id] = threadResponse;\n    }\n    getTasks() {\n        return this.tasks;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9iYWNrZ3JvdW5kcy90ZXh0QmFzZWRBbnN3ZXJCYWNrZ3JvdW5kVHJhY2tlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBSzJCO0FBUU47QUFDcUI7QUFFMUMsTUFBTUksU0FBU0Qsd0RBQVNBLENBQUM7QUFDekJDLE9BQU9DLEtBQUssR0FBRztBQUVSLE1BQU1DO0lBV1hDLFlBQVksRUFDVkMsYUFBYSxFQUNiQyx3QkFBd0IsRUFDeEJDLGNBQWMsRUFDZEMsYUFBYSxFQUNiQyxZQUFZLEVBT2IsQ0FBRTtRQXRCSCxvREFBb0Q7YUFDNUNDLFFBQXdDLENBQUM7YUFPekNDLGNBQWMsSUFBSUM7UUFleEIsSUFBSSxDQUFDUCxhQUFhLEdBQUdBO1FBQ3JCLElBQUksQ0FBQ0Msd0JBQXdCLEdBQUdBO1FBQ2hDLElBQUksQ0FBQ0MsY0FBYyxHQUFHQTtRQUN0QixJQUFJLENBQUNDLGFBQWEsR0FBR0E7UUFDckIsSUFBSSxDQUFDQyxZQUFZLEdBQUdBO1FBQ3BCLElBQUksQ0FBQ0ksWUFBWSxHQUFHO1FBQ3BCLElBQUksQ0FBQ0MsS0FBSztJQUNaO0lBRVFBLFFBQVE7UUFDZEMsWUFBWTtZQUNWLE1BQU1DLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLENBQUNSLEtBQUssRUFBRVMsR0FBRyxDQUN4QyxDQUFDQyxpQkFBbUI7b0JBQ2xCLElBQ0UsSUFBSSxDQUFDVCxXQUFXLENBQUNVLEdBQUcsQ0FBQ0QsZUFBZUUsRUFBRSxLQUN0QyxDQUFDRixlQUFlRyxZQUFZLEVBQzVCO3dCQUNBO29CQUNGO29CQUNBLElBQUksQ0FBQ1osV0FBVyxDQUFDYSxHQUFHLENBQUNKLGVBQWVFLEVBQUU7b0JBRXRDLHFDQUFxQztvQkFDckMsTUFBTSxJQUFJLENBQUNoQix3QkFBd0IsQ0FBQ21CLFNBQVMsQ0FBQ0wsZUFBZUUsRUFBRSxFQUFFO3dCQUMvREMsY0FBYzs0QkFDWixHQUFHSCxlQUFlRyxZQUFZOzRCQUM5QkcsUUFBUTNCLGlFQUEwQkEsQ0FBQzRCLGFBQWE7d0JBQ2xEO29CQUNGO29CQUVBLGVBQWU7b0JBQ2YsTUFBTUMsVUFBVSxNQUFNLElBQUksQ0FBQ3JCLGNBQWMsQ0FBQ3NCLGlCQUFpQjtvQkFDM0QsTUFBTUMsYUFBYSxNQUFNLElBQUksQ0FBQ3RCLGFBQWEsQ0FBQ3VCLGlCQUFpQixDQUMzREgsUUFBUU4sRUFBRTtvQkFFWixNQUFNVSxNQUFNRixXQUFXRyxRQUFRO29CQUMvQixNQUFNQyxPQUFRLE1BQU0sSUFBSSxDQUFDekIsWUFBWSxDQUFDMEIsT0FBTyxDQUFDZixlQUFlZ0IsR0FBRyxFQUFFO3dCQUNoRVI7d0JBQ0FLLFVBQVVEO3dCQUNWSyxjQUFjO3dCQUNkQyxPQUFPO29CQUNUO29CQUVBLHFCQUFxQjtvQkFDckIsTUFBTUMsV0FBVyxNQUFNLElBQUksQ0FBQ2xDLGFBQWEsQ0FBQ21DLHFCQUFxQixDQUFDO3dCQUM5REMsT0FBT3JCLGVBQWVzQixRQUFRO3dCQUM5Qk4sS0FBS2hCLGVBQWVnQixHQUFHO3dCQUN2Qk8sU0FBU1Q7d0JBQ1RVLFVBQVV4QixlQUFld0IsUUFBUSxDQUFDQyxRQUFRO3dCQUMxQ0MsZ0JBQWdCOzRCQUNkQyxVQUFVbEQsMkRBQWMsQ0FBQytCLFFBQVFtQixRQUFRLENBQUMsSUFBSWxELDJEQUFjQSxDQUFDbUQsRUFBRTt3QkFDakU7b0JBQ0Y7b0JBRUEscUNBQXFDO29CQUNyQyxNQUFNLElBQUksQ0FBQzFDLHdCQUF3QixDQUFDbUIsU0FBUyxDQUFDTCxlQUFlRSxFQUFFLEVBQUU7d0JBQy9EQyxjQUFjOzRCQUNaLEdBQUdILGVBQWVHLFlBQVk7NEJBQzlCRyxRQUFRM0IsaUVBQTBCQSxDQUFDa0QsYUFBYTt3QkFDbEQ7b0JBQ0Y7b0JBRUEsdUNBQXVDO29CQUN2QyxJQUFJQztvQkFDSixHQUFHO3dCQUNEQSxTQUFTLE1BQU0sSUFBSSxDQUFDN0MsYUFBYSxDQUFDOEMsd0JBQXdCLENBQ3hEWixTQUFTYSxPQUFPO3dCQUVsQixJQUFJRixPQUFPeEIsTUFBTSxLQUFLNUIsa0VBQXFCQSxDQUFDbUQsYUFBYSxFQUFFOzRCQUN6RCxNQUFNLElBQUlJLFFBQVEsQ0FBQ0MsVUFBWUMsV0FBV0QsU0FBUzt3QkFDckQ7b0JBQ0YsUUFBU0osT0FBT3hCLE1BQU0sS0FBSzVCLGtFQUFxQkEsQ0FBQ21ELGFBQWEsRUFBRTtvQkFFaEUsNkJBQTZCO29CQUM3QixNQUFNTyxzQkFBc0I7d0JBQzFCSixTQUFTYixTQUFTYSxPQUFPO3dCQUN6QjFCLFFBQ0V3QixPQUFPeEIsTUFBTSxLQUFLNUIsa0VBQXFCQSxDQUFDMkQsU0FBUyxHQUM3QzFELGlFQUEwQkEsQ0FBQzJELFNBQVMsR0FDcEMzRCxpRUFBMEJBLENBQUM0RCxNQUFNO3dCQUN2Q0Msa0JBQWtCVixPQUFPVSxnQkFBZ0I7d0JBQ3pDQyxPQUFPWCxPQUFPVyxLQUFLO29CQUNyQjtvQkFDQSxNQUFNLElBQUksQ0FBQ3ZELHdCQUF3QixDQUFDbUIsU0FBUyxDQUFDTCxlQUFlRSxFQUFFLEVBQUU7d0JBQy9EQyxjQUFjaUM7b0JBQ2hCO29CQUVBLE9BQU8sSUFBSSxDQUFDOUMsS0FBSyxDQUFDVSxlQUFlRSxFQUFFLENBQUM7b0JBRXBDLDJCQUEyQjtvQkFDM0IsSUFBSSxDQUFDWCxXQUFXLENBQUNtRCxNQUFNLENBQUMxQyxlQUFlRSxFQUFFO2dCQUMzQztZQUdGLGVBQWU7WUFDZitCLFFBQVFVLFVBQVUsQ0FBQy9DLEtBQUtHLEdBQUcsQ0FBQyxDQUFDNkMsTUFBUUEsUUFBUUMsSUFBSSxDQUFDLENBQUNDO2dCQUNqRCwyQkFBMkI7Z0JBQzNCQSxRQUFRQyxPQUFPLENBQUMsQ0FBQ2pCLFFBQVFrQjtvQkFDdkIsSUFBSWxCLE9BQU94QixNQUFNLEtBQUssWUFBWTt3QkFDaEN6QixPQUFPNEQsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFTyxNQUFNLFNBQVMsRUFBRWxCLE9BQU9tQixNQUFNLENBQUMsQ0FBQztvQkFDdEQ7Z0JBQ0Y7WUFDRjtRQUNGLEdBQUcsSUFBSSxDQUFDeEQsWUFBWTtJQUN0QjtJQUVPeUQsUUFBUWxELGNBQThCLEVBQUU7UUFDN0MsSUFBSSxDQUFDVixLQUFLLENBQUNVLGVBQWVFLEVBQUUsQ0FBQyxHQUFHRjtJQUNsQztJQUVPbUQsV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQzdELEtBQUs7SUFDbkI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9iYWNrZ3JvdW5kcy90ZXh0QmFzZWRBbnN3ZXJCYWNrZ3JvdW5kVHJhY2tlci50cz8zNmFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElXcmVuQUlBZGFwdG9yIH0gZnJvbSAnLi4vYWRhcHRvcnMnO1xuaW1wb3J0IHtcbiAgV3JlbkFJTGFuZ3VhZ2UsXG4gIFRleHRCYXNlZEFuc3dlclJlc3VsdCxcbiAgVGV4dEJhc2VkQW5zd2VyU3RhdHVzLFxufSBmcm9tICcuLi9tb2RlbHMvYWRhcHRvcic7XG5pbXBvcnQgeyBUaHJlYWRSZXNwb25zZSwgSVRocmVhZFJlc3BvbnNlUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcmllcyc7XG5pbXBvcnQge1xuICBJUHJvamVjdFNlcnZpY2UsXG4gIElEZXBsb3lTZXJ2aWNlLFxuICBJUXVlcnlTZXJ2aWNlLFxuICBUaHJlYWRSZXNwb25zZUFuc3dlclN0YXR1cyxcbiAgUHJldmlld0RhdGFSZXNwb25zZSxcbn0gZnJvbSAnLi4vc2VydmljZXMnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnQHNlcnZlci91dGlscyc7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignVGV4dEJhc2VkQW5zd2VyQmFja2dyb3VuZFRyYWNrZXInKTtcbmxvZ2dlci5sZXZlbCA9ICdkZWJ1Zyc7XG5cbmV4cG9ydCBjbGFzcyBUZXh0QmFzZWRBbnN3ZXJCYWNrZ3JvdW5kVHJhY2tlciB7XG4gIC8vIHRhc2tzIGlzIGEga3YgcGFpciBvZiB0YXNrIGlkIGFuZCB0aHJlYWQgcmVzcG9uc2VcbiAgcHJpdmF0ZSB0YXNrczogUmVjb3JkPG51bWJlciwgVGhyZWFkUmVzcG9uc2U+ID0ge307XG4gIHByaXZhdGUgaW50ZXJ2YWxUaW1lOiBudW1iZXI7XG4gIHByaXZhdGUgd3JlbkFJQWRhcHRvcjogSVdyZW5BSUFkYXB0b3I7XG4gIHByaXZhdGUgdGhyZWFkUmVzcG9uc2VSZXBvc2l0b3J5OiBJVGhyZWFkUmVzcG9uc2VSZXBvc2l0b3J5O1xuICBwcml2YXRlIHByb2plY3RTZXJ2aWNlOiBJUHJvamVjdFNlcnZpY2U7XG4gIHByaXZhdGUgZGVwbG95U2VydmljZTogSURlcGxveVNlcnZpY2U7XG4gIHByaXZhdGUgcXVlcnlTZXJ2aWNlOiBJUXVlcnlTZXJ2aWNlO1xuICBwcml2YXRlIHJ1bm5pbmdKb2JzID0gbmV3IFNldCgpO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICB3cmVuQUlBZGFwdG9yLFxuICAgIHRocmVhZFJlc3BvbnNlUmVwb3NpdG9yeSxcbiAgICBwcm9qZWN0U2VydmljZSxcbiAgICBkZXBsb3lTZXJ2aWNlLFxuICAgIHF1ZXJ5U2VydmljZSxcbiAgfToge1xuICAgIHdyZW5BSUFkYXB0b3I6IElXcmVuQUlBZGFwdG9yO1xuICAgIHRocmVhZFJlc3BvbnNlUmVwb3NpdG9yeTogSVRocmVhZFJlc3BvbnNlUmVwb3NpdG9yeTtcbiAgICBwcm9qZWN0U2VydmljZTogSVByb2plY3RTZXJ2aWNlO1xuICAgIGRlcGxveVNlcnZpY2U6IElEZXBsb3lTZXJ2aWNlO1xuICAgIHF1ZXJ5U2VydmljZTogSVF1ZXJ5U2VydmljZTtcbiAgfSkge1xuICAgIHRoaXMud3JlbkFJQWRhcHRvciA9IHdyZW5BSUFkYXB0b3I7XG4gICAgdGhpcy50aHJlYWRSZXNwb25zZVJlcG9zaXRvcnkgPSB0aHJlYWRSZXNwb25zZVJlcG9zaXRvcnk7XG4gICAgdGhpcy5wcm9qZWN0U2VydmljZSA9IHByb2plY3RTZXJ2aWNlO1xuICAgIHRoaXMuZGVwbG95U2VydmljZSA9IGRlcGxveVNlcnZpY2U7XG4gICAgdGhpcy5xdWVyeVNlcnZpY2UgPSBxdWVyeVNlcnZpY2U7XG4gICAgdGhpcy5pbnRlcnZhbFRpbWUgPSAxMDAwO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnQoKSB7XG4gICAgc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgam9icyA9IE9iamVjdC52YWx1ZXModGhpcy50YXNrcykubWFwKFxuICAgICAgICAodGhyZWFkUmVzcG9uc2UpID0+IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmdKb2JzLmhhcyh0aHJlYWRSZXNwb25zZS5pZCkgfHxcbiAgICAgICAgICAgICF0aHJlYWRSZXNwb25zZS5hbnN3ZXJEZXRhaWxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ydW5uaW5nSm9icy5hZGQodGhyZWFkUmVzcG9uc2UuaWQpO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0dXMgdG8gZmV0Y2hpbmcgZGF0YVxuICAgICAgICAgIGF3YWl0IHRoaXMudGhyZWFkUmVzcG9uc2VSZXBvc2l0b3J5LnVwZGF0ZU9uZSh0aHJlYWRSZXNwb25zZS5pZCwge1xuICAgICAgICAgICAgYW5zd2VyRGV0YWlsOiB7XG4gICAgICAgICAgICAgIC4uLnRocmVhZFJlc3BvbnNlLmFuc3dlckRldGFpbCxcbiAgICAgICAgICAgICAgc3RhdHVzOiBUaHJlYWRSZXNwb25zZUFuc3dlclN0YXR1cy5GRVRDSElOR19EQVRBLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIGdldCBzcWwgZGF0YVxuICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCB0aGlzLnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgICAgICAgY29uc3QgZGVwbG95bWVudCA9IGF3YWl0IHRoaXMuZGVwbG95U2VydmljZS5nZXRMYXN0RGVwbG95bWVudChcbiAgICAgICAgICAgIHByb2plY3QuaWQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBtZGwgPSBkZXBsb3ltZW50Lm1hbmlmZXN0O1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSAoYXdhaXQgdGhpcy5xdWVyeVNlcnZpY2UucHJldmlldyh0aHJlYWRSZXNwb25zZS5zcWwsIHtcbiAgICAgICAgICAgIHByb2plY3QsXG4gICAgICAgICAgICBtYW5pZmVzdDogbWRsLFxuICAgICAgICAgICAgbW9kZWxpbmdPbmx5OiBmYWxzZSxcbiAgICAgICAgICAgIGxpbWl0OiA1MDAsXG4gICAgICAgICAgfSkpIGFzIFByZXZpZXdEYXRhUmVzcG9uc2U7XG5cbiAgICAgICAgICAvLyByZXF1ZXN0IEFJIHNlcnZpY2VcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMud3JlbkFJQWRhcHRvci5jcmVhdGVUZXh0QmFzZWRBbnN3ZXIoe1xuICAgICAgICAgICAgcXVlcnk6IHRocmVhZFJlc3BvbnNlLnF1ZXN0aW9uLFxuICAgICAgICAgICAgc3FsOiB0aHJlYWRSZXNwb25zZS5zcWwsXG4gICAgICAgICAgICBzcWxEYXRhOiBkYXRhLFxuICAgICAgICAgICAgdGhyZWFkSWQ6IHRocmVhZFJlc3BvbnNlLnRocmVhZElkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBjb25maWd1cmF0aW9uczoge1xuICAgICAgICAgICAgICBsYW5ndWFnZTogV3JlbkFJTGFuZ3VhZ2VbcHJvamVjdC5sYW5ndWFnZV0gfHwgV3JlbkFJTGFuZ3VhZ2UuRU4sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0dXMgdG8gcHJlcHJvY2Vzc2luZ1xuICAgICAgICAgIGF3YWl0IHRoaXMudGhyZWFkUmVzcG9uc2VSZXBvc2l0b3J5LnVwZGF0ZU9uZSh0aHJlYWRSZXNwb25zZS5pZCwge1xuICAgICAgICAgICAgYW5zd2VyRGV0YWlsOiB7XG4gICAgICAgICAgICAgIC4uLnRocmVhZFJlc3BvbnNlLmFuc3dlckRldGFpbCxcbiAgICAgICAgICAgICAgc3RhdHVzOiBUaHJlYWRSZXNwb25zZUFuc3dlclN0YXR1cy5QUkVQUk9DRVNTSU5HLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIHBvbGxpbmcgcXVlcnkgaWQgdG8gY2hlY2sgdGhlIHN0YXR1c1xuICAgICAgICAgIGxldCByZXN1bHQ6IFRleHRCYXNlZEFuc3dlclJlc3VsdDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLndyZW5BSUFkYXB0b3IuZ2V0VGV4dEJhc2VkQW5zd2VyUmVzdWx0KFxuICAgICAgICAgICAgICByZXNwb25zZS5xdWVyeUlkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBUZXh0QmFzZWRBbnN3ZXJTdGF0dXMuUFJFUFJPQ0VTU0lORykge1xuICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlIChyZXN1bHQuc3RhdHVzID09PSBUZXh0QmFzZWRBbnN3ZXJTdGF0dXMuUFJFUFJPQ0VTU0lORyk7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgdGhlIHN0YXR1cyB0byBmaW5hbFxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRBbnN3ZXJEZXRhaWwgPSB7XG4gICAgICAgICAgICBxdWVyeUlkOiByZXNwb25zZS5xdWVyeUlkLFxuICAgICAgICAgICAgc3RhdHVzOlxuICAgICAgICAgICAgICByZXN1bHQuc3RhdHVzID09PSBUZXh0QmFzZWRBbnN3ZXJTdGF0dXMuU1VDQ0VFREVEXG4gICAgICAgICAgICAgICAgPyBUaHJlYWRSZXNwb25zZUFuc3dlclN0YXR1cy5TVFJFQU1JTkdcbiAgICAgICAgICAgICAgICA6IFRocmVhZFJlc3BvbnNlQW5zd2VyU3RhdHVzLkZBSUxFRCxcbiAgICAgICAgICAgIG51bVJvd3NVc2VkSW5MTE06IHJlc3VsdC5udW1Sb3dzVXNlZEluTExNLFxuICAgICAgICAgICAgZXJyb3I6IHJlc3VsdC5lcnJvcixcbiAgICAgICAgICB9O1xuICAgICAgICAgIGF3YWl0IHRoaXMudGhyZWFkUmVzcG9uc2VSZXBvc2l0b3J5LnVwZGF0ZU9uZSh0aHJlYWRSZXNwb25zZS5pZCwge1xuICAgICAgICAgICAgYW5zd2VyRGV0YWlsOiB1cGRhdGVkQW5zd2VyRGV0YWlsLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZGVsZXRlIHRoaXMudGFza3NbdGhyZWFkUmVzcG9uc2UuaWRdO1xuXG4gICAgICAgICAgLy8gTWFyayB0aGUgam9iIGFzIGZpbmlzaGVkXG4gICAgICAgICAgdGhpcy5ydW5uaW5nSm9icy5kZWxldGUodGhyZWFkUmVzcG9uc2UuaWQpO1xuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgLy8gUnVuIHRoZSBqb2JzXG4gICAgICBQcm9taXNlLmFsbFNldHRsZWQoam9icy5tYXAoKGpvYikgPT4gam9iKCkpKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgIC8vIFNob3cgcmVhc29uIG9mIHJlamVjdGlvblxuICAgICAgICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gJ3JlamVjdGVkJykge1xuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBKb2IgJHtpbmRleH0gZmFpbGVkOiAke3Jlc3VsdC5yZWFzb259YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sIHRoaXMuaW50ZXJ2YWxUaW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRUYXNrKHRocmVhZFJlc3BvbnNlOiBUaHJlYWRSZXNwb25zZSkge1xuICAgIHRoaXMudGFza3NbdGhyZWFkUmVzcG9uc2UuaWRdID0gdGhyZWFkUmVzcG9uc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0VGFza3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3M7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJXcmVuQUlMYW5ndWFnZSIsIlRleHRCYXNlZEFuc3dlclN0YXR1cyIsIlRocmVhZFJlc3BvbnNlQW5zd2VyU3RhdHVzIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwibGV2ZWwiLCJUZXh0QmFzZWRBbnN3ZXJCYWNrZ3JvdW5kVHJhY2tlciIsImNvbnN0cnVjdG9yIiwid3JlbkFJQWRhcHRvciIsInRocmVhZFJlc3BvbnNlUmVwb3NpdG9yeSIsInByb2plY3RTZXJ2aWNlIiwiZGVwbG95U2VydmljZSIsInF1ZXJ5U2VydmljZSIsInRhc2tzIiwicnVubmluZ0pvYnMiLCJTZXQiLCJpbnRlcnZhbFRpbWUiLCJzdGFydCIsInNldEludGVydmFsIiwiam9icyIsIk9iamVjdCIsInZhbHVlcyIsIm1hcCIsInRocmVhZFJlc3BvbnNlIiwiaGFzIiwiaWQiLCJhbnN3ZXJEZXRhaWwiLCJhZGQiLCJ1cGRhdGVPbmUiLCJzdGF0dXMiLCJGRVRDSElOR19EQVRBIiwicHJvamVjdCIsImdldEN1cnJlbnRQcm9qZWN0IiwiZGVwbG95bWVudCIsImdldExhc3REZXBsb3ltZW50IiwibWRsIiwibWFuaWZlc3QiLCJkYXRhIiwicHJldmlldyIsInNxbCIsIm1vZGVsaW5nT25seSIsImxpbWl0IiwicmVzcG9uc2UiLCJjcmVhdGVUZXh0QmFzZWRBbnN3ZXIiLCJxdWVyeSIsInF1ZXN0aW9uIiwic3FsRGF0YSIsInRocmVhZElkIiwidG9TdHJpbmciLCJjb25maWd1cmF0aW9ucyIsImxhbmd1YWdlIiwiRU4iLCJQUkVQUk9DRVNTSU5HIiwicmVzdWx0IiwiZ2V0VGV4dEJhc2VkQW5zd2VyUmVzdWx0IiwicXVlcnlJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsInVwZGF0ZWRBbnN3ZXJEZXRhaWwiLCJTVUNDRUVERUQiLCJTVFJFQU1JTkciLCJGQUlMRUQiLCJudW1Sb3dzVXNlZEluTExNIiwiZXJyb3IiLCJkZWxldGUiLCJhbGxTZXR0bGVkIiwiam9iIiwidGhlbiIsInJlc3VsdHMiLCJmb3JFYWNoIiwiaW5kZXgiLCJyZWFzb24iLCJhZGRUYXNrIiwiZ2V0VGFza3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/backgrounds/textBasedAnswerBackgroundTracker.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/config.ts":
/*!*************************************!*\
  !*** ./src/apollo/server/config.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getConfig: () => (/* binding */ getConfig)\n/* harmony export */ });\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/pickBy */ \"lodash/pickBy\");\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_pickBy__WEBPACK_IMPORTED_MODULE_0__);\n\nconst defaultConfig = {\n    // wren ui\n    otherServiceUsingDocker: false,\n    // database\n    dbType: \"sqlite\",\n    // pg\n    pgUrl: \"postgres://postgres:postgres@localhost:5432/admin_ui\",\n    debug: false,\n    // sqlite\n    sqliteFile: \"./db.sqlite3\",\n    persistCredentialDir: `${process.cwd()}/.tmp`,\n    // wren engine\n    wrenEngineEndpoint: \"http://localhost:8080\",\n    // wren AI\n    wrenAIEndpoint: \"http://localhost:5555\",\n    // ibis server\n    experimentalEngineRustVersion: false,\n    ibisServerEndpoint: \"http://127.0.0.1:8000\",\n    // encryption\n    encryptionPassword: \"sementic\",\n    encryptionSalt: \"layer\"\n};\nconst config = {\n    // node\n    otherServiceUsingDocker: process.env.OTHER_SERVICE_USING_DOCKER === \"true\",\n    // database\n    dbType: process.env.DB_TYPE,\n    // pg\n    pgUrl: process.env.PG_URL,\n    debug: process.env.DEBUG === \"true\",\n    // sqlite\n    sqliteFile: process.env.SQLITE_FILE,\n    persistCredentialDir: (()=>{\n        if (process.env.PERSIST_CREDENTIAL_DIR && process.env.PERSIST_CREDENTIAL_DIR.length > 0) {\n            return process.env.PERSIST_CREDENTIAL_DIR;\n        }\n        return undefined;\n    })(),\n    // wren engine\n    wrenEngineEndpoint: process.env.WREN_ENGINE_ENDPOINT,\n    // wren AI\n    wrenAIEndpoint: process.env.WREN_AI_ENDPOINT,\n    generationModel: process.env.GENERATION_MODEL,\n    // ibis server\n    experimentalEngineRustVersion: process.env.EXPERIMENTAL_ENGINE_RUST_VERSION === \"true\",\n    ibisServerEndpoint: process.env.IBIS_SERVER_ENDPOINT,\n    // encryption\n    encryptionPassword: process.env.ENCRYPTION_PASSWORD,\n    encryptionSalt: process.env.ENCRYPTION_SALT,\n    // telemetry\n    telemetryEnabled: process.env.TELEMETRY_ENABLED && process.env.TELEMETRY_ENABLED.toLocaleLowerCase() === \"true\",\n    posthogApiKey: process.env.POSTHOG_API_KEY,\n    posthogHost: process.env.POSTHOG_HOST,\n    userUUID: process.env.USER_UUID,\n    // versions\n    wrenUIVersion: process.env.WREN_UI_VERSION,\n    wrenEngineVersion: process.env.WREN_ENGINE_VERSION,\n    wrenAIVersion: process.env.WREN_AI_SERVICE_VERSION,\n    wrenProductVersion: process.env.WREN_PRODUCT_VERSION,\n    // generate recommendation questions max questions\n    projectRecommendationQuestionMaxCategories: process.env.PROJECT_RECOMMENDATION_QUESTION_MAX_CATEGORIES ? parseInt(process.env.PROJECT_RECOMMENDATION_QUESTION_MAX_CATEGORIES) : 3,\n    projectRecommendationQuestionsMaxQuestions: process.env.PROJECT_RECOMMENDATION_QUESTIONS_MAX_QUESTIONS ? parseInt(process.env.PROJECT_RECOMMENDATION_QUESTIONS_MAX_QUESTIONS) : 3,\n    threadRecommendationQuestionMaxCategories: process.env.THREAD_RECOMMENDATION_QUESTION_MAX_CATEGORIES ? parseInt(process.env.THREAD_RECOMMENDATION_QUESTION_MAX_CATEGORIES) : 3,\n    threadRecommendationQuestionsMaxQuestions: process.env.THREAD_RECOMMENDATION_QUESTIONS_MAX_QUESTIONS ? parseInt(process.env.THREAD_RECOMMENDATION_QUESTIONS_MAX_QUESTIONS) : 1\n};\nfunction getConfig() {\n    return {\n        ...defaultConfig,\n        ...lodash_pickBy__WEBPACK_IMPORTED_MODULE_0___default()(config)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/config.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/dataSource.ts":
/*!*****************************************!*\
  !*** ./src/apollo/server/dataSource.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encryptConnectionInfo: () => (/* binding */ encryptConnectionInfo),\n/* harmony export */   toIbisConnectionInfo: () => (/* binding */ toIbisConnectionInfo),\n/* harmony export */   toMultipleIbisConnectionInfos: () => (/* binding */ toMultipleIbisConnectionInfos)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n\n\n\nconst config = (0,_config__WEBPACK_IMPORTED_MODULE_1__.getConfig)();\nconst encryptor = new _utils__WEBPACK_IMPORTED_MODULE_2__.Encryptor(config);\nfunction encryptConnectionInfo(dataSourceType, connectionInfo) {\n    return dataSource[dataSourceType].sensitiveProps.reduce((acc, prop)=>{\n        const value = connectionInfo[prop];\n        if (value) {\n            const encryption = encryptor.encrypt(JSON.parse(JSON.stringify({\n                [prop]: value\n            })));\n            return {\n                ...acc,\n                [prop]: encryption\n            };\n        }\n        return acc;\n    }, connectionInfo);\n}\nfunction toIbisConnectionInfo(dataSourceType, connectionInfo) {\n    return dataSource[dataSourceType].toIbisConnectionInfo(connectionInfo);\n}\nfunction toMultipleIbisConnectionInfos(dataSourceType, connectionInfo) {\n    if (!dataSource[dataSourceType].toMultipleIbisConnectionInfos) {\n        return null;\n    }\n    return dataSource[dataSourceType].toMultipleIbisConnectionInfos(connectionInfo);\n}\nconst dataSource = {\n    // BigQuery\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.BIG_QUERY]: {\n        sensitiveProps: [\n            \"credentials\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const decryptedConnectionInfo = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.BIG_QUERY, connectionInfo);\n            const { projectId, datasetId, credentials } = decryptedConnectionInfo;\n            const base64Credentials = Buffer.from(JSON.stringify(credentials)).toString(\"base64\");\n            const res = {\n                project_id: projectId,\n                dataset_id: datasetId,\n                credentials: base64Credentials\n            };\n            return res;\n        }\n    },\n    // Postgres\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.POSTGRES]: {\n        sensitiveProps: [\n            \"password\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const decryptedConnectionInfo = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.POSTGRES, connectionInfo);\n            const { host, port, database, user, password, ssl } = decryptedConnectionInfo;\n            let connectionUrl = `postgresql://${user}:${password}@${host}:${port}/${database}?`;\n            if (ssl) {\n                connectionUrl += \"sslmode=require\";\n            }\n            return {\n                connectionUrl\n            };\n        }\n    },\n    // mysql\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.MYSQL]: {\n        sensitiveProps: [\n            \"password\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const decryptedConnectionInfo = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.MYSQL, connectionInfo);\n            const { host, port, database, user, password } = decryptedConnectionInfo;\n            return {\n                host,\n                port,\n                database,\n                user,\n                password\n            };\n        }\n    },\n    // SQL Server\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.MSSQL]: {\n        sensitiveProps: [\n            \"password\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const decryptedConnectionInfo = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.MSSQL, connectionInfo);\n            const { host, port, database, user, password, trustServerCertificate } = decryptedConnectionInfo;\n            return {\n                host,\n                port,\n                database,\n                user,\n                password,\n                ...trustServerCertificate && {\n                    kwargs: {\n                        trustServerCertificate: \"YES\"\n                    }\n                }\n            };\n        }\n    },\n    // Click House\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.CLICK_HOUSE]: {\n        sensitiveProps: [\n            \"password\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const decryptedConnectionInfo = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.CLICK_HOUSE, connectionInfo);\n            const { host, port, database, user, password, ssl } = decryptedConnectionInfo;\n            let connectionUrl = `clickhouse://${user}:${password}@${host}:${port}/${database}?`;\n            if (ssl) {\n                connectionUrl += \"secure=1\";\n            }\n            return {\n                connectionUrl\n            };\n        }\n    },\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.TRINO]: {\n        sensitiveProps: [\n            \"password\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const { host, password, port, schemas, username, ssl } = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.TRINO, connectionInfo);\n            // pick first schema from schemas\n            const [catalog, schema] = schemas.split(\",\")?.[0]?.split(\".\") ?? [];\n            if (!catalog || !schema) {\n                throw new Error(\"Invalid schema format, expected catalog.schema\");\n            }\n            return {\n                host: ssl ? `https://${host}` : `http://${host}`,\n                port,\n                catalog,\n                schema,\n                user: username,\n                password\n            };\n        },\n        toMultipleIbisConnectionInfos (connectionInfo) {\n            const { host, port, schemas, username, password, ssl } = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.TRINO, connectionInfo);\n            // Helper function to parse and validate schema\n            const parseSchema = (schemaStr)=>{\n                const trimmed = schemaStr.trim();\n                const [catalog, schema] = trimmed.split(\".\");\n                if (!catalog || !schema) {\n                    throw new Error(`Invalid schema format: \"${trimmed}\". Expected format: catalog.schema`);\n                }\n                return {\n                    catalog,\n                    schema\n                };\n            };\n            // schemas format will be `catalog.schema, catalog.schema, ...`\n            const schemasArray = schemas.split(\",\").filter(Boolean);\n            if (schemasArray.length === 0) {\n                throw new Error(\"No valid schemas provided. Expected format: catalog.schema[, catalog.schema, ...]\");\n            }\n            return schemasArray.map((schema)=>{\n                const { catalog, schema: schemaName } = parseSchema(schema);\n                return {\n                    host: ssl ? `https://${host}` : `http://${host}`,\n                    port,\n                    catalog,\n                    schema: schemaName,\n                    user: username,\n                    password\n                };\n            });\n        }\n    },\n    // Snowflake\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.SNOWFLAKE]: {\n        sensitiveProps: [\n            \"password\"\n        ],\n        toIbisConnectionInfo (connectionInfo) {\n            const decryptedConnectionInfo = decryptConnectionInfo(_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.SNOWFLAKE, connectionInfo);\n            const { user, password, account, database, schema } = decryptedConnectionInfo;\n            return {\n                user,\n                password,\n                account,\n                database,\n                schema\n            };\n        }\n    },\n    // DuckDB\n    [_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB]: {\n        sensitiveProps: [],\n        toIbisConnectionInfo (_connectionInfo) {\n            throw new Error(\"Not implemented\");\n        }\n    }\n};\nfunction decryptConnectionInfo(dataSourceType, connectionInfo) {\n    return dataSource[dataSourceType].sensitiveProps.reduce((acc, prop)=>{\n        const value = connectionInfo[prop];\n        if (value) {\n            const decryption = encryptor.decrypt(value);\n            const decryptedValue = JSON.parse(decryption)[prop];\n            return {\n                ...acc,\n                [prop]: decryptedValue\n            };\n        }\n        return acc;\n    }, connectionInfo);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/dataSource.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/data/index.ts":
/*!*****************************************!*\
  !*** ./src/apollo/server/data/index.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _sample__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sample */ \"(api)/./src/apollo/server/data/sample.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _sample__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _sample__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type */ \"(api)/./src/apollo/server/data/type.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _type__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _type__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9kYXRhL2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF5QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL2RhdGEvaW5kZXgudHM/ZTYzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL3NhbXBsZSc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGUnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/data/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/data/sample.ts":
/*!******************************************!*\
  !*** ./src/apollo/server/data/sample.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildInitSql: () => (/* binding */ buildInitSql),\n/* harmony export */   getRelations: () => (/* binding */ getRelations),\n/* harmony export */   getSampleAskQuestions: () => (/* binding */ getSampleAskQuestions),\n/* harmony export */   sampleDatasets: () => (/* binding */ sampleDatasets)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type */ \"(api)/./src/apollo/server/data/type.ts\");\n\n\nconst sampleDatasets = {\n    hr: {\n        name: _type__WEBPACK_IMPORTED_MODULE_1__.SampleDatasetName.HR,\n        tables: [\n            {\n                tableName: \"salaries\",\n                filePath: \"https://assets.getwren.ai/sample_data/employees/salaries.parquet\",\n                schema: [\n                    {\n                        columnName: \"emp_no\",\n                        dataType: \"INTEGER\"\n                    },\n                    {\n                        columnName: \"salary\",\n                        dataType: \"INTEGER\"\n                    },\n                    {\n                        columnName: \"from_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"to_date\",\n                        dataType: \"DATE\"\n                    }\n                ],\n                columns: [\n                    {\n                        name: \"emp_no\",\n                        properties: {\n                            description: \"The employee number\",\n                            displayName: \"emp_no\"\n                        }\n                    },\n                    {\n                        name: \"salary\",\n                        properties: {\n                            description: \"The salary of the employee.\",\n                            displayName: \"salary\"\n                        }\n                    },\n                    {\n                        name: \"from_date\",\n                        properties: {\n                            description: \"The start date of the salary period.\",\n                            displayName: \"from_date\"\n                        }\n                    },\n                    {\n                        name: \"to_date\",\n                        properties: {\n                            description: \"The end date of the salary period.\",\n                            displayName: \"to_date\"\n                        }\n                    }\n                ],\n                properties: {\n                    description: \"Tracks the salary of employees, including the period during which each salary was valid.\",\n                    displayName: \"salaries\"\n                }\n            },\n            {\n                tableName: \"titles\",\n                filePath: \"https://assets.getwren.ai/sample_data/employees/titles.parquet\",\n                schema: [\n                    {\n                        columnName: \"emp_no\",\n                        dataType: \"INTEGER\"\n                    },\n                    {\n                        columnName: \"title\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"from_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"to_date\",\n                        dataType: \"DATE\"\n                    }\n                ],\n                columns: [\n                    {\n                        name: \"emp_no\",\n                        properties: {\n                            description: \"The employee number\",\n                            displayName: \"emp_no\"\n                        }\n                    },\n                    {\n                        name: \"title\",\n                        properties: {\n                            description: \"The title or position held by the employee. Limited to a maximum of 50 characters.\",\n                            displayName: \"title\"\n                        }\n                    },\n                    {\n                        name: \"from_date\",\n                        properties: {\n                            description: \"The start date when the employee held this title\",\n                            displayName: \"from_date\"\n                        }\n                    },\n                    {\n                        name: \"to_date\",\n                        properties: {\n                            description: \"The end date when the employee held this title. This can be NULL if the employee currently holds the title.\",\n                            displayName: \"to_date\"\n                        }\n                    }\n                ],\n                properties: {\n                    description: \"Tracks the titles (positions) held by employees, including the period during which they held each title.\",\n                    displayName: \"titles\"\n                }\n            },\n            {\n                tableName: \"dept_emp\",\n                filePath: \"https://assets.getwren.ai/sample_data/employees/dept_emp.parquet\",\n                schema: [\n                    {\n                        columnName: \"emp_no\",\n                        dataType: \"INTEGER\"\n                    },\n                    {\n                        columnName: \"dept_no\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"from_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"to_date\",\n                        dataType: \"DATE\"\n                    }\n                ],\n                columns: [\n                    {\n                        name: \"emp_no\",\n                        properties: {\n                            description: \"The employee number.\",\n                            displayName: \"emp_no\"\n                        }\n                    },\n                    {\n                        name: \"dept_no\",\n                        properties: {\n                            description: \"The department number the employee is associated with, referencing the dept_no in the departments table.\",\n                            displayName: \"dept_no\"\n                        }\n                    },\n                    {\n                        name: \"from_date\",\n                        properties: {\n                            description: \"The start date of the employee's association with the department.\",\n                            displayName: \"from_date\"\n                        }\n                    },\n                    {\n                        name: \"to_date\",\n                        properties: {\n                            description: \"The end date of the employee's association with the department\",\n                            displayName: \"to_date\"\n                        }\n                    }\n                ],\n                properties: {\n                    displayName: \"dept_emp\"\n                }\n            },\n            {\n                tableName: \"departments\",\n                filePath: \"https://assets.getwren.ai/sample_data/employees/departments.parquet\",\n                schema: [\n                    {\n                        columnName: \"dept_name\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"dept_no\",\n                        dataType: \"VARCHAR\"\n                    }\n                ],\n                columns: [\n                    {\n                        name: \"dept_name\",\n                        properties: {\n                            description: \"The name of the department. Limited to a maximum of 40 characters. This column is also unique across the table, ensuring no two departments share the same name\",\n                            displayName: \"dept_name\"\n                        }\n                    },\n                    {\n                        name: \"dept_no\",\n                        properties: {\n                            description: \"A unique identifier for each department. It serves as the primary key of the table.\",\n                            displayName: \"dept_no\"\n                        }\n                    }\n                ],\n                properties: {\n                    displayName: \"departments\"\n                }\n            },\n            {\n                tableName: \"employees\",\n                filePath: \"https://assets.getwren.ai/sample_data/employees/employees.parquet\",\n                schema: [\n                    {\n                        columnName: \"birth_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"first_name\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"last_name\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"gender\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"hire_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"emp_no\",\n                        dataType: \"INTEGER\"\n                    }\n                ],\n                columns: [\n                    {\n                        name: \"birth_date\",\n                        properties: {\n                            description: \"The birth date of the employee.\",\n                            displayName: \"birth_date\"\n                        }\n                    },\n                    {\n                        name: \"first_name\",\n                        properties: {\n                            description: \"The first name of the employee. Limited to a maximum of 14 characters.\",\n                            displayName: \"first_name\"\n                        }\n                    },\n                    {\n                        name: \"last_name\",\n                        properties: {\n                            description: \"The last name of the employee. Limited to a maximum of 16 characters.\",\n                            displayName: \"last_name\"\n                        }\n                    },\n                    {\n                        name: \"gender\",\n                        properties: {\n                            description: \"The gender of the employee, with possible values 'M' (Male) or 'F' (Female).\",\n                            displayName: \"gender\"\n                        }\n                    },\n                    {\n                        name: \"hire_date\",\n                        properties: {\n                            description: \"The date when the employee was hired.\",\n                            displayName: \"hire_date\"\n                        }\n                    },\n                    {\n                        name: \"emp_no\",\n                        properties: {\n                            description: \"A unique identifier for each employee. It serves as the primary key of the table\",\n                            displayName: \"emp_no\"\n                        }\n                    }\n                ],\n                properties: {\n                    description: \"Stores basic information about employees such as their employee number, name, gender, birth date, and hire date\",\n                    displayName: \"employees\"\n                }\n            },\n            {\n                tableName: \"dept_manager\",\n                filePath: \"https://assets.getwren.ai/sample_data/employees/dept_manager.parquet\",\n                schema: [\n                    {\n                        columnName: \"from_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"to_date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"emp_no\",\n                        dataType: \"INTEGER\"\n                    },\n                    {\n                        columnName: \"dept_no\",\n                        dataType: \"VARCHAR\"\n                    }\n                ],\n                columns: [\n                    {\n                        name: \"from_date\",\n                        properties: {\n                            description: \"The start date of the employee’s managerial role in the department.\",\n                            displayName: \"from_date\"\n                        }\n                    },\n                    {\n                        name: \"to_date\",\n                        properties: {\n                            description: \"The end date of the employee’s managerial role in the department.\",\n                            displayName: \"to_date\"\n                        }\n                    },\n                    {\n                        name: \"emp_no\",\n                        properties: {\n                            description: \"The employee number of the department manager\",\n                            displayName: \"emp_no\"\n                        }\n                    },\n                    {\n                        name: \"dept_no\",\n                        properties: {\n                            description: \"The department number that the manager is assigned to, referencing the dept_no in the departments table.\",\n                            displayName: \"dept_no\"\n                        }\n                    }\n                ],\n                properties: {\n                    description: \"Tracks the assignment of managers to departments, including the period during which they managed a department\",\n                    displayName: \"dept_manager\"\n                }\n            }\n        ],\n        relations: [\n            {\n                fromModelName: \"employees\",\n                fromColumnName: \"emp_no\",\n                toModelName: \"titles\",\n                toColumnName: \"emp_no\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY,\n                description: \"Each entry represents a title held by an employee during a specific time period.\"\n            },\n            {\n                fromModelName: \"departments\",\n                fromColumnName: \"dept_no\",\n                toModelName: \"dept_emp\",\n                toColumnName: \"dept_no\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"employees\",\n                fromColumnName: \"emp_no\",\n                toModelName: \"salaries\",\n                toColumnName: \"emp_no\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"dept_manager\",\n                fromColumnName: \"emp_no\",\n                toModelName: \"employees\",\n                toColumnName: \"emp_no\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.MANY_TO_ONE\n            },\n            {\n                fromModelName: \"dept_emp\",\n                fromColumnName: \"emp_no\",\n                toModelName: \"employees\",\n                toColumnName: \"emp_no\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.MANY_TO_ONE,\n                description: \"meaning an employee can be associated with multiple departments, titles, and salaries over time.\"\n            },\n            {\n                fromModelName: \"departments\",\n                fromColumnName: \"dept_no\",\n                toModelName: \"dept_manager\",\n                toColumnName: \"dept_no\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            }\n        ],\n        questions: [\n            {\n                question: \"What is the average salary for each position?\",\n                label: \"Aggregation\"\n            },\n            {\n                question: \"Compare the average salary of male and female employees in each department.\",\n                label: \"Comparison\"\n            },\n            {\n                question: \"What are the names of the managers and the departments they manage?\",\n                label: \"Associating\"\n            }\n        ]\n    },\n    music: {\n        name: _type__WEBPACK_IMPORTED_MODULE_1__.SampleDatasetName.MUSIC,\n        tables: [\n            {\n                tableName: \"album\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/Album.csv\",\n                schema: [\n                    {\n                        columnName: \"AlbumId\",\n                        dataType: \"INT\"\n                    },\n                    {\n                        columnName: \"Title\",\n                        dataType: \"varchar\"\n                    },\n                    {\n                        columnName: \"ArtistId\",\n                        dataType: \"INT\"\n                    }\n                ]\n            },\n            {\n                tableName: \"artist\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/Artist.csv\",\n                schema: [\n                    {\n                        columnName: \"ArtistId\",\n                        dataType: \"INT\"\n                    },\n                    {\n                        columnName: \"Name\",\n                        dataType: \"varchar\"\n                    }\n                ]\n            },\n            {\n                tableName: \"customer\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/Customer.csv\",\n                schema: [\n                    {\n                        columnName: \"CustomerId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FirstName\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"LastName\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Company\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Address\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"City\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"State\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Country\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"PostalCode\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Phone\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Fax\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Email\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"SupportRepId\",\n                        dataType: \"BIGINT\"\n                    }\n                ]\n            },\n            {\n                tableName: \"genre\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/Genre.csv\",\n                schema: [\n                    {\n                        columnName: \"GenreId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Name\",\n                        dataType: \"VARCHAR\"\n                    }\n                ]\n            },\n            {\n                tableName: \"invoice\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/Invoice.csv\",\n                schema: [\n                    {\n                        columnName: \"InvoiceId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"CustomerId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"InvoiceDate\",\n                        dataType: \"Date\"\n                    },\n                    {\n                        columnName: \"BillingAddress\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"BillingCity\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"BillingState\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"BillingCountry\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"BillingPostalCode\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Total\",\n                        dataType: \"DOUBLE\"\n                    }\n                ]\n            },\n            {\n                tableName: \"invoiceLine\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/InvoiceLine.csv\",\n                schema: [\n                    {\n                        columnName: \"InvoiceLineId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"InvoiceId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TrackId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"UnitPrice\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"Quantity\",\n                        dataType: \"BIGINT\"\n                    }\n                ]\n            },\n            {\n                tableName: \"track\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/Music/Track.csv\",\n                schema: [\n                    {\n                        columnName: \"TrackId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Name\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"AlbumId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"MediaTypeId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"GenreId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Composer\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Milliseconds\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Bytes\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"UnitPrice\",\n                        dataType: \"DOUBLE\"\n                    }\n                ]\n            }\n        ],\n        questions: [\n            {\n                question: \"What are the top 5 selling albums in the US?\",\n                label: \"Ranking\"\n            },\n            {\n                question: \"What is the total revenue generated from each genre?\",\n                label: \"Aggregation\"\n            },\n            {\n                question: \"Which customers have made purchases of tracks from albums in each genre?\",\n                label: \"General\"\n            }\n        ],\n        relations: [\n            {\n                fromModelName: \"album\",\n                fromColumnName: \"ArtistId\",\n                toModelName: \"artist\",\n                toColumnName: \"ArtistId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.MANY_TO_ONE\n            },\n            {\n                fromModelName: \"customer\",\n                fromColumnName: \"CustomerId\",\n                toModelName: \"invoice\",\n                toColumnName: \"CustomerId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"genre\",\n                fromColumnName: \"GenreId\",\n                toModelName: \"track\",\n                toColumnName: \"GenreId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"invoice\",\n                fromColumnName: \"InvoiceId\",\n                toModelName: \"invoiceLine\",\n                toColumnName: \"InvoiceId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"track\",\n                fromColumnName: \"TrackId\",\n                toModelName: \"invoiceLine\",\n                toColumnName: \"TrackId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            // album -> track\n            {\n                fromModelName: \"album\",\n                fromColumnName: \"AlbumId\",\n                toModelName: \"track\",\n                toColumnName: \"AlbumId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            }\n        ]\n    },\n    ecommerce: {\n        name: _type__WEBPACK_IMPORTED_MODULE_1__.SampleDatasetName.ECOMMERCE,\n        tables: [\n            {\n                tableName: \"olist_customers_dataset\",\n                primaryKey: \"customer_id\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_customers_dataset.parquet\",\n                properties: {\n                    displayName: \"customers\"\n                },\n                columns: [\n                    {\n                        name: \"customer_city\",\n                        properties: {\n                            description: \"Name of the city where the customer is located\",\n                            displayName: \"customer_city\"\n                        }\n                    },\n                    {\n                        name: \"customer_id\",\n                        properties: {\n                            description: null,\n                            displayName: \"customer_id\"\n                        }\n                    },\n                    {\n                        name: \"customer_state\",\n                        properties: {\n                            description: \"Name of the state where the customer is located\",\n                            displayName: \"customer_state\"\n                        }\n                    },\n                    {\n                        name: \"customer_unique_id\",\n                        properties: {\n                            description: \"Unique id of the customer\",\n                            displayName: \"customer_unique_id\"\n                        }\n                    },\n                    {\n                        name: \"customer_zip_code_prefix\",\n                        properties: {\n                            description: \"First 5 digits of customer zip code\",\n                            displayName: \"customer_zip_code_prefix\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"customer_city\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"customer_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"customer_state\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"customer_unique_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"customer_zip_code_prefix\",\n                        dataType: \"VARCHAR\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_order_items_dataset\",\n                primaryKey: \"order_item_id\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_order_items_dataset.parquet\",\n                properties: {\n                    displayName: \"order items\",\n                    description: \"This table contains the information related to a specific order containing its shipping cost, products, cost, number of order items, and the seller.\"\n                },\n                columns: [\n                    {\n                        name: \"freight_value\",\n                        properties: {\n                            description: \"Cost of shipping associated with the specific order item\",\n                            displayName: \"freight_value\"\n                        }\n                    },\n                    {\n                        name: \"order_id\",\n                        properties: {\n                            description: \"Unique identifier for the order across the platform\",\n                            displayName: \"order_id\"\n                        }\n                    },\n                    {\n                        name: \"order_item_id\",\n                        properties: {\n                            description: \"Unique identifier for each item within a specific order\",\n                            displayName: \"order_item_id\"\n                        }\n                    },\n                    {\n                        name: \"price\",\n                        properties: {\n                            description: \"Price of the individual item within the order\",\n                            displayName: \"price\"\n                        }\n                    },\n                    {\n                        name: \"product_id\",\n                        properties: {\n                            description: \"Unique identifier for the product sold in the order.\",\n                            displayName: \"product_id\"\n                        }\n                    },\n                    {\n                        name: \"seller_id\",\n                        properties: {\n                            description: \"Unique identifier of the seller who fulfilled the order item.\",\n                            displayName: \"seller_id\"\n                        }\n                    },\n                    {\n                        name: \"shipping_limit_date\",\n                        properties: {\n                            description: \"Deadline for the order item to be shipped by the seller.\",\n                            displayName: \"shipping_limit_date\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"freight_value\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"order_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"order_item_id\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"price\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"product_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"seller_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"shipping_limit_date\",\n                        dataType: \"TIMESTAMP\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_orders_dataset\",\n                primaryKey: \"order_id\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_orders_dataset.parquet\",\n                properties: {\n                    displayName: \"orders\",\n                    description: \"This table contains detailed information about customer orders, including timestamps for various stages of the order process (approval, shipping, delivery), as well as the order status and customer identification. It helps track the lifecycle of an order from purchase to delivery.\"\n                },\n                columns: [\n                    {\n                        name: \"customer_id\",\n                        properties: {\n                            description: \"Unique identifier for the customer who placed the order.\",\n                            displayName: \"customer_id\"\n                        }\n                    },\n                    {\n                        name: \"order_approved_at\",\n                        properties: {\n                            description: \"Date and time when the order was approved for processing.\",\n                            displayName: \"order_approved_at\"\n                        }\n                    },\n                    {\n                        name: \"order_delivered_carrier_date\",\n                        properties: {\n                            description: \"Date when the order was handed over to the carrier or freight forwarder for delivery.\",\n                            displayName: \"order_delivered_carrier_date\"\n                        }\n                    },\n                    {\n                        name: \"order_delivered_customer_date\",\n                        properties: {\n                            description: \"Date when the order was delivered to the customer.\",\n                            displayName: \"order_delivered_customer_date\"\n                        }\n                    },\n                    {\n                        name: \"order_estimated_delivery_date\",\n                        properties: {\n                            description: \"Expected delivery date based on the initial estimate.\",\n                            displayName: \"order_estimated_delivery_date\"\n                        }\n                    },\n                    {\n                        name: \"order_id\",\n                        properties: {\n                            description: \"Unique identifier for the specific order\",\n                            displayName: \"order_id\"\n                        }\n                    },\n                    {\n                        name: \"order_purchase_timestamp\",\n                        properties: {\n                            description: \"Date and time when the order was placed by the customer.\",\n                            displayName: \"order_purchase_timestamp\"\n                        }\n                    },\n                    {\n                        name: \"order_status\",\n                        properties: {\n                            description: \"Current status of the order (e.g., delivered, shipped, canceled).\",\n                            displayName: \"order_status\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"customer_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"order_approved_at\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"order_delivered_carrier_date\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"order_delivered_customer_date\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"order_estimated_delivery_date\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"order_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"order_purchase_timestamp\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"order_status\",\n                        dataType: \"VARCHAR\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_order_payments_dataset\",\n                primaryKey: \"order_id\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_order_payments_dataset.parquet\",\n                properties: {\n                    displayName: \"order payments\",\n                    description: \"This table contains information about payment details for each order, including payment methods, amounts, installment plans, and payment sequences, helping to track how orders were paid and processed within the e-commerce platform.\"\n                },\n                columns: [\n                    {\n                        name: \"order_id\",\n                        properties: {\n                            description: \"Unique identifier for the order associated with the payment.\",\n                            displayName: \"order_id\"\n                        }\n                    },\n                    {\n                        name: \"payment_installments\",\n                        properties: {\n                            description: \"Number of installments the payment is divided into for the order.\",\n                            displayName: \"payment_installments\"\n                        }\n                    },\n                    {\n                        name: \"payment_sequential\",\n                        properties: {\n                            description: \"Sequence number for tracking multiple payments within the same order.\",\n                            displayName: \"payment_sequential\"\n                        }\n                    },\n                    {\n                        name: \"payment_type\",\n                        properties: {\n                            description: \"Method used for the payment, such as credit card, debit, or voucher.\",\n                            displayName: \"payment_type\"\n                        }\n                    },\n                    {\n                        name: \"payment_value\",\n                        properties: {\n                            description: \"Total amount paid in the specific transaction.\",\n                            displayName: \"payment_value\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"order_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"payment_installments\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"payment_sequential\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"payment_type\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"payment_value\",\n                        dataType: \"DOUBLE\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_products_dataset\",\n                primaryKey: \"product_id\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_products_dataset.parquet\",\n                properties: {\n                    displayName: \"products\",\n                    description: \"This table provides detailed information about products, including their category, dimensions, weight, description length, and the number of photos. This helps in managing product details and enhancing the shopping experience on the e-commerce platform.\"\n                },\n                columns: [\n                    {\n                        name: \"product_category_name\",\n                        properties: {\n                            description: \"Name of the product category to which the item belongs.\",\n                            displayName: \"product_category_name\"\n                        }\n                    },\n                    {\n                        name: \"product_description_lenght\",\n                        properties: {\n                            description: \"Length of the product description in characters.\",\n                            displayName: \"product_description_lenght\"\n                        }\n                    },\n                    {\n                        name: \"product_height_cm\",\n                        properties: {\n                            description: \"Height of the product in centimeters.\",\n                            displayName: \"product_height_cm\"\n                        }\n                    },\n                    {\n                        name: \"product_id\",\n                        properties: {\n                            description: \"Unique identifier for the product\",\n                            displayName: \"product_id\"\n                        }\n                    },\n                    {\n                        name: \"product_length_cm\",\n                        properties: {\n                            description: \"Length of the product in centimeters\",\n                            displayName: \"product_length_cm\"\n                        }\n                    },\n                    {\n                        name: \"product_name_lenght\",\n                        properties: {\n                            description: \"Length of the product name in characters\",\n                            displayName: \"product_name_lenght\"\n                        }\n                    },\n                    {\n                        name: \"product_photos_qty\",\n                        properties: {\n                            description: \"Number of photos available for the product\",\n                            displayName: \"product_photos_qty\"\n                        }\n                    },\n                    {\n                        name: \"product_weight_g\",\n                        properties: {\n                            description: \"Weight of the product in grams\",\n                            displayName: \"product_weight_g\"\n                        }\n                    },\n                    {\n                        name: \"product_width_cm\",\n                        properties: {\n                            description: \"Width of the product in centimeters\",\n                            displayName: \"product_width_cm\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"product_category_name\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"product_description_lenght\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"product_height_cm\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"product_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"product_length_cm\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"product_name_lenght\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"product_photos_qty\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"product_weight_g\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"product_width_cm\",\n                        dataType: \"BIGINT\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_order_reviews_dataset\",\n                primaryKey: \"review_id\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_order_reviews_dataset.parquet\",\n                properties: {\n                    displayName: \"order reviews\",\n                    description: \"This table contains customer reviews for each order, including feedback comments, ratings, and timestamps for when the review was submitted and responded to. It helps track customer satisfaction and review management on the e-commerce platform.\"\n                },\n                columns: [\n                    {\n                        name: \"order_id\",\n                        properties: {\n                            description: \"Unique identifier linking the review to the corresponding order.\",\n                            displayName: \"order_id\"\n                        }\n                    },\n                    {\n                        name: \"review_answer_timestamp\",\n                        properties: {\n                            description: \"Date and time when the review was responded to by the seller\",\n                            displayName: \"review_answer_timestamp\"\n                        }\n                    },\n                    {\n                        name: \"review_comment_message\",\n                        properties: {\n                            description: \"Detailed feedback or comments provided by the customer regarding the order.\",\n                            displayName: \"review_comment_message\"\n                        }\n                    },\n                    {\n                        name: \"review_comment_title\",\n                        properties: {\n                            description: \"Summary or title of the customer's review\",\n                            displayName: \"review_comment_title\"\n                        }\n                    },\n                    {\n                        name: \"review_creation_date\",\n                        properties: {\n                            description: \"Date and time when the customer initially submitted the review.\",\n                            displayName: \"review_creation_date\"\n                        }\n                    },\n                    {\n                        name: \"review_id\",\n                        properties: {\n                            description: \"Unique identifier for the specific review entry.\",\n                            displayName: \"review_id\"\n                        }\n                    },\n                    {\n                        name: \"review_score\",\n                        properties: {\n                            description: \"Numeric rating given by the customer, typically ranging from 1 (worst) to 5 (best).\",\n                            displayName: \"review_score\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"order_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"review_answer_timestamp\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"review_comment_message\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"review_comment_title\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"review_creation_date\",\n                        dataType: \"TIMESTAMP\"\n                    },\n                    {\n                        columnName: \"review_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"review_score\",\n                        dataType: \"BIGINT\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_geolocation_dataset\",\n                primaryKey: \"\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_geolocation_dataset.parquet\",\n                properties: {\n                    displayName: \"geolocation\",\n                    description: \"This table contains detailed information about Brazilian zip codes and their corresponding latitude and longitude coordinates. It can be used to plot maps, calculate distances between sellers and customers, and perform geographic analysis.\"\n                },\n                columns: [\n                    {\n                        name: \"geolocation_city\",\n                        properties: {\n                            displayName: \"geolocation_city\",\n                            description: \"The city name of the geolocation\"\n                        }\n                    },\n                    {\n                        name: \"geolocation_lat\",\n                        properties: {\n                            displayName: \"geolocation_lat\",\n                            description: \"The coordinations for the locations latitude\"\n                        }\n                    },\n                    {\n                        name: \"geolocation_lng\",\n                        properties: {\n                            displayName: \"geolocation_lng\",\n                            description: \"The coordinations for the locations longitude\"\n                        }\n                    },\n                    {\n                        name: \"geolocation_state\",\n                        properties: {\n                            displayName: \"geolocation_state\",\n                            description: \"The state of the geolocation\"\n                        }\n                    },\n                    {\n                        name: \"geolocation_zip_code_prefix\",\n                        properties: {\n                            displayName: \"geolocation_zip_code_prefix\",\n                            description: \"First 5 digits of zip code\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"geolocation_city\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"geolocation_lat\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"geolocation_lng\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"geolocation_state\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"geolocation_zip_code_prefix\",\n                        dataType: \"VARCHAR\"\n                    }\n                ]\n            },\n            {\n                tableName: \"olist_sellers_dataset\",\n                primaryKey: \"\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/olist_sellers_dataset.parquet\",\n                properties: {\n                    displayName: \"sellers\",\n                    description: \"This table includes data about the sellers that fulfilled orders made. Use it to find the seller location and to identify which seller fulfilled each product.\"\n                },\n                columns: [\n                    {\n                        name: \"seller_city\",\n                        properties: {\n                            description: \"The Brazilian city where the seller is located\",\n                            displayName: \"seller_city\"\n                        }\n                    },\n                    {\n                        name: \"seller_id\",\n                        properties: {\n                            description: \"Unique identifier for the seller on the platform\",\n                            displayName: \"seller_id\"\n                        }\n                    },\n                    {\n                        name: \"seller_state\",\n                        properties: {\n                            description: \"The Brazilian state where the seller is located\",\n                            displayName: \"seller_state\"\n                        }\n                    },\n                    {\n                        name: \"seller_zip_code_prefix\",\n                        properties: {\n                            description: \"First 5 digits of seller zip code\",\n                            displayName: \"seller_zip_code_prefix\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"seller_city\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"seller_id\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"seller_state\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"seller_zip_code_prefix\",\n                        dataType: \"VARCHAR\"\n                    }\n                ]\n            },\n            {\n                tableName: \"product_category_name_translation\",\n                primaryKey: \"product_category_name\",\n                filePath: \"https://assets.getwren.ai/sample_data/brazilian-ecommerce/product_category_name_translation.parquet\",\n                properties: {\n                    displayName: \"product category name translation\",\n                    description: \"This table contains translations of product categories from Portuguese to English.\"\n                },\n                columns: [\n                    {\n                        name: \"product_category_name\",\n                        properties: {\n                            description: \"Original name of the product category in Portuguese.\",\n                            displayName: \"product_category_name\"\n                        }\n                    },\n                    {\n                        name: \"product_category_name_english\",\n                        properties: {\n                            description: \"Translated name of the product category in English.\",\n                            displayName: \"product_category_name_english\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"product_category_name\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"product_category_name_english\",\n                        dataType: \"VARCHAR\"\n                    }\n                ]\n            }\n        ],\n        questions: [\n            {\n                question: \"Which are the top 3 cities with the highest number of orders?\",\n                label: \"Ranking\"\n            },\n            {\n                question: \"What is the average score of reviews submitted for orders placed by customers in each city?\",\n                label: \"Aggregation\"\n            },\n            {\n                question: \"What is the total value of payments made by customers from each state?\",\n                label: \"Aggregation\"\n            }\n        ],\n        relations: [\n            // orders\n            // orders -> customers\n            {\n                fromModelName: \"olist_orders_dataset\",\n                fromColumnName: \"customer_id\",\n                toModelName: \"olist_customers_dataset\",\n                toColumnName: \"customer_id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.MANY_TO_ONE\n            },\n            // orders -> items\n            {\n                fromModelName: \"olist_orders_dataset\",\n                fromColumnName: \"order_id\",\n                toModelName: \"olist_order_items_dataset\",\n                toColumnName: \"order_id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            // orders -> reviews\n            {\n                fromModelName: \"olist_orders_dataset\",\n                fromColumnName: \"order_id\",\n                toModelName: \"olist_order_reviews_dataset\",\n                toColumnName: \"order_id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            // orders -> payments\n            {\n                fromModelName: \"olist_orders_dataset\",\n                fromColumnName: \"order_id\",\n                toModelName: \"olist_order_payments_dataset\",\n                toColumnName: \"order_id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            // items -> products\n            {\n                fromModelName: \"olist_order_items_dataset\",\n                fromColumnName: \"product_id\",\n                toModelName: \"olist_products_dataset\",\n                toColumnName: \"product_id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.MANY_TO_ONE\n            },\n            // items -> sellers\n            {\n                fromModelName: \"olist_order_items_dataset\",\n                fromColumnName: \"seller_id\",\n                toModelName: \"olist_sellers_dataset\",\n                toColumnName: \"seller_id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.MANY_TO_ONE\n            },\n            // geolocation -> customers (zip code prefix)\n            {\n                fromModelName: \"olist_geolocation_dataset\",\n                fromColumnName: \"geolocation_zip_code_prefix\",\n                toModelName: \"olist_customers_dataset\",\n                toColumnName: \"customer_zip_code_prefix\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            // geolocation -> sellers (zip code prefix)\n            {\n                fromModelName: \"olist_geolocation_dataset\",\n                fromColumnName: \"geolocation_zip_code_prefix\",\n                toModelName: \"olist_sellers_dataset\",\n                toColumnName: \"seller_zip_code_prefix\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            // product category name translation -> products\n            {\n                fromModelName: \"product_category_name_translation\",\n                fromColumnName: \"product_category_name\",\n                toModelName: \"olist_products_dataset\",\n                toColumnName: \"product_category_name\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            }\n        ]\n    },\n    nba: {\n        name: _type__WEBPACK_IMPORTED_MODULE_1__.SampleDatasetName.NBA,\n        tables: [\n            {\n                tableName: \"game\",\n                primaryKey: \"Id\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/v0.3.0/NBA/game.csv\",\n                columns: [\n                    {\n                        name: \"Id\"\n                    },\n                    {\n                        name: \"SeasonId\"\n                    },\n                    {\n                        name: \"TeamIdHome\"\n                    },\n                    {\n                        name: \"WlHome\"\n                    },\n                    {\n                        name: \"Min\"\n                    },\n                    {\n                        name: \"FgmHome\",\n                        properties: {\n                            description: \"number of field goals made by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"FgaHome\",\n                        properties: {\n                            description: \"number of field goals attempted by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"threepHome\",\n                        properties: {\n                            description: \"number of three point field goals made by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"threepaHome\",\n                        properties: {\n                            description: \"number of three point field goals attempted by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"FtmHome\",\n                        properties: {\n                            description: \"number of free throws made by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"FtaHome\",\n                        properties: {\n                            description: \"number of free throws attempted by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"OrebHome\",\n                        properties: {\n                            description: \"number of offensive rebounds by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"DrebHome\",\n                        properties: {\n                            description: \"number of defensive rebounds by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"RebHome\",\n                        properties: {\n                            description: \"number of rebounds by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"AstHome\",\n                        properties: {\n                            description: \"number of assists by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"StlHome\",\n                        properties: {\n                            description: \"number of steels by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"BlkHome\",\n                        properties: {\n                            description: \"number of blocks by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"TovHome\",\n                        properties: {\n                            description: \"number of turnovers by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"PfHome\",\n                        properties: {\n                            description: \"number of personal fouls by the home team.\"\n                        }\n                    },\n                    {\n                        name: \"PtsHome\",\n                        properties: {\n                            description: \"Total score of the home team.\"\n                        }\n                    },\n                    {\n                        name: \"PlusMimusHome\"\n                    },\n                    {\n                        name: \"TeamIdAway\"\n                    },\n                    {\n                        name: \"WlAway\"\n                    },\n                    {\n                        name: \"FgmAway\",\n                        properties: {\n                            description: \"number of field goals made by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"FgaAway\",\n                        properties: {\n                            description: \"number of field goals attempted by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"threepAway\",\n                        properties: {\n                            description: \"number of three point field goals made by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"threepaAway\",\n                        properties: {\n                            description: \"number of three point field goals attempted by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"FtmAway\",\n                        properties: {\n                            description: \"number of free throws made by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"FtaAway\",\n                        properties: {\n                            description: \"number of free throws attempted by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"OrebAway\",\n                        properties: {\n                            description: \"number of offensive rebounds by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"DrebAway\",\n                        properties: {\n                            description: \"number of defensive rebounds by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"RebAway\",\n                        properties: {\n                            description: \"number of rebounds by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"AstAway\",\n                        properties: {\n                            description: \"number of assists by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"StlAway\",\n                        properties: {\n                            description: \"number of steels by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"BlkAway\",\n                        properties: {\n                            description: \"number of blocks by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"TovAway\",\n                        properties: {\n                            description: \"number of turnovers by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"PfAway\",\n                        properties: {\n                            description: \"number of personal fouls by the away team.\"\n                        }\n                    },\n                    {\n                        name: \"PtsAway\",\n                        properties: {\n                            description: \"Total score of the away team.\"\n                        }\n                    },\n                    {\n                        name: \"PlusMimusAway\"\n                    },\n                    {\n                        name: \"seasonType\"\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"SeasonId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamIdHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Id\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"GameDate\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"WlHome\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Min\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FgmHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FgaHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FgPct_home\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"threepHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"threepaHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"fg3_pct_home\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"FtmHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FtaHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"ft_pct_home\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"OrebHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"DrebHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"RebHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"AstHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"StlHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"BlkHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TovHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PfHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PlusMinusHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamIdAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"WlAway\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"FgmAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FgaAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"fg_pct_away\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"threepAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"threepaAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Fg3_pct_away\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"FtmAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FtaAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Ft_pct_away\",\n                        dataType: \"DOUBLE\"\n                    },\n                    {\n                        columnName: \"OrebAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"DrebAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"RebAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"AstAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"StlAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"BlkAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TovAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PfAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PlusMinusAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"SeasonType\",\n                        dataType: \"VARCHAR\"\n                    }\n                ],\n                properties: {\n                    description: 'This table describes the game statistics for both the home and away teams in each NBA game. Turnover percentage is the number of possessions that end in a turnover. The formula for turnover percentage (TOV%) is \"TOV% = (Tov \\xf7 (FGA + (0.44 x FTA) + Tov)) x 100%\".'\n                }\n            },\n            {\n                tableName: \"line_score\",\n                primaryKey: \"GameId\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/v0.3.0/NBA/line_score.csv\",\n                columns: [\n                    {\n                        name: \"GameId\"\n                    },\n                    {\n                        name: \"GameDate\"\n                    },\n                    {\n                        name: \"GameSequence\"\n                    },\n                    {\n                        name: \"TeamIdHome\"\n                    },\n                    {\n                        name: \"TeamWinsLossesHome\"\n                    },\n                    {\n                        name: \"PtsQtr1Home\",\n                        properties: {\n                            description: \"The score of the home team in the first quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsQtr2Home\",\n                        properties: {\n                            description: \"The score of the home team in the second quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsQtr3Home\",\n                        properties: {\n                            description: \"The score of the home team in the third quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsQtr4Home\",\n                        properties: {\n                            description: \"The score of the home team in the fourth quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsOt1Home\",\n                        properties: {\n                            description: \"The score of the home team in the overtime. The value of 0 indicates that the game did not go into overtime.\"\n                        }\n                    },\n                    {\n                        name: \"PtsHome\",\n                        properties: {\n                            description: \"Total score of the home team.\"\n                        }\n                    },\n                    {\n                        name: \"TeamIdAway\"\n                    },\n                    {\n                        name: \"TeamWinsLossesAway\"\n                    },\n                    {\n                        name: \"PtsQtr1Away\",\n                        properties: {\n                            description: \"The score of the away team in the first quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsQtr2Away\",\n                        properties: {\n                            description: \"The score of the away team in the second quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsQtr3Away\",\n                        properties: {\n                            description: \"The score of the away team in the third quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsQtr4Away\",\n                        properties: {\n                            description: \"The score of the away team in the fourth quarter.\"\n                        }\n                    },\n                    {\n                        name: \"PtsOt1Away\",\n                        properties: {\n                            description: \"The score of the away team in the overtime. The value of 0 indicates that the game did not go into overtime.\"\n                        }\n                    },\n                    {\n                        name: \"PtsAway\",\n                        properties: {\n                            description: \"Total score of the away team.\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"GameDate\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"GameSequence\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"GameId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamIdHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamWinsLossesHome\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"PtsQtr1Home\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsQtr2Home\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsQtr3Home\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsQtr4Home\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsOt1Home\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsHome\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamIdAway\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamWinsLossesAway\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"PtsQtr1Away\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsQtr2Away\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsQtr3Away\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsQtr4Away\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsOt1Away\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PtsAway\",\n                        dataType: \"BIGINT\"\n                    }\n                ],\n                properties: {\n                    description: \"This table describes the scores and total score for each quarter or overtime of an NBA game, detailing the scores for both the home team and the away team.\"\n                }\n            },\n            {\n                tableName: \"player_games\",\n                primaryKey: \"Id\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/v0.3.0/NBA/player_game.csv\",\n                columns: [\n                    {\n                        name: \"Id\"\n                    },\n                    {\n                        name: \"GameId\"\n                    },\n                    {\n                        name: \"PlayerId\"\n                    },\n                    {\n                        name: \"Date\"\n                    },\n                    {\n                        name: \"Age\",\n                        properties: {\n                            description: 'player age. The format is \"age-days\"'\n                        }\n                    },\n                    {\n                        name: \"Tm\",\n                        properties: {\n                            description: \"team affiliation.\"\n                        }\n                    },\n                    {\n                        name: \"Opp\",\n                        properties: {\n                            description: \"opposing team.\"\n                        }\n                    },\n                    {\n                        name: \"MP\",\n                        properties: {\n                            description: \"minutes played\"\n                        }\n                    },\n                    {\n                        name: \"FG\",\n                        properties: {\n                            description: \"number of two point field goals made.\"\n                        }\n                    },\n                    {\n                        name: \"FGA\",\n                        properties: {\n                            description: \"number of two point field goals attempted (do not include free throws).\"\n                        }\n                    },\n                    {\n                        name: \"threeP\",\n                        properties: {\n                            description: \"number of three point field goals made.\"\n                        }\n                    },\n                    {\n                        name: \"threePA\",\n                        properties: {\n                            description: \"number of three point field goals attempted.\"\n                        }\n                    },\n                    {\n                        name: \"FT\",\n                        properties: {\n                            description: \"number of free throws made.\"\n                        }\n                    },\n                    {\n                        name: \"FTA\",\n                        properties: {\n                            description: \"number of free throws attempted.\"\n                        }\n                    },\n                    {\n                        name: \"ORB\",\n                        properties: {\n                            description: \"number of offensive rebounds.\"\n                        }\n                    },\n                    {\n                        name: \"DRB\",\n                        properties: {\n                            description: \"number of defensive rebounds.\"\n                        }\n                    },\n                    {\n                        name: \"AST\",\n                        properties: {\n                            description: \"number of assists.\"\n                        }\n                    },\n                    {\n                        name: \"STL\",\n                        properties: {\n                            description: \"number of Steals.\"\n                        }\n                    },\n                    {\n                        name: \"BLK\",\n                        properties: {\n                            description: \"number of blocks.\"\n                        }\n                    },\n                    {\n                        name: \"TOV\",\n                        properties: {\n                            description: \"number of turnovers allowed\"\n                        }\n                    },\n                    {\n                        name: \"PF\",\n                        properties: {\n                            description: \"number of personal fouls\"\n                        }\n                    },\n                    {\n                        name: \"PTS\",\n                        properties: {\n                            description: \"total score\"\n                        }\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"Id\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PlayerID\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"GameID\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"Date\",\n                        dataType: \"DATE\"\n                    },\n                    {\n                        columnName: \"Age\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Tm\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Opp\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"MP\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"FG\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FGA\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"threeP\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"threePA\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FT\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FTA\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"ORB\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"DRB\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TRB\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"AST\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"STL\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"BLK\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TOV\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PF\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"PTS\",\n                        dataType: \"BIGINT\"\n                    }\n                ],\n                properties: {\n                    description: 'This table describes the game statistics for each NBA player in every game. Turnover percentage is the number of possessions that end in a turnover. The formula for turnover percentage (TOV%) is \"TOV% = (Tov \\xf7 (FGA + (0.44 x FTA) + Tov)) x 100%\".'\n                }\n            },\n            {\n                tableName: \"player\",\n                primaryKey: \"Id\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/v0.3.0/NBA/player.csv\",\n                columns: [\n                    {\n                        name: \"Id\"\n                    },\n                    {\n                        name: \"TeamId\"\n                    },\n                    {\n                        name: \"FullName\"\n                    },\n                    {\n                        name: \"FirstName\"\n                    },\n                    {\n                        name: \"LastName\"\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"Id\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"TeamId\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FullName\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"FirstName\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"LastName\",\n                        dataType: \"VARCHAR\"\n                    }\n                ],\n                properties: {\n                    description: \"This table describes NBA players by their ID, name, and team affiliation.\"\n                }\n            },\n            {\n                tableName: \"team\",\n                primaryKey: \"Id\",\n                filePath: \"https://wrenai-public.s3.amazonaws.com/demo/v0.3.0/NBA/team.csv\",\n                columns: [\n                    {\n                        name: \"Id\"\n                    },\n                    {\n                        name: \"FullName\"\n                    },\n                    {\n                        name: \"Abbreviation\"\n                    },\n                    {\n                        name: \"Nickname\"\n                    },\n                    {\n                        name: \"City\"\n                    },\n                    {\n                        name: \"State\"\n                    },\n                    {\n                        name: \"YearFounded\"\n                    }\n                ],\n                schema: [\n                    {\n                        columnName: \"Id\",\n                        dataType: \"BIGINT\"\n                    },\n                    {\n                        columnName: \"FullName\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Abbreviation\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"Nickname\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"City\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"State\",\n                        dataType: \"VARCHAR\"\n                    },\n                    {\n                        columnName: \"YearFounded\",\n                        dataType: \"INT\"\n                    }\n                ],\n                properties: {\n                    description: \"This table describes NBA teams by their ID, team name, team abbreviation, and founding date.\"\n                }\n            }\n        ],\n        questions: [\n            {\n                question: \"How many three-pointers were made by each player in each game?\",\n                label: \"Aggregation\"\n            },\n            {\n                question: \"What is the differences in turnover rates between teams with high and low average scores?\",\n                label: \"Comparison\"\n            },\n            {\n                question: \"Which teams had the highest average points scored per game throughout the season?\",\n                label: \"Ranking\"\n            }\n        ],\n        relations: [\n            {\n                fromModelName: \"game\",\n                fromColumnName: \"Id\",\n                toModelName: \"line_score\",\n                toColumnName: \"GameId\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"line_score\",\n                fromColumnName: \"GameId\",\n                toModelName: \"player_games\",\n                toColumnName: \"GameID\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            },\n            {\n                fromModelName: \"player\",\n                fromColumnName: \"TeamId\",\n                toModelName: \"team\",\n                toColumnName: \"Id\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_ONE\n            },\n            {\n                fromModelName: \"team\",\n                fromColumnName: \"Id\",\n                toModelName: \"game\",\n                toColumnName: \"TeamIdHome\",\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            }\n        ]\n    }\n};\nconst buildInitSql = (datasetName)=>{\n    const selectedDataset = sampleDatasets[datasetName.toLowerCase()];\n    return selectedDataset.tables.map((table)=>{\n        const schema = table.schema?.map(({ columnName, dataType })=>`'${columnName}': '${dataType}'`).join(\", \");\n        const fileExtension = table.filePath.split(\".\").pop();\n        const createTableStatement = (fileType, schema)=>{\n            if (fileType !== \"csv\" && fileType !== \"parquet\") {\n                throw new Error(`Unsupported file type: ${fileType}`);\n            }\n            const baseStatement = `CREATE TABLE ${table.tableName} AS select * FROM read_${fileType}('${table.filePath}'`;\n            const schemaPart = fileType === \"csv\" && schema ? `, columns={${schema}}` : \"\";\n            const headerPart = fileType === \"csv\" ? \",header=true\" : \"\";\n            return `${baseStatement}${headerPart}${schemaPart});`;\n        };\n        return createTableStatement(fileExtension, schema);\n    }).join(\"\\n\");\n};\nconst getRelations = (datasetName)=>{\n    const selectedDataset = sampleDatasets[datasetName.toLowerCase()];\n    return selectedDataset.relations;\n};\nconst getSampleAskQuestions = (datasetName)=>{\n    const selectedDataset = sampleDatasets[datasetName.toLowerCase()];\n    return selectedDataset.questions;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/data/sample.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/data/type.ts":
/*!****************************************!*\
  !*** ./src/apollo/server/data/type.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SampleDatasetName: () => (/* binding */ SampleDatasetName)\n/* harmony export */ });\nvar SampleDatasetName;\n(function(SampleDatasetName) {\n    SampleDatasetName[\"MUSIC\"] = \"MUSIC\";\n    SampleDatasetName[\"NBA\"] = \"NBA\";\n    SampleDatasetName[\"ECOMMERCE\"] = \"ECOMMERCE\";\n    SampleDatasetName[\"HR\"] = \"HR\";\n})(SampleDatasetName || (SampleDatasetName = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9kYXRhL3R5cGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7VUFBWUE7Ozs7O0dBQUFBLHNCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9kYXRhL3R5cGUudHM/OGJhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBTYW1wbGVEYXRhc2V0TmFtZSB7XG4gIE1VU0lDID0gJ01VU0lDJyxcbiAgTkJBID0gJ05CQScsXG4gIEVDT01NRVJDRSA9ICdFQ09NTUVSQ0UnLFxuICBIUiA9ICdIUicsXG59XG4iXSwibmFtZXMiOlsiU2FtcGxlRGF0YXNldE5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/data/type.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/index.ts":
/*!************************************!*\
  !*** ./src/apollo/server/index.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema */ \"(api)/./src/apollo/server/schema.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _schema__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _schema__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _resolvers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolvers */ \"(api)/./src/apollo/server/resolvers.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_resolvers__WEBPACK_IMPORTED_MODULE_1__]);\n_resolvers__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _resolvers__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _resolvers__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBeUI7QUFDRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9pbmRleC50cz85NTU2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vc2NoZW1hJztcbmV4cG9ydCAqIGZyb20gJy4vcmVzb2x2ZXJzJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/managers/dataSourceSchemaDetector.ts":
/*!****************************************************************!*\
  !*** ./src/apollo/server/managers/dataSourceSchemaDetector.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaChangeType: () => (/* binding */ SchemaChangeType),\n/* harmony export */   \"default\": () => (/* binding */ DataSourceSchemaDetector)\n/* harmony export */ });\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_differenceWith__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/differenceWith */ \"lodash/differenceWith\");\n/* harmony import */ var lodash_differenceWith__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_differenceWith__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEmpty */ \"lodash/isEmpty\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isEqual */ \"lodash/isEqual\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_uniqBy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/uniqBy */ \"lodash/uniqBy\");\n/* harmony import */ var lodash_uniqBy__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_uniqBy__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var log4js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! log4js */ \"log4js\");\n/* harmony import */ var log4js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(log4js__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nconst logger = (0,log4js__WEBPACK_IMPORTED_MODULE_5__.getLogger)(\"DataSourceSchemaDetector\");\nlogger.level = \"debug\";\nvar SchemaChangeType;\n(function(SchemaChangeType) {\n    // the tables has been deleted\n    SchemaChangeType[\"DELETED_TABLES\"] = \"deletedTables\";\n    // the columns has been deleted\n    SchemaChangeType[\"DELETED_COLUMNS\"] = \"deletedColumns\";\n    // the columns type has been changed\n    SchemaChangeType[\"MODIFIED_COLUMNS\"] = \"modifiedColumns\";\n})(SchemaChangeType || (SchemaChangeType = {}));\nclass DataSourceSchemaDetector {\n    constructor({ ctx, projectId }){\n        this.ctx = ctx;\n        this.projectId = projectId;\n    }\n    async detectSchemaChange() {\n        const diffSchema = await this.getDiffSchema();\n        if (diffSchema) {\n            await this.addSchemaChange(diffSchema);\n        } else {\n            // Mark resolve all in last schema change if it has unresolved flag when no schema change detected.\n            const lastSchemaChange = await this.ctx.schemaChangeRepository.findLastSchemaChange(this.projectId);\n            if (lastSchemaChange !== null) {\n                const hasUnresolved = Object.values(lastSchemaChange.resolve).some((resolve)=>!resolve);\n                if (hasUnresolved) {\n                    await this.updateResolveToSchemaChange(lastSchemaChange, Object.values(SchemaChangeType));\n                }\n            }\n        }\n        return !!diffSchema;\n    }\n    async resolveSchemaChange(type) {\n        const schemaChangeType = lodash_camelCase__WEBPACK_IMPORTED_MODULE_0___default()(type);\n        const supportedTypes = [\n            \"deletedTables\",\n            \"deletedColumns\"\n        ];\n        if (!supportedTypes.includes(schemaChangeType)) {\n            throw new Error(\"Resolved scheme change type is not supported.\");\n        }\n        const lastSchemaChange = await this.ctx.schemaChangeRepository.findLastSchemaChange(this.projectId);\n        const changes = lastSchemaChange?.change[schemaChangeType];\n        const isResolved = lastSchemaChange?.resolve[schemaChangeType];\n        if (isResolved) {\n            throw new Error(`Schema change \"${schemaChangeType}\" has nothing to resolve.`);\n        }\n        const models = await this.ctx.modelRepository.findAllBy({\n            projectId: this.projectId\n        });\n        const modelIds = models.map((model)=>model.id);\n        const modelColumns = await this.ctx.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const modelRelationships = await this.ctx.relationRepository.findRelationInfoBy({\n            modelIds\n        });\n        const affectedResources = this.getAffectedResources(changes, {\n            models,\n            modelColumns,\n            modelRelationships\n        });\n        /**\n     * Handle resolve scheme change for DELETED_TABLES / DELETED_COLUMNS\n     *  1. Remove all affected calculated fields\n     *  2. Remove all affected columns if DELETED_COLUMNS\n     *  3. Remove all affected tables if DELETED_TABLES\n     *\n     *  Considering that we have set up foreign keys, some data will be automatically deleted in cascade,\n     *  so there is no need to perform additional deletions. (E.g., relationships, model's column)\n     */ await Promise.all(affectedResources.map(async (resource)=>{\n            // both DELETED_TABLES and DELETED_COLUMNS need to remove all affected calculated fields\n            logger.debug(`Start to remove all affected calculated fields \"${resource.calculatedFields.map((column)=>`${column.displayName} (${column.referenceName})`)}\".`);\n            const columnIds = resource.calculatedFields.map((column)=>column.id);\n            await this.ctx.modelColumnRepository.deleteAllByColumnIds(columnIds);\n            // remove columns if SchemaChangeType is DELETED_COLUMNS\n            if (schemaChangeType === \"deletedColumns\") {\n                const affectedColumnNames = resource.columns.map((column)=>column.sourceColumnName);\n                logger.debug(`Start to remove columns \"${affectedColumnNames}\" from model \"${resource.referenceName}\".`);\n                await this.ctx.modelColumnRepository.deleteAllBySourceColumnNames(resource.modelId, affectedColumnNames);\n            }\n            return;\n        }));\n        // remove tables if SchemaChangeType is DELETED_TABLES\n        if (schemaChangeType === \"deletedTables\") {\n            // delete models\n            const affectedTableNames = changes.map((table)=>table.name);\n            logger.debug(`Start to remove tables \"${affectedTableNames}\" from models.`);\n            await this.ctx.modelRepository.deleteAllBySourceTableNames(affectedTableNames);\n        }\n        // update resolve flag\n        await this.updateResolveToSchemaChange(lastSchemaChange, [\n            schemaChangeType\n        ]);\n    }\n    /**\n   * According to affected models and column data, we also need to find affected resources, including calculated fields and relationships.\n   *\n   * Find all affected resources include:\n   *  - columns (called \"affected column\")\n   *  - relationships (called \"affected relationship\")\n   *  - calculated fields:\n   *    - calculated fields which were affected by affected columns\n   *    - calculated fields which were affected by affected relationships\n   */ getAffectedResources(changes, { models, modelColumns, modelRelationships }) {\n        const affectedModels = models.filter((model)=>changes.findIndex((table)=>table.name === model.sourceTableName) !== -1);\n        const affectedResources = affectedModels.map((model)=>{\n            const affectedColumns = changes.find((table)=>table.name === model.sourceTableName).columns;\n            const allCalculatedFields = modelColumns.filter((column)=>column.isCalculated);\n            const affectedMaterials = affectedColumns.reduce((result, column)=>{\n                const affectedColumn = modelColumns.find((modelColumn)=>modelColumn.sourceColumnName === column.name && modelColumn.modelId === model.id);\n                result.columns.push({\n                    sourceColumnName: column.name,\n                    displayName: affectedColumn.displayName,\n                    type: column.type\n                });\n                // collect affected calculated fields if it's target column\n                const affectedCalculatedFieldsByColumnId = allCalculatedFields.filter((calculatedField)=>{\n                    const lineage = JSON.parse(calculatedField.lineage);\n                    return lineage && lineage[lineage.length - 1] === affectedColumn.id;\n                });\n                result.calculatedFields.push(...affectedCalculatedFieldsByColumnId);\n                // collect affected relationships\n                const affectedRelationships = modelRelationships.map((relationship)=>[\n                        relationship.fromColumnId,\n                        relationship.toColumnId\n                    ].includes(affectedColumn.id) ? relationship : null).filter((relationship)=>!!relationship);\n                affectedRelationships.forEach((relationship)=>{\n                    const referenceName = model.referenceName === relationship.fromModelName ? relationship.toModelName : relationship.fromModelName;\n                    const displayName = models.find((model)=>model.referenceName === referenceName)?.displayName;\n                    result.relationships.push({\n                        displayName,\n                        id: relationship.id,\n                        referenceName\n                    });\n                    // collect affected calculated fields if the relationship is in use\n                    const affectedCalculatedFieldsByRelationshipId = allCalculatedFields.filter((calculatedField)=>{\n                        const lineage = JSON.parse(calculatedField.lineage);\n                        // pop the column ID from the lineage\n                        lineage.pop();\n                        return lineage && lineage.includes(relationship.id);\n                    });\n                    result.calculatedFields.push(...affectedCalculatedFieldsByRelationshipId);\n                });\n                return result;\n            }, {\n                columns: [],\n                relationships: [],\n                calculatedFields: []\n            });\n            // unique calculated fields by id since it can be duplicated\n            const calculatedFields = lodash_uniqBy__WEBPACK_IMPORTED_MODULE_4___default()(affectedMaterials.calculatedFields, \"id\");\n            return {\n                sourceTableName: model.sourceTableName,\n                displayName: model.displayName,\n                referenceName: model.referenceName,\n                modelId: model.id,\n                ...affectedMaterials,\n                calculatedFields\n            };\n        });\n        return affectedResources;\n    }\n    async getDiffSchema() {\n        logger.info(\"Start to detect Data Source Schema changes.\");\n        const currentSchema = await this.getCurrentSchema();\n        const latestSchema = await this.getLatestSchema();\n        const diffSchema = currentSchema.reduce((result, currentTable)=>{\n            const lastestTable = latestSchema.find((table)=>table.name === currentTable.name);\n            // If the table is not found in the latest schema, it means the table has been deleted.\n            if (!lastestTable) {\n                result[\"deletedTables\"] = [\n                    ...result[\"deletedTables\"] || [],\n                    currentTable\n                ];\n                return result;\n            }\n            // If the table is found in the latest schema, we need to diff the columns.\n            const diffColumns = lodash_differenceWith__WEBPACK_IMPORTED_MODULE_1___default()(currentTable.columns, lastestTable.columns, (lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default()));\n            if (diffColumns.length > 0) {\n                const deletedColumnChange = {\n                    name: currentTable.name,\n                    columns: []\n                };\n                const modifiedColumnChange = {\n                    name: currentTable.name,\n                    columns: []\n                };\n                for (const currentColumn of diffColumns){\n                    const latestColumn = lastestTable.columns.find((column)=>column.name === currentColumn.name);\n                    // If the column is not found in the latest schema, it means the column has been deleted.\n                    if (!latestColumn) {\n                        deletedColumnChange.columns.push(currentColumn);\n                        continue;\n                    }\n                    // If the column is found in the latest schema, it means the column has been modified.\n                    // save latest column as modified column\n                    modifiedColumnChange.columns.push(latestColumn);\n                }\n                // If there are any deleted or modified columns, we need to add them to the result.\n                if (deletedColumnChange.columns.length > 0) {\n                    result[\"deletedColumns\"] = [\n                        ...result[\"deletedColumns\"] || [],\n                        deletedColumnChange\n                    ];\n                }\n                if (modifiedColumnChange.columns.length > 0) {\n                    result[\"modifiedColumns\"] = [\n                        ...result[\"modifiedColumns\"] || [],\n                        modifiedColumnChange\n                    ];\n                }\n            }\n            return result;\n        }, {});\n        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default()(diffSchema)) {\n            logger.debug(\"Diff Schema:\", JSON.stringify(diffSchema));\n            logger.info(\"Data Source Schema has changed.\");\n            return diffSchema;\n        }\n        logger.info(\"No changes in Data Source Schema.\");\n        return null;\n    }\n    async addSchemaChange(diffSchema) {\n        const getResolveState = (change)=>!!change ? false : undefined;\n        const lastSchemaChange = await this.ctx.schemaChangeRepository.findLastSchemaChange(this.projectId);\n        // If the schema change is the same as the last one, we don't need to create a new one.\n        const isNewSchemaChange = JSON.stringify(lastSchemaChange?.change) !== JSON.stringify(diffSchema);\n        if (isNewSchemaChange) {\n            await this.ctx.schemaChangeRepository.createOne({\n                projectId: this.projectId,\n                change: diffSchema,\n                // Set the resolve to false if there are any changes. It will set resolve to true once the schema has been synced.\n                resolve: {\n                    [\"deletedTables\"]: getResolveState(diffSchema[\"deletedTables\"]),\n                    [\"deletedColumns\"]: getResolveState(diffSchema[\"deletedColumns\"]),\n                    [\"modifiedColumns\"]: getResolveState(diffSchema[\"modifiedColumns\"])\n                }\n            });\n        }\n    }\n    async getCurrentSchema() {\n        const models = await this.ctx.modelRepository.findAllBy({\n            projectId: this.projectId\n        });\n        const modelIds = models.map((model)=>model.id);\n        const modelColumns = await this.ctx.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const result = models.map((model)=>{\n            return {\n                name: model.sourceTableName,\n                columns: modelColumns.filter((column)=>column.modelId === model.id && !column.isCalculated).map((column)=>({\n                        name: column.sourceColumnName,\n                        type: column.type\n                    }))\n            };\n        });\n        return result;\n    }\n    async getLatestSchema() {\n        const project = await this.ctx.projectRepository.findOneBy({\n            id: this.projectId\n        });\n        const latestDataSourceTables = await this.ctx.projectService.getProjectDataSourceTables(project);\n        const result = latestDataSourceTables.map((table)=>{\n            return {\n                name: table.name,\n                columns: table.columns.map((column)=>{\n                    return {\n                        name: column.name,\n                        type: column.type\n                    };\n                })\n            };\n        });\n        return result;\n    }\n    async updateResolveToSchemaChange(lastSchemaChange, schemaChangeTypes) {\n        await this.ctx.schemaChangeRepository.updateOne(lastSchemaChange.id, {\n            resolve: {\n                ...lastSchemaChange.resolve,\n                ...schemaChangeTypes.reduce((result, type)=>({\n                        ...result,\n                        [type]: true\n                    }), {})\n            }\n        });\n        logger.info(`Schema change \"${schemaChangeTypes}\" resolved successfully.`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/managers/dataSourceSchemaDetector.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/mdl/mdlBuilder.ts":
/*!*********************************************!*\
  !*** ./src/apollo/server/mdl/mdlBuilder.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDLBuilder: () => (/* binding */ MDLBuilder)\n/* harmony export */ });\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isEmpty */ \"lodash/isEmpty\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isNil */ \"lodash/isNil\");\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isNil__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/pickBy */ \"lodash/pickBy\");\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_pickBy__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type */ \"(api)/./src/apollo/server/mdl/type.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @server/config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types */ \"(api)/./src/apollo/server/types/index.ts\");\n\n\n\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_4__.getLogger)(\"MDLBuilder\");\nlogger.level = \"debug\";\nconst config = (0,_server_config__WEBPACK_IMPORTED_MODULE_5__.getConfig)();\n// responsible to generate a valid manifest json\nclass MDLBuilder {\n    constructor(builderOptions){\n        const { project, models, columns, nestedColumns, relations, views, relatedModels, relatedColumns, relatedRelations } = builderOptions;\n        this.project = project;\n        this.models = models.sort((a, b)=>a.id - b.id);\n        this.columns = columns.sort((a, b)=>a.id - b.id);\n        this.nestedColumns = nestedColumns;\n        this.relations = relations.sort((a, b)=>a.id - b.id);\n        this.views = views || [];\n        this.relatedModels = relatedModels;\n        this.relatedColumns = relatedColumns;\n        this.relatedRelations = relatedRelations;\n        // init manifest\n        this.manifest = {};\n    }\n    build() {\n        this.addProject();\n        this.addModel();\n        this.addNormalField();\n        this.addRelation();\n        this.addCalculatedField();\n        this.addView();\n        this.postProcessManifest();\n        return this.getManifest();\n    }\n    getManifest() {\n        return this.manifest;\n    }\n    addModel() {\n        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0___default()(this.manifest.models)) {\n            return;\n        }\n        this.manifest.models = this.models.map((model)=>{\n            const properties = model.properties ? JSON.parse(model.properties) : {};\n            // put displayName in properties\n            if (model.displayName) {\n                properties.displayName = model.displayName;\n            }\n            const tableReference = this.buildTableReference(model);\n            return {\n                name: model.referenceName,\n                columns: [],\n                tableReference,\n                // can only have one of refSql or tableReference\n                refSql: this.useRustWrenEngine() ? null : tableReference ? null : model.refSql,\n                cached: model.cached ? true : false,\n                refreshTime: model.refreshTime,\n                properties: {\n                    displayName: model.displayName,\n                    description: properties.description\n                },\n                primaryKey: \"\"\n            };\n        });\n    }\n    addView() {\n        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0___default()(this.manifest.views)) {\n            return;\n        }\n        this.manifest.views = this.views.map((view)=>{\n            const properties = JSON.parse(view.properties) || {};\n            // filter out properties that are not null or undefined\n            // and are in the list of properties that are allowed\n            const viewProperties = lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default()(properties, (value, key)=>{\n                return !lodash_isNil__WEBPACK_IMPORTED_MODULE_1___default()(value) && [\n                    \"displayName\",\n                    \"description\",\n                    \"question\",\n                    \"summary\"\n                ].includes(key);\n            });\n            return {\n                name: view.name,\n                statement: view.statement,\n                properties: {\n                    ...viewProperties,\n                    // viewId will be passed back in other APIs\n                    // to identify the view\n                    viewId: view.id.toString()\n                }\n            };\n        });\n    }\n    addNormalField() {\n        // should addModel first\n        if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0___default()(this.manifest.models)) {\n            logger.debug(\"No model in manifest, should build model first\");\n            return;\n        }\n        this.columns.filter(({ isCalculated })=>!isCalculated).forEach((column)=>{\n            // validate manifest.model exist\n            const modelRefName = this.models.find((model)=>model.id === column.modelId)?.referenceName;\n            if (!modelRefName) {\n                logger.debug(`Build MDL Column Error: can not find model, modelId ${column.modelId}, columnId: ${column.id}`);\n                return;\n            }\n            const model = this.manifest.models.find((model)=>model.name === modelRefName);\n            // modify model primary key\n            if (column.isPk) {\n                model.primaryKey = column.referenceName;\n            }\n            // add column into model\n            if (!model.columns) {\n                model.columns = [];\n            }\n            const properties = column.properties ? JSON.parse(column.properties) : {};\n            // put displayName in properties\n            if (column.displayName) {\n                properties.displayName = column.displayName;\n            }\n            // put nested columns in properties\n            if (column.type.includes(\"STRUCT\")) {\n                const nestedColumns = this.nestedColumns.filter((nestedColumn)=>nestedColumn.columnId === column.id);\n                nestedColumns.forEach((column)=>{\n                    if (column.displayName) {\n                        properties[`nestedDisplayName.${column.sourceColumnName}`] = column.displayName;\n                    }\n                    if (column.properties?.description) {\n                        properties[`nestedDescription.${column.sourceColumnName}`] = column.properties.description;\n                    }\n                }, {});\n            }\n            const expression = this.getColumnExpression(column, model);\n            model.columns.push({\n                name: column.referenceName,\n                type: column.type,\n                isCalculated: column.isCalculated ? true : false,\n                notNull: column.notNull ? true : false,\n                expression,\n                properties: properties\n            });\n        });\n    }\n    addCalculatedField() {\n        // should addModel first\n        if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0___default()(this.manifest.models)) {\n            logger.debug(\"No model in manifest, should build model first\");\n            return;\n        }\n        this.columns.filter(({ isCalculated })=>isCalculated).forEach((column)=>{\n            // validate manifest.model exist\n            const relatedModel = this.relatedModels.find((model)=>model.id === column.modelId);\n            const model = this.manifest.models.find((model)=>model.name === relatedModel.referenceName);\n            if (!model) {\n                logger.debug(`Build MDL Column Error: can not find model, modelId \"${column.modelId}\", columnId: \"${column.id}\"`);\n                return;\n            }\n            const expression = this.getColumnExpression(column, model);\n            const columnValue = {\n                name: column.referenceName,\n                type: column.type,\n                isCalculated: true,\n                expression,\n                notNull: column.notNull ? true : false,\n                properties: JSON.parse(column.properties)\n            };\n            model.columns.push(columnValue);\n        });\n    }\n    insertCalculatedField(modelName, calculatedField) {\n        const model = this.manifest.models.find((model)=>model.name === modelName);\n        if (!model) {\n            logger.debug(`Can not find model \"${modelName}\" to add calculated field`);\n            return;\n        }\n        // if calculated field is already in the model, skip\n        if (model.columns.find((column)=>column.name === calculatedField.referenceName)) {\n            return;\n        }\n        const expression = this.getColumnExpression(calculatedField, model);\n        const columnValue = {\n            name: calculatedField.referenceName,\n            type: calculatedField.type,\n            isCalculated: true,\n            expression,\n            notNull: calculatedField.notNull ? true : false,\n            properties: JSON.parse(calculatedField.properties)\n        };\n        model.columns.push(columnValue);\n    }\n    addRelation() {\n        this.manifest.relationships = this.relations.map((relation)=>{\n            const { name, joinType, fromModelName, fromColumnName, toModelName, toColumnName } = relation;\n            const condition = this.getRelationCondition(relation);\n            this.addRelationColumn(fromModelName, {\n                modelReferenceName: toModelName,\n                columnReferenceName: toColumnName,\n                relation: name\n            });\n            this.addRelationColumn(toModelName, {\n                modelReferenceName: fromModelName,\n                columnReferenceName: fromColumnName,\n                relation: name\n            });\n            const properties = relation.properties ? JSON.parse(relation.properties) : {};\n            return {\n                name: name,\n                models: [\n                    fromModelName,\n                    toModelName\n                ],\n                joinType: joinType,\n                condition,\n                properties\n            };\n        });\n    }\n    addProject() {\n        this.manifest.schema = this.project.schema;\n        this.manifest.catalog = this.project.catalog;\n        const dataSource = this.buildDataSource();\n        if (dataSource) {\n            this.manifest.dataSource = dataSource;\n        }\n    }\n    addRelationColumn(modelName, columnData) {\n        const model = this.manifest.models.find((model)=>model.name === modelName);\n        if (!model) {\n            logger.debug(`Can not find model \"${modelName}\" to add relation column`);\n            return;\n        }\n        if (!model.columns) {\n            model.columns = [];\n        }\n        // check if the modelReferenceName is already in the model column\n        const modelNameDuplicated = model.columns.find((column)=>column.name === columnData.modelReferenceName);\n        const column = {\n            name: modelNameDuplicated ? `${columnData.modelReferenceName}_${columnData.columnReferenceName}` : columnData.modelReferenceName,\n            type: columnData.modelReferenceName,\n            properties: null,\n            relationship: columnData.relation,\n            isCalculated: false,\n            notNull: false\n        };\n        model.columns.push(column);\n    }\n    getColumnExpression(column, currentModel) {\n        if (!column.isCalculated) {\n            // columns existed in the data source.\n            // Provide original column name in expression to MDL if referenceName has converted.\n            if (column.sourceColumnName !== column.referenceName) {\n                return `\"${column.sourceColumnName}\"`;\n            }\n            return \"\";\n        }\n        // calculated field\n        const lineage = JSON.parse(column.lineage);\n        // lineage = [relationId1, relationId2, ..., columnId]\n        const fieldExpression = Object.entries(lineage).reduce((acc, [index, id])=>{\n            const isLast = parseInt(index) == lineage.length - 1;\n            if (isLast) {\n                // id is columnId\n                const columnReferenceName = this.relatedColumns.find((relatedColumn)=>relatedColumn.id === id)?.referenceName;\n                acc.push(`\\\"${columnReferenceName}\\\"`);\n                return acc;\n            }\n            // id is relationId\n            const usedRelation = this.relatedRelations.find((relatedRelation)=>relatedRelation.id === id);\n            const relationColumnName = currentModel.columns.find((c)=>c.relationship === usedRelation.name).name;\n            // move to next model\n            const nextModelName = currentModel.name === usedRelation.fromModelName ? usedRelation.toModelName : usedRelation.fromModelName;\n            const nextModel = this.manifest.models.find((model)=>model.name === nextModelName);\n            currentModel = nextModel;\n            acc.push(relationColumnName);\n            return acc;\n        }, []);\n        return `${column.aggregation}(${fieldExpression.join(\".\")})`;\n    }\n    getRelationCondition(relation) {\n        //TODO phase2: implement the expression for relation condition\n        const { fromColumnName, toColumnName, fromModelName, toModelName } = relation;\n        return `\"${fromModelName}\".${fromColumnName} = \"${toModelName}\".${toColumnName}`;\n    }\n    buildTableReference(model) {\n        const modelProps = model.properties && typeof model.properties === \"string\" ? JSON.parse(model.properties) : {};\n        if (!modelProps.table) {\n            return null;\n        }\n        return {\n            catalog: modelProps.catalog || null,\n            schema: modelProps.schema || null,\n            table: modelProps.table\n        };\n    }\n    postProcessManifest() {\n        if (this.useRustWrenEngine()) {\n            // 1. remove all the key that the value is null\n            this.manifest.models = this.manifest.models?.map((model)=>{\n                model.columns.map((column)=>{\n                    column.properties = lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default()(column.properties, (value)=>value !== null);\n                    return column;\n                });\n                return lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default()(model, (value)=>value !== null);\n            });\n            this.manifest.views = this.manifest.views?.map((view)=>{\n                return lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default()(view, (value)=>value !== null);\n            });\n            this.manifest.relationships = this.manifest.relationships?.map((relationship)=>{\n                return lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default()(relationship, (value)=>value !== null);\n            });\n            this.manifest.enumDefinitions = this.manifest.enumDefinitions?.map((enumDefinition)=>{\n                return lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default()(enumDefinition, (value)=>value !== null);\n            });\n            // 2. remove expression if it's empty string\n            this.manifest.models?.forEach((model)=>{\n                model.columns?.forEach((column)=>{\n                    if (column.expression === \"\") {\n                        delete column.expression;\n                    }\n                });\n            });\n        }\n    }\n    useRustWrenEngine() {\n        return !!config.experimentalEngineRustVersion;\n    }\n    buildDataSource() {\n        const type = this.project.type;\n        if (!type) {\n            return;\n        }\n        switch(type){\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.BIG_QUERY:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.BIGQUERY;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.DUCKDB:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.DUCKDB;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.POSTGRES:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.POSTGRES;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.MYSQL:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.MYSQL;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.MSSQL:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.MSSQL;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.CLICK_HOUSE:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.CLICKHOUSE;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.TRINO:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.TRINO;\n            case _types__WEBPACK_IMPORTED_MODULE_6__.DataSourceName.SNOWFLAKE:\n                return _type__WEBPACK_IMPORTED_MODULE_3__.WrenEngineDataSourceType.SNOWFLAKE;\n            default:\n                throw new Error(`Unsupported data source type: ${type} found when building manifest`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/mdl/mdlBuilder.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/mdl/type.ts":
/*!***************************************!*\
  !*** ./src/apollo/server/mdl/type.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WrenEngineDataSourceType: () => (/* binding */ WrenEngineDataSourceType)\n/* harmony export */ });\nvar WrenEngineDataSourceType;\n(function(WrenEngineDataSourceType) {\n    WrenEngineDataSourceType[\"BIGQUERY\"] = \"BIGQUERY\";\n    WrenEngineDataSourceType[\"CANNER\"] = \"CANNER\";\n    WrenEngineDataSourceType[\"CLICKHOUSE\"] = \"CLICKHOUSE\";\n    WrenEngineDataSourceType[\"MSSQL\"] = \"MSSQL\";\n    WrenEngineDataSourceType[\"MYSQL\"] = \"MYSQL\";\n    WrenEngineDataSourceType[\"POSTGRES\"] = \"POSTGRES\";\n    WrenEngineDataSourceType[\"SNOWFLAKE\"] = \"SNOWFLAKE\";\n    WrenEngineDataSourceType[\"TRINO\"] = \"TRINO\";\n    WrenEngineDataSourceType[\"DUCKDB\"] = \"DUCKDB\";\n    // accepted by the wren engine, but not supported by the wren ui\n    WrenEngineDataSourceType[\"DATAFUSION\"] = \"DATAFUSION\";\n})(WrenEngineDataSourceType || (WrenEngineDataSourceType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9tZGwvdHlwZS50cyIsIm1hcHBpbmdzIjoiOzs7OztVQXFGWUE7Ozs7Ozs7Ozs7SUFVVixnRUFBZ0U7O0dBVnREQSw2QkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvbWRsL3R5cGUudHM/ZWNjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIENvbHVtbk1ETCB7XG4gIG5hbWU6IHN0cmluZzsgLy8gZWc6IFwib3JkZXJrZXlcIiwgXCJjdXN0a2V5XCIsIFwib3JkZXJzdGF0dXNcIlxuICB0eXBlPzogc3RyaW5nOyAvLyBlZzogXCJpbnRlZ2VyXCIsIFwic3RyaW5nXCIsIFwicmVsYXRpb25OYW1lXCJcbiAgaXNDYWxjdWxhdGVkOiBib29sZWFuOyAvLyBlZzogdHJ1ZSwgZmFsc2VcbiAgbm90TnVsbD86IGJvb2xlYW47IC8vIGVnOiB0cnVlLCBmYWxzZVxuICByZWxhdGlvbnNoaXA/OiBzdHJpbmc7IC8vZWc6IE9yZGVyc0N1c3RvbWVyXG4gIHByb3BlcnRpZXM/OiB7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7IC8vIGVnOiBcInRoZSBrZXkgb2YgZWFjaCBvcmRlclwiXG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7IC8vIGVnOiBcIk9yZGVyIEtleVwiXG4gIH07XG4gIGV4cHJlc3Npb24/OiBzdHJpbmc7IC8vIGVnOiBcIlNVTShvcmRlcnMudG90YWxwcmljZSlcIlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsTURMIHtcbiAgbmFtZTogc3RyaW5nOyAvLyBlZzogXCJPcmRlcnNNb2RlbFwiLCBcIkxpbmVpdGVtTW9kZWxcIlxuICByZWZTcWw/OiBzdHJpbmc7IC8vIGVnOiBcInNlbGVjdCAqIGZyb20gb3JkZXJzXCIsIFwic2VsZWN0ICogZnJvbSBsaW5laXRlbVwiXG4gIHRhYmxlUmVmZXJlbmNlPzogVGFibGVSZWZlcmVuY2U7XG4gIGNvbHVtbnM/OiBDb2x1bW5NRExbXTtcbiAgcHJpbWFyeUtleT86IHN0cmluZzsgLy8gZWc6IFwib3JkZXJrZXlcIiwgXCJjdXN0a2V5XCJcbiAgY2FjaGVkOiBib29sZWFuOyAvLyBlZyB0cnVlLCBmYWxzZVxuICByZWZyZXNoVGltZT86IHN0cmluZzsgLy8gZWc6IFwiMzAuMDBtXCJcbiAgcHJvcGVydGllcz86IHtcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZzsgLy8gZWc6IFwidHBjaCB0aW55IG9yZGVycyB0YWJsZVwiXG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7IC8vIGVnOiBcIk9yZGVyc1wiXG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVsYXRpb25NREwge1xuICBuYW1lOiBzdHJpbmc7IC8vIGVnOiBcIk9yZGVyc0N1c3RvbWVyXCJcbiAgbW9kZWxzOiBzdHJpbmdbXTsgLy8gZWc6IFtcIk9yZGVyc01vZGVsXCIsIFwiQ3VzdG9tZXJNb2RlbFwiXVxuICBqb2luVHlwZTogc3RyaW5nOyAvLyBlZzogXCJNQU5ZX1RPX09ORVwiXG4gIGNvbmRpdGlvbjogc3RyaW5nOyAvLyBlZzogXCJPcmRlcnNNb2RlbC5jdXN0a2V5ID0gQ3VzdG9tZXJNb2RlbC5jdXN0a2V5XCJcbiAgbWFueVNpZGVTb3J0S2V5cz86IHtcbiAgICBuYW1lOiBzdHJpbmc7IC8vIGVnOiBcIm9yZGVya2V5XCJcbiAgICBkZXNjZW5kaW5nOiBib29sZWFuOyAvLyBlZzogZmFsc2VcbiAgfVtdO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZzsgLy8gZWc6IFwidGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIG9yZGVycyBhbmQgY3VzdG9tZXJzXCJcbiAgcHJvcGVydGllcz86IHtcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZzsgLy8gZWc6IFwidGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIG9yZGVycyBhbmQgY3VzdG9tZXJzXCJcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbnVtRGVmaW5pdGlvbiB7XG4gIG5hbWU6IHN0cmluZzsgLy8gZWc6IFwiT3JkZXJTdGF0dXNcIlxuICB2YWx1ZXM6IHtcbiAgICBuYW1lOiBzdHJpbmc7IC8vIGVnOiBcIlBFTkRJTkdcIiwgXCJQUk9DRVNTSU5HXCJcbiAgICB2YWx1ZTogc3RyaW5nOyAvLyBlZzogXCJwZW5kaW5nXCIsIFwicHJvY2Vzc2luZ1wiXG4gICAgcHJvcGVydGllcz86IHtcbiAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nOyAvLyBlZzogXCJwZW5kaW5nXCJcbiAgICB9O1xuICB9W107XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nOyAvLyBlZzogXCJ0aGUgc3RhdHVzIG9mIGFuIG9yZGVyXCJcbiAgcHJvcGVydGllcz86IHtcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZzsgLy8gZWc6IFwidGhlIHN0YXR1cyBvZiBhbiBvcmRlclwiXG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlld01ETCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc3RhdGVtZW50OiBzdHJpbmc7XG4gIHByb3BlcnRpZXM/OiB7XG4gICAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgdmlld0lkPzogc3RyaW5nO1xuICAgIHF1ZXN0aW9uPzogc3RyaW5nO1xuICAgIHN1bW1hcnk/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFuaWZlc3Qge1xuICBjYXRhbG9nPzogc3RyaW5nOyAvLyBlZzogXCJ0ZXN0LWNhdGFsb2dcIlxuICBzY2hlbWE/OiBzdHJpbmc7IC8vIGVnOiBcInRlc3Qtc2NoZW1hXCJcbiAgZGF0YVNvdXJjZT86IFdyZW5FbmdpbmVEYXRhU291cmNlVHlwZTtcbiAgbW9kZWxzPzogUGFydGlhbDxNb2RlbE1ETD5bXTsgLy8gdXNlIHBhcnRpYWwgc2luY2UgUnVzdCB2ZXJzaW9uIGRvZXNuJ3Qgc3VwcG9ydCBudWxsIHZhbHVlcywgd2UgbmVlZCB0byByZW1vdmUgYWxsIHRoZSBudWxsIHZhbHVlc1xuICByZWxhdGlvbnNoaXBzPzogUGFydGlhbDxSZWxhdGlvbk1ETD5bXTsgLy8gdXNlIHBhcnRpYWwgc2luY2UgUnVzdCB2ZXJzaW9uIGRvZXNuJ3Qgc3VwcG9ydCBudWxsIHZhbHVlcywgd2UgbmVlZCB0byByZW1vdmUgYWxsIHRoZSBudWxsIHZhbHVlc1xuICBlbnVtRGVmaW5pdGlvbnM/OiBQYXJ0aWFsPEVudW1EZWZpbml0aW9uPltdOyAvLyB1c2UgcGFydGlhbCBzaW5jZSBSdXN0IHZlcnNpb24gZG9lc24ndCBzdXBwb3J0IG51bGwgdmFsdWVzLCB3ZSBuZWVkIHRvIHJlbW92ZSBhbGwgdGhlIG51bGwgdmFsdWVzXG4gIHZpZXdzPzogUGFydGlhbDxWaWV3TURMPltdOyAvLyB1c2UgcGFydGlhbCBzaW5jZSBSdXN0IHZlcnNpb24gZG9lc24ndCBzdXBwb3J0IG51bGwgdmFsdWVzLCB3ZSBuZWVkIHRvIHJlbW92ZSBhbGwgdGhlIG51bGwgdmFsdWVzXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVSZWZlcmVuY2Uge1xuICBzY2hlbWE/OiBzdHJpbmc7XG4gIGNhdGFsb2c/OiBzdHJpbmc7XG4gIHRhYmxlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFdyZW5FbmdpbmVEYXRhU291cmNlVHlwZSB7XG4gIEJJR1FVRVJZID0gJ0JJR1FVRVJZJyxcbiAgQ0FOTkVSID0gJ0NBTk5FUicsXG4gIENMSUNLSE9VU0UgPSAnQ0xJQ0tIT1VTRScsXG4gIE1TU1FMID0gJ01TU1FMJyxcbiAgTVlTUUwgPSAnTVlTUUwnLFxuICBQT1NUR1JFUyA9ICdQT1NUR1JFUycsXG4gIFNOT1dGTEFLRSA9ICdTTk9XRkxBS0UnLFxuICBUUklOTyA9ICdUUklOTycsXG4gIERVQ0tEQiA9ICdEVUNLREInLFxuICAvLyBhY2NlcHRlZCBieSB0aGUgd3JlbiBlbmdpbmUsIGJ1dCBub3Qgc3VwcG9ydGVkIGJ5IHRoZSB3cmVuIHVpXG4gIERBVEFGVVNJT04gPSAnREFUQUZVU0lPTicsXG59XG4iXSwibmFtZXMiOlsiV3JlbkVuZ2luZURhdGFTb3VyY2VUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/mdl/type.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/models/adaptor.ts":
/*!*********************************************!*\
  !*** ./src/apollo/server/models/adaptor.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AskCandidateType: () => (/* binding */ AskCandidateType),\n/* harmony export */   AskResultStatus: () => (/* binding */ AskResultStatus),\n/* harmony export */   AskResultType: () => (/* binding */ AskResultType),\n/* harmony export */   ChartStatus: () => (/* binding */ ChartStatus),\n/* harmony export */   ChartType: () => (/* binding */ ChartType),\n/* harmony export */   RecommendationQuestionStatus: () => (/* binding */ RecommendationQuestionStatus),\n/* harmony export */   TextBasedAnswerStatus: () => (/* binding */ TextBasedAnswerStatus),\n/* harmony export */   WrenAIDeployStatusEnum: () => (/* binding */ WrenAIDeployStatusEnum),\n/* harmony export */   WrenAILanguage: () => (/* binding */ WrenAILanguage),\n/* harmony export */   WrenAISystemStatus: () => (/* binding */ WrenAISystemStatus)\n/* harmony export */ });\nvar WrenAIDeployStatusEnum;\n(function(WrenAIDeployStatusEnum) {\n    WrenAIDeployStatusEnum[\"SUCCESS\"] = \"SUCCESS\";\n    WrenAIDeployStatusEnum[\"FAILED\"] = \"FAILED\";\n})(WrenAIDeployStatusEnum || (WrenAIDeployStatusEnum = {}));\nvar WrenAISystemStatus;\n(function(WrenAISystemStatus) {\n    WrenAISystemStatus[\"INDEXING\"] = \"INDEXING\";\n    WrenAISystemStatus[\"FINISHED\"] = \"FINISHED\";\n    WrenAISystemStatus[\"FAILED\"] = \"FAILED\";\n})(WrenAISystemStatus || (WrenAISystemStatus = {}));\nvar WrenAILanguage;\n(function(WrenAILanguage) {\n    WrenAILanguage[\"EN\"] = \"English\";\n    WrenAILanguage[\"ES\"] = \"Spanish\";\n    WrenAILanguage[\"FR\"] = \"French\";\n    WrenAILanguage[\"ZH_TW\"] = \"Traditional Chinese\";\n    WrenAILanguage[\"ZH_CN\"] = \"Simplified Chinese\";\n    WrenAILanguage[\"DE\"] = \"German\";\n    WrenAILanguage[\"PT\"] = \"Portuguese\";\n    WrenAILanguage[\"RU\"] = \"Russian\";\n    WrenAILanguage[\"JA\"] = \"Japanese\";\n    WrenAILanguage[\"KO\"] = \"Korean\";\n})(WrenAILanguage || (WrenAILanguage = {}));\nvar AskResultStatus;\n(function(AskResultStatus) {\n    AskResultStatus[\"UNDERSTANDING\"] = \"UNDERSTANDING\";\n    AskResultStatus[\"SEARCHING\"] = \"SEARCHING\";\n    AskResultStatus[\"PLANNING\"] = \"PLANNING\";\n    AskResultStatus[\"GENERATING\"] = \"GENERATING\";\n    AskResultStatus[\"CORRECTING\"] = \"CORRECTING\";\n    AskResultStatus[\"FINISHED\"] = \"FINISHED\";\n    AskResultStatus[\"FAILED\"] = \"FAILED\";\n    AskResultStatus[\"STOPPED\"] = \"STOPPED\";\n})(AskResultStatus || (AskResultStatus = {}));\nvar AskResultType;\n(function(AskResultType) {\n    AskResultType[\"GENERAL\"] = \"GENERAL\";\n    AskResultType[\"TEXT_TO_SQL\"] = \"TEXT_TO_SQL\";\n    AskResultType[\"MISLEADING_QUERY\"] = \"MISLEADING_QUERY\";\n})(AskResultType || (AskResultType = {}));\nvar AskCandidateType;\n(function(AskCandidateType) {\n    AskCandidateType[\"VIEW\"] = \"VIEW\";\n    AskCandidateType[\"LLM\"] = \"LLM\";\n})(AskCandidateType || (AskCandidateType = {}));\nvar RecommendationQuestionStatus;\n(function(RecommendationQuestionStatus) {\n    RecommendationQuestionStatus[\"GENERATING\"] = \"GENERATING\";\n    RecommendationQuestionStatus[\"FINISHED\"] = \"FINISHED\";\n    RecommendationQuestionStatus[\"FAILED\"] = \"FAILED\";\n})(RecommendationQuestionStatus || (RecommendationQuestionStatus = {}));\nvar TextBasedAnswerStatus;\n(function(TextBasedAnswerStatus) {\n    TextBasedAnswerStatus[\"PREPROCESSING\"] = \"PREPROCESSING\";\n    TextBasedAnswerStatus[\"SUCCEEDED\"] = \"SUCCEEDED\";\n    TextBasedAnswerStatus[\"FAILED\"] = \"FAILED\";\n})(TextBasedAnswerStatus || (TextBasedAnswerStatus = {}));\nvar ChartStatus;\n(function(ChartStatus) {\n    ChartStatus[\"FETCHING\"] = \"FETCHING\";\n    ChartStatus[\"GENERATING\"] = \"GENERATING\";\n    ChartStatus[\"FINISHED\"] = \"FINISHED\";\n    ChartStatus[\"FAILED\"] = \"FAILED\";\n    ChartStatus[\"STOPPED\"] = \"STOPPED\";\n})(ChartStatus || (ChartStatus = {}));\nvar ChartType;\n(function(ChartType) {\n    ChartType[\"BAR\"] = \"bar\";\n    ChartType[\"GROUPED_BAR\"] = \"grouped_bar\";\n    ChartType[\"STACKED_BAR\"] = \"stacked_bar\";\n    ChartType[\"LINE\"] = \"line\";\n    ChartType[\"MULTI_LINE\"] = \"multi_line\";\n    ChartType[\"PIE\"] = \"pie\";\n    ChartType[\"AREA\"] = \"area\";\n})(ChartType || (ChartType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9tb2RlbHMvYWRhcHRvci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztVQVFZQTs7O0dBQUFBLDJCQUFBQTs7VUFVQUM7Ozs7R0FBQUEsdUJBQUFBOztVQU1BQzs7Ozs7Ozs7Ozs7R0FBQUEsbUJBQUFBOztVQThDQUM7Ozs7Ozs7OztHQUFBQSxvQkFBQUE7O1VBV0FDOzs7O0dBQUFBLGtCQUFBQTs7VUFRQUM7OztHQUFBQSxxQkFBQUE7O1VBcUNBQzs7OztHQUFBQSxpQ0FBQUE7O1VBNkNBQzs7OztHQUFBQSwwQkFBQUE7O1VBWUFDOzs7Ozs7R0FBQUEsZ0JBQUFBOztVQVFBQzs7Ozs7Ozs7R0FBQUEsY0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvbW9kZWxzL2FkYXB0b3IudHM/ZTdiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBFcnJvcnMgZnJvbSAnQHNlcnZlci91dGlscy9lcnJvcic7XG5pbXBvcnQgeyBNYW5pZmVzdCB9IGZyb20gJ0BzZXJ2ZXIvbWRsL3R5cGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdyZW5BSUVycm9yIHtcbiAgY29kZTogRXJyb3JzLkdlbmVyYWxFcnJvckNvZGVzO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFdyZW5BSURlcGxveVN0YXR1c0VudW0ge1xuICBTVUNDRVNTID0gJ1NVQ0NFU1MnLFxuICBGQUlMRUQgPSAnRkFJTEVEJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXcmVuQUlEZXBsb3lSZXNwb25zZSB7XG4gIHN0YXR1czogV3JlbkFJRGVwbG95U3RhdHVzRW51bTtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIFdyZW5BSVN5c3RlbVN0YXR1cyB7XG4gIElOREVYSU5HID0gJ0lOREVYSU5HJyxcbiAgRklOSVNIRUQgPSAnRklOSVNIRUQnLFxuICBGQUlMRUQgPSAnRkFJTEVEJyxcbn1cblxuZXhwb3J0IGVudW0gV3JlbkFJTGFuZ3VhZ2Uge1xuICBFTiA9ICdFbmdsaXNoJyxcbiAgRVMgPSAnU3BhbmlzaCcsXG4gIEZSID0gJ0ZyZW5jaCcsXG4gIFpIX1RXID0gJ1RyYWRpdGlvbmFsIENoaW5lc2UnLFxuICBaSF9DTiA9ICdTaW1wbGlmaWVkIENoaW5lc2UnLFxuICBERSA9ICdHZXJtYW4nLFxuICBQVCA9ICdQb3J0dWd1ZXNlJyxcbiAgUlUgPSAnUnVzc2lhbicsXG4gIEpBID0gJ0phcGFuZXNlJyxcbiAgS08gPSAnS29yZWFuJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXBsb3lEYXRhIHtcbiAgbWFuaWZlc3Q6IE1hbmlmZXN0O1xuICBoYXNoOiBzdHJpbmc7XG59XG5cbi8vIGFza1xuZXhwb3J0IGludGVyZmFjZSBBc2tTdGVwIHtcbiAgc3VtbWFyeTogc3RyaW5nO1xuICBzcWw6IHN0cmluZztcbiAgY3RlTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFza0hpc3Rvcnkge1xuICBzcWw6IHN0cmluZztcbiAgc3RlcHM6IEFycmF5PEFza1N0ZXA+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFza0NvbmZpZ3VyYXRpb25zIHtcbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG4gIHRpbWV6b25lPzogeyBuYW1lOiBzdHJpbmcgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc2tJbnB1dCB7XG4gIHF1ZXJ5OiBzdHJpbmc7XG4gIGRlcGxveUlkOiBzdHJpbmc7XG4gIGhpc3Rvcnk/OiBBc2tIaXN0b3J5O1xuICBjb25maWd1cmF0aW9ucz86IEFza0NvbmZpZ3VyYXRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzeW5jUXVlcnlSZXNwb25zZSB7XG4gIHF1ZXJ5SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gQXNrUmVzdWx0U3RhdHVzIHtcbiAgVU5ERVJTVEFORElORyA9ICdVTkRFUlNUQU5ESU5HJyxcbiAgU0VBUkNISU5HID0gJ1NFQVJDSElORycsXG4gIFBMQU5OSU5HID0gJ1BMQU5OSU5HJyxcbiAgR0VORVJBVElORyA9ICdHRU5FUkFUSU5HJyxcbiAgQ09SUkVDVElORyA9ICdDT1JSRUNUSU5HJyxcbiAgRklOSVNIRUQgPSAnRklOSVNIRUQnLFxuICBGQUlMRUQgPSAnRkFJTEVEJyxcbiAgU1RPUFBFRCA9ICdTVE9QUEVEJyxcbn1cblxuZXhwb3J0IGVudW0gQXNrUmVzdWx0VHlwZSB7XG4gIEdFTkVSQUwgPSAnR0VORVJBTCcsXG4gIFRFWFRfVE9fU1FMID0gJ1RFWFRfVE9fU1FMJyxcbiAgTUlTTEVBRElOR19RVUVSWSA9ICdNSVNMRUFESU5HX1FVRVJZJyxcbn1cblxuLy8gaWYgaXQncyB2aWV3LCB2aWV3SWQgd2lsbCBiZSByZXR1cm5lZCBhcyB3ZWxsLiBJdCBtZWFucyB0aGUgY2FuZGlkYXRlIGlzIG9yaWdpbmFsbHkgc2F2ZWQgaW4gbWRsIGFzIGEgdmlldy5cbi8vIGlmIGl0J3MgbGxtLCB2aWV3SWQgd2lsbCBub3QgYmUgcmV0dXJuZWQuIEl0IG1lYW5zIHRoZSBjYW5kaWRhdGUgaXMgZ2VuZXJhdGVkIGJ5IEFJIHNlcnZpY2UuXG5leHBvcnQgZW51bSBBc2tDYW5kaWRhdGVUeXBlIHtcbiAgVklFVyA9ICdWSUVXJyxcbiAgTExNID0gJ0xMTScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNrUmVzcG9uc2U8UiwgUz4ge1xuICB0eXBlOiBBc2tSZXN1bHRUeXBlIHwgbnVsbDtcbiAgc3RhdHVzOiBTO1xuICByZXNwb25zZTogUiB8IG51bGw7XG4gIGVycm9yOiBXcmVuQUlFcnJvciB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNrRGV0YWlsSW5wdXQge1xuICBxdWVyeTogc3RyaW5nO1xuICBzcWw6IHN0cmluZztcbiAgY29uZmlndXJhdGlvbnM/OiBBc2tDb25maWd1cmF0aW9ucztcbn1cblxuZXhwb3J0IHR5cGUgQXNrRGV0YWlsUmVzdWx0ID0gQXNrUmVzcG9uc2U8XG4gIHtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIHN0ZXBzOiBBc2tTdGVwW107XG4gIH0sXG4gIEFza1Jlc3VsdFN0YXR1c1xuPjtcblxuZXhwb3J0IHR5cGUgQXNrUmVzdWx0ID0gQXNrUmVzcG9uc2U8XG4gIEFycmF5PHtcbiAgICB0eXBlOiBBc2tDYW5kaWRhdGVUeXBlO1xuICAgIHNxbDogc3RyaW5nO1xuICAgIHZpZXdJZD86IG51bWJlciB8IG51bGw7XG4gIH0+LFxuICBBc2tSZXN1bHRTdGF0dXNcbj4gJiB7XG4gIGludGVudFJlYXNvbmluZz86IHN0cmluZztcbn07XG5cbmV4cG9ydCBlbnVtIFJlY29tbWVuZGF0aW9uUXVlc3Rpb25TdGF0dXMge1xuICBHRU5FUkFUSU5HID0gJ0dFTkVSQVRJTkcnLFxuICBGSU5JU0hFRCA9ICdGSU5JU0hFRCcsXG4gIEZBSUxFRCA9ICdGQUlMRUQnLFxufVxuXG5leHBvcnQgdHlwZSBSZWNvbW1lbmRhdGlvblF1ZXN0aW9uc0lucHV0ID0ge1xuICAvLyBKU09OIHN0cmluZyBvZiB0aGUgTURMIChNb2RlbCBEZWZpbml0aW9uIExhbmd1YWdlKVxuICBtYW5pZmVzdDogTWFuaWZlc3Q7XG4gIC8vIE9wdGlvbmFsIGxpc3Qgb2YgcHJldmlvdXMgcXVlc3Rpb25zXG4gIHByZXZpb3VzUXVlc3Rpb25zPzogc3RyaW5nW107XG4gIC8vIE9wdGlvbmFsIHByb2plY3QgSURcbiAgcHJvamVjdElkPzogc3RyaW5nO1xuICAvLyBPcHRpb25hbCBtYXggbnVtYmVyIG9mIHF1ZXN0aW9ucyB0byBnZW5lcmF0ZSAoZGVmYXVsdDogNSlcbiAgbWF4UXVlc3Rpb25zPzogbnVtYmVyO1xuICAvLyBPcHRpb25hbCBtYXggbnVtYmVyIG9mIGNhdGVnb3JpZXMgKGRlZmF1bHQ6IDMpXG4gIG1heENhdGVnb3JpZXM/OiBudW1iZXI7XG4gIHJlZ2VuZXJhdGU/OiBib29sZWFuOyAvLyBPcHRpb25hbCByZWdlbmVyYXRlIHF1ZXN0aW9ucyAoZGVmYXVsdDogZmFsc2UpXG4gIC8vIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3NcbiAgY29uZmlndXJhdGlvbj86IEFza0NvbmZpZ3VyYXRpb25zO1xufTtcblxuZXhwb3J0IHR5cGUgUmVjb21tZW5kYXRpb25RdWVzdGlvbiA9IHtcbiAgcXVlc3Rpb246IHN0cmluZztcbiAgY2F0ZWdvcnk6IHN0cmluZzsgLy8gY2F0ZWdvcnkgZm9yIHRoZSBxdWVzdGlvblxuICBzcWw6IHN0cmluZzsgLy8gdmFsaWRhdGVkIHNxbCBmb3IgdGhpcyBxdWVzdGlvbiwgY2FuIGJlIHVzZWQgaW4gZ2VuZXJhdGVBc2tEZXRhaWxcbn07XG5cbmV4cG9ydCB0eXBlIFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zUmVzdWx0ID0gQXNrUmVzcG9uc2U8XG4gIHtcbiAgICBxdWVzdGlvbnM6IFJlY29tbWVuZGF0aW9uUXVlc3Rpb25bXTtcbiAgfSxcbiAgUmVjb21tZW5kYXRpb25RdWVzdGlvblN0YXR1c1xuPjtcblxuLy8gdGV4dC1iYXNlZCBhbnN3ZXJcbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEJhc2VkQW5zd2VySW5wdXQge1xuICBxdWVyeTogc3RyaW5nO1xuICBzcWw6IHN0cmluZztcbiAgc3FsRGF0YTogYW55O1xuICB0aHJlYWRJZD86IHN0cmluZztcbiAgdXNlcklkPzogc3RyaW5nO1xuICBjb25maWd1cmF0aW9ucz86IEFza0NvbmZpZ3VyYXRpb25zO1xufVxuXG5leHBvcnQgZW51bSBUZXh0QmFzZWRBbnN3ZXJTdGF0dXMge1xuICBQUkVQUk9DRVNTSU5HID0gJ1BSRVBST0NFU1NJTkcnLFxuICBTVUNDRUVERUQgPSAnU1VDQ0VFREVEJyxcbiAgRkFJTEVEID0gJ0ZBSUxFRCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dEJhc2VkQW5zd2VyUmVzdWx0IHtcbiAgc3RhdHVzOiBUZXh0QmFzZWRBbnN3ZXJTdGF0dXM7XG4gIG51bVJvd3NVc2VkSW5MTE0/OiBudW1iZXI7XG4gIGVycm9yPzogV3JlbkFJRXJyb3I7XG59XG5cbmV4cG9ydCBlbnVtIENoYXJ0U3RhdHVzIHtcbiAgRkVUQ0hJTkcgPSAnRkVUQ0hJTkcnLFxuICBHRU5FUkFUSU5HID0gJ0dFTkVSQVRJTkcnLFxuICBGSU5JU0hFRCA9ICdGSU5JU0hFRCcsXG4gIEZBSUxFRCA9ICdGQUlMRUQnLFxuICBTVE9QUEVEID0gJ1NUT1BQRUQnLFxufVxuXG5leHBvcnQgZW51bSBDaGFydFR5cGUge1xuICBCQVIgPSAnYmFyJyxcbiAgR1JPVVBFRF9CQVIgPSAnZ3JvdXBlZF9iYXInLFxuICBTVEFDS0VEX0JBUiA9ICdzdGFja2VkX2JhcicsXG4gIExJTkUgPSAnbGluZScsXG4gIE1VTFRJX0xJTkUgPSAnbXVsdGlfbGluZScsXG4gIFBJRSA9ICdwaWUnLFxuICBBUkVBID0gJ2FyZWEnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0SW5wdXQge1xuICBxdWVyeTogc3RyaW5nO1xuICBzcWw6IHN0cmluZztcbiAgcHJvamVjdElkPzogc3RyaW5nO1xuICBjb25maWd1cmF0aW9ucz86IEFza0NvbmZpZ3VyYXRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0QWRqdXN0bWVudE9wdGlvbiB7XG4gIGNoYXJ0VHlwZTogQ2hhcnRUeXBlO1xuICB4QXhpcz86IHN0cmluZztcbiAgeUF4aXM/OiBzdHJpbmc7XG4gIHhPZmZzZXQ/OiBzdHJpbmc7XG4gIGNvbG9yPzogc3RyaW5nO1xuICB0aGV0YT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFydEFkanVzdG1lbnRJbnB1dCB7XG4gIHF1ZXJ5OiBzdHJpbmc7XG4gIHNxbDogc3RyaW5nO1xuICBhZGp1c3RtZW50T3B0aW9uOiBDaGFydEFkanVzdG1lbnRPcHRpb247XG4gIGNoYXJ0U2NoZW1hOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBwcm9qZWN0SWQ/OiBzdHJpbmc7XG4gIGNvbmZpZ3VyYXRpb25zPzogQXNrQ29uZmlndXJhdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRSZXNwb25zZSB7XG4gIHJlYXNvbmluZzogc3RyaW5nO1xuICBjaGFydFR5cGU6IENoYXJ0VHlwZTtcbiAgY2hhcnRTY2hlbWE6IFJlY29yZDxzdHJpbmcsIGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRSZXN1bHQge1xuICBzdGF0dXM6IENoYXJ0U3RhdHVzO1xuICByZXNwb25zZT86IENoYXJ0UmVzcG9uc2U7XG4gIGVycm9yPzogV3JlbkFJRXJyb3I7XG59XG4iXSwibmFtZXMiOlsiV3JlbkFJRGVwbG95U3RhdHVzRW51bSIsIldyZW5BSVN5c3RlbVN0YXR1cyIsIldyZW5BSUxhbmd1YWdlIiwiQXNrUmVzdWx0U3RhdHVzIiwiQXNrUmVzdWx0VHlwZSIsIkFza0NhbmRpZGF0ZVR5cGUiLCJSZWNvbW1lbmRhdGlvblF1ZXN0aW9uU3RhdHVzIiwiVGV4dEJhc2VkQW5zd2VyU3RhdHVzIiwiQ2hhcnRTdGF0dXMiLCJDaGFydFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/models/adaptor.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/models/index.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/models/index.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ \"(api)/./src/apollo/server/models/model.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _model__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _model__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9tb2RlbHMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvbW9kZWxzL2luZGV4LnRzPzc1MjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9tb2RlbCc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/models/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/models/model.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/models/model.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionName: () => (/* binding */ ExpressionName)\n/* harmony export */ });\nvar ExpressionName;\n(function(ExpressionName) {\n    ExpressionName[\"ABS\"] = \"ABS\";\n    ExpressionName[\"AVG\"] = \"AVG\";\n    ExpressionName[\"COUNT\"] = \"COUNT\";\n    ExpressionName[\"MAX\"] = \"MAX\";\n    ExpressionName[\"MIN\"] = \"MIN\";\n    ExpressionName[\"SUM\"] = \"SUM\";\n    ExpressionName[\"CBRT\"] = \"CBRT\";\n    ExpressionName[\"CEIL\"] = \"CEIL\";\n    ExpressionName[\"EXP\"] = \"EXP\";\n    ExpressionName[\"FLOOR\"] = \"FLOOR\";\n    ExpressionName[\"LN\"] = \"LN\";\n    ExpressionName[\"LOG10\"] = \"LOG10\";\n    ExpressionName[\"ROUND\"] = \"ROUND\";\n    ExpressionName[\"SIGN\"] = \"SIGN\";\n    ExpressionName[\"LENGTH\"] = \"LENGTH\";\n    ExpressionName[\"REVERSE\"] = \"REVERSE\";\n})(ExpressionName || (ExpressionName = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9tb2RlbHMvbW9kZWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7VUFxRFlBOzs7Ozs7Ozs7Ozs7Ozs7OztHQUFBQSxtQkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvbW9kZWxzL21vZGVsLnRzPzk4NzUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBDcmVhdGVNb2RlbERhdGEge1xuICBzb3VyY2VUYWJsZU5hbWU6IHN0cmluZztcbiAgZmllbGRzOiBbc3RyaW5nXTtcbiAgcHJpbWFyeUtleTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZU1vZGVsRGF0YSB7XG4gIGZpZWxkczogW3N0cmluZ107XG4gIHByaW1hcnlLZXk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOZXN0ZWRDb2x1bW5NZXRhZGF0YUlucHV0IHtcbiAgaWQ6IG51bWJlcjtcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2x1bW5NZXRhZGF0YUlucHV0IHtcbiAgaWQ6IG51bWJlcjtcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWxjdWxhdGVkRmllbGRNZXRhZGF0YUlucHV0IHtcbiAgaWQ6IG51bWJlcjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWxhdGlvbnNoaXBNZXRhZGF0YUlucHV0IHtcbiAgaWQ6IG51bWJlcjtcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaWV3Q29sdW1uTWV0YWRhdGFJbnB1dCB7XG4gIHJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVNb2RlbE1ldGFkYXRhSW5wdXQge1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBjb2x1bW5zOiBBcnJheTxDb2x1bW5NZXRhZGF0YUlucHV0PjtcbiAgbmVzdGVkQ29sdW1uczogQXJyYXk8TmVzdGVkQ29sdW1uTWV0YWRhdGFJbnB1dD47XG4gIGNhbGN1bGF0ZWRGaWVsZHM6IEFycmF5PENhbGN1bGF0ZWRGaWVsZE1ldGFkYXRhSW5wdXQ+O1xuICByZWxhdGlvbnNoaXBzOiBBcnJheTxSZWxhdGlvbnNoaXBNZXRhZGF0YUlucHV0Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVWaWV3TWV0YWRhdGFJbnB1dCB7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNvbHVtbnM6IEFycmF5PFZpZXdDb2x1bW5NZXRhZGF0YUlucHV0Pjtcbn1cblxuZXhwb3J0IGVudW0gRXhwcmVzc2lvbk5hbWUge1xuICBBQlMgPSAnQUJTJyxcbiAgQVZHID0gJ0FWRycsXG4gIENPVU5UID0gJ0NPVU5UJyxcbiAgTUFYID0gJ01BWCcsXG4gIE1JTiA9ICdNSU4nLFxuICBTVU0gPSAnU1VNJyxcbiAgQ0JSVCA9ICdDQlJUJyxcbiAgQ0VJTCA9ICdDRUlMJyxcbiAgRVhQID0gJ0VYUCcsXG4gIEZMT09SID0gJ0ZMT09SJyxcbiAgTE4gPSAnTE4nLFxuICBMT0cxMCA9ICdMT0cxMCcsXG4gIFJPVU5EID0gJ1JPVU5EJyxcbiAgU0lHTiA9ICdTSUdOJyxcbiAgTEVOR1RIID0gJ0xFTkdUSCcsXG4gIFJFVkVSU0UgPSAnUkVWRVJTRScsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlQ2FsY3VsYXRlZEZpZWxkRGF0YSB7XG4gIG1vZGVsSWQ6IG51bWJlcjtcbiAgbmFtZTogc3RyaW5nOyAvL2Rpc3BsYXlOYW1lXG4gIGV4cHJlc3Npb246IEV4cHJlc3Npb25OYW1lO1xuICBsaW5lYWdlOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGRhdGVDYWxjdWxhdGVkRmllbGREYXRhIHtcbiAgbmFtZTogc3RyaW5nOyAvL2Rpc3BsYXlOYW1lXG4gIGV4cHJlc3Npb246IEV4cHJlc3Npb25OYW1lO1xuICBsaW5lYWdlOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGVja0NhbGN1bGF0ZWRGaWVsZENhblF1ZXJ5RGF0YSB7XG4gIHJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgZXhwcmVzc2lvbjogRXhwcmVzc2lvbk5hbWU7XG4gIGxpbmVhZ2U6IG51bWJlcltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpZXdTUUxEYXRhIHtcbiAgc3FsOiBzdHJpbmc7XG4gIHByb2plY3RJZD86IG51bWJlcjtcbiAgbGltaXQ/OiBudW1iZXI7XG4gIGRyeVJ1bj86IGJvb2xlYW47XG59XG4iXSwibmFtZXMiOlsiRXhwcmVzc2lvbk5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/models/model.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/baseRepository.ts":
/*!**********************************************************!*\
  !*** ./src/apollo/server/repositories/baseRepository.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRepository: () => (/* binding */ BaseRepository)\n/* harmony export */ });\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nclass BaseRepository {\n    constructor({ knexPg, tableName }){\n        this.deleteAllBy = async (where, queryOptions)=>{\n            const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n            const builder = executer(this.tableName).where(this.transformToDBData(where)).delete();\n            return await builder;\n        };\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_2___default()(data, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3___default()(key));\n        };\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_1___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_2___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_0___default()(key));\n            return camelCaseData;\n        };\n        this.knex = knexPg;\n        this.tableName = tableName;\n    }\n    async transaction() {\n        return await this.knex.transaction();\n    }\n    async commit(tx) {\n        await tx.commit();\n    }\n    async rollback(tx) {\n        await tx.rollback();\n    }\n    async findOneBy(filter, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const query = executer(this.tableName).where(this.transformToDBData(filter));\n        if (queryOptions?.limit) {\n            query.limit(queryOptions.limit);\n        }\n        const result = [];\n        return result && result.length > 0 ? this.transformFromDBData(result[0]) : null;\n    }\n    async findAllBy(filter, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        // format filter keys to snake_case\n        const query = executer(this.tableName).where(this.transformToDBData(filter));\n        if (queryOptions?.order) {\n            query.orderBy(queryOptions.order);\n        }\n        const result = await query;\n        return result.map(this.transformFromDBData);\n    }\n    async findAll(queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const query = executer(this.tableName);\n        if (queryOptions?.order) {\n            query.orderBy(queryOptions.order);\n        }\n        if (queryOptions?.limit) {\n            query.limit(queryOptions.limit);\n        }\n        const result = await query;\n        return result.map(this.transformFromDBData);\n    }\n    async createOne(data, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const [result] = await executer(this.tableName).insert(this.transformToDBData(data)).returning(\"*\");\n        return this.transformFromDBData(result);\n    }\n    async createMany(data, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const batchSize = 100;\n        const batchCount = Math.ceil(data.length / batchSize);\n        const result = [];\n        for(let i = 0; i < batchCount; i++){\n            const start = i * batchSize;\n            const end = Math.min((i + 1) * batchSize, data.length);\n            const batchValues = data.slice(start, end);\n            const chunk = await executer(this.tableName).insert(batchValues.map(this.transformToDBData)).returning(\"*\");\n            result.push(...chunk);\n        }\n        return result.map((data)=>this.transformFromDBData(data));\n    }\n    async updateOne(id, data, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const [result] = await executer(this.tableName).where({\n            id\n        }).update(this.transformToDBData(data)).returning(\"*\");\n        return this.transformFromDBData(result);\n    }\n    async deleteOne(id, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const builder = executer.from(this.tableName).where({\n            id\n        }).delete();\n        return await builder;\n    }\n    async deleteMany(ids, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const builder = executer.from(this.tableName).whereIn(\"id\", ids).delete();\n        return await builder;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/baseRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/dashboardItemRepository.ts":
/*!*******************************************************************!*\
  !*** ./src/apollo/server/repositories/dashboardItemRepository.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DashboardItemRepository: () => (/* binding */ DashboardItemRepository),\n/* harmony export */   DashboardItemType: () => (/* binding */ DashboardItemType)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nvar DashboardItemType;\n(function(DashboardItemType) {\n    // AI chart types, refer to ChartType in adaptor.ts\n    DashboardItemType[\"AREA\"] = \"AREA\";\n    DashboardItemType[\"BAR\"] = \"BAR\";\n    DashboardItemType[\"GROUPED_BAR\"] = \"GROUPED_BAR\";\n    DashboardItemType[\"LINE\"] = \"LINE\";\n    DashboardItemType[\"PIE\"] = \"PIE\";\n    DashboardItemType[\"STACKED_BAR\"] = \"STACKED_BAR\";\n    // other types\n    DashboardItemType[\"TABLE\"] = \"TABLE\";\n    DashboardItemType[\"NUMBER\"] = \"NUMBER\";\n})(DashboardItemType || (DashboardItemType = {}));\nclass DashboardItemRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"dashboard_item\"\n        });\n        this.jsonbColumns = [\n            \"layout\",\n            \"detail\"\n        ];\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const transformData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if (this.jsonbColumns.includes(key)) {\n                    if (typeof value === \"string\") {\n                        return value ? JSON.parse(value) : value;\n                    } else {\n                        return value;\n                    }\n                }\n                return value;\n            });\n            return transformData;\n        };\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const transformedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(data, (value, key)=>{\n                if (this.jsonbColumns.includes(key)) {\n                    return JSON.stringify(value);\n                } else {\n                    return value;\n                }\n            });\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(transformedData, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default()(key));\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvZGFzaGJvYXJkSXRlbVJlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUNvRTtBQU9wRDtBQUFBO0FBQUE7QUFBQTtBQUFBOztVQUVKTTtJQUNWLG1EQUFtRDs7Ozs7OztJQU9uRCxjQUFjOzs7R0FSSkEsc0JBQUFBO0FBb0NMLE1BQU1DLGdDQUNIUCwyREFBY0E7SUFLdEJRLFlBQVlDLE1BQVksQ0FBRTtRQUN4QixLQUFLLENBQUM7WUFBRUE7WUFBUUMsV0FBVztRQUFpQjthQUg3QkMsZUFBZTtZQUFDO1lBQVU7U0FBUzthQU1qQ0Msc0JBQXNCLENBQUNDO1lBQ3hDLElBQUksQ0FBQ1gsMkRBQWFBLENBQUNXLE9BQU87Z0JBQ3hCLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUNBLE1BQU1DLGdCQUFnQloscURBQU9BLENBQUNVLE1BQU0sQ0FBQ0csUUFBUUMsTUFBUWhCLHVEQUFTQSxDQUFDZ0I7WUFDL0QsTUFBTUMsZ0JBQWdCZCx1REFBU0EsQ0FBQ1csZUFBZSxDQUFDSSxPQUFPRjtnQkFDckQsSUFBSSxJQUFJLENBQUNOLFlBQVksQ0FBQ1MsUUFBUSxDQUFDSCxNQUFNO29CQUNuQyxJQUFJLE9BQU9FLFVBQVUsVUFBVTt3QkFDN0IsT0FBT0EsUUFBUUUsS0FBS0MsS0FBSyxDQUFDSCxTQUFTQTtvQkFDckMsT0FBTzt3QkFDTCxPQUFPQTtvQkFDVDtnQkFDRjtnQkFDQSxPQUFPQTtZQUNUO1lBQ0EsT0FBT0Q7UUFDVDthQUVtQkssb0JBQW9CLENBQUNWO1lBQ3RDLElBQUksQ0FBQ1gsMkRBQWFBLENBQUNXLE9BQU87Z0JBQ3hCLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUNBLE1BQU1VLGtCQUFrQnBCLHVEQUFTQSxDQUFDUyxNQUFNLENBQUNNLE9BQU9GO2dCQUM5QyxJQUFJLElBQUksQ0FBQ04sWUFBWSxDQUFDUyxRQUFRLENBQUNILE1BQU07b0JBQ25DLE9BQU9JLEtBQUtJLFNBQVMsQ0FBQ047Z0JBQ3hCLE9BQU87b0JBQ0wsT0FBT0E7Z0JBQ1Q7WUFDRjtZQUNBLE9BQU9oQixxREFBT0EsQ0FBQ3FCLGlCQUFpQixDQUFDUixRQUFRQyxNQUFRWix1REFBU0EsQ0FBQ1k7UUFDN0Q7SUFoQ0E7QUFpQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL2Rhc2hib2FyZEl0ZW1SZXBvc2l0b3J5LnRzPzFjOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS25leCB9IGZyb20gJ2tuZXgnO1xuaW1wb3J0IHsgQmFzZVJlcG9zaXRvcnksIElCYXNpY1JlcG9zaXRvcnkgfSBmcm9tICcuL2Jhc2VSZXBvc2l0b3J5JztcbmltcG9ydCB7XG4gIGNhbWVsQ2FzZSxcbiAgaXNQbGFpbk9iamVjdCxcbiAgbWFwS2V5cyxcbiAgbWFwVmFsdWVzLFxuICBzbmFrZUNhc2UsXG59IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBlbnVtIERhc2hib2FyZEl0ZW1UeXBlIHtcbiAgLy8gQUkgY2hhcnQgdHlwZXMsIHJlZmVyIHRvIENoYXJ0VHlwZSBpbiBhZGFwdG9yLnRzXG4gIEFSRUEgPSAnQVJFQScsXG4gIEJBUiA9ICdCQVInLFxuICBHUk9VUEVEX0JBUiA9ICdHUk9VUEVEX0JBUicsXG4gIExJTkUgPSAnTElORScsXG4gIFBJRSA9ICdQSUUnLFxuICBTVEFDS0VEX0JBUiA9ICdTVEFDS0VEX0JBUicsXG4gIC8vIG90aGVyIHR5cGVzXG4gIFRBQkxFID0gJ1RBQkxFJyxcbiAgTlVNQkVSID0gJ05VTUJFUicsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGFzaGJvYXJkSXRlbUxheW91dCB7XG4gIHg6IG51bWJlcjtcbiAgeTogbnVtYmVyO1xuICB3OiBudW1iZXI7XG4gIGg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXNoYm9hcmRJdGVtRGV0YWlsIHtcbiAgc3FsOiBzdHJpbmc7XG4gIGNoYXJ0U2NoZW1hPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXNoYm9hcmRJdGVtIHtcbiAgaWQ6IG51bWJlcjtcbiAgZGFzaGJvYXJkSWQ6IG51bWJlcjtcbiAgdHlwZTogRGFzaGJvYXJkSXRlbVR5cGU7XG4gIGxheW91dDogRGFzaGJvYXJkSXRlbUxheW91dDtcbiAgZGV0YWlsOiBEYXNoYm9hcmRJdGVtRGV0YWlsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXNoYm9hcmRJdGVtUmVwb3NpdG9yeVxuICBleHRlbmRzIElCYXNpY1JlcG9zaXRvcnk8RGFzaGJvYXJkSXRlbT4ge31cblxuZXhwb3J0IGNsYXNzIERhc2hib2FyZEl0ZW1SZXBvc2l0b3J5XG4gIGV4dGVuZHMgQmFzZVJlcG9zaXRvcnk8RGFzaGJvYXJkSXRlbT5cbiAgaW1wbGVtZW50cyBJRGFzaGJvYXJkSXRlbVJlcG9zaXRvcnlcbntcbiAgcHJpdmF0ZSByZWFkb25seSBqc29uYkNvbHVtbnMgPSBbJ2xheW91dCcsICdkZXRhaWwnXTtcblxuICBjb25zdHJ1Y3RvcihrbmV4UGc6IEtuZXgpIHtcbiAgICBzdXBlcih7IGtuZXhQZywgdGFibGVOYW1lOiAnZGFzaGJvYXJkX2l0ZW0nIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHRyYW5zZm9ybUZyb21EQkRhdGEgPSAoZGF0YTogYW55KSA9PiB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZGJkYXRhJyk7XG4gICAgfVxuICAgIGNvbnN0IGNhbWVsQ2FzZURhdGEgPSBtYXBLZXlzKGRhdGEsIChfdmFsdWUsIGtleSkgPT4gY2FtZWxDYXNlKGtleSkpO1xuICAgIGNvbnN0IHRyYW5zZm9ybURhdGEgPSBtYXBWYWx1ZXMoY2FtZWxDYXNlRGF0YSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLmpzb25iQ29sdW1ucy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJhbnNmb3JtRGF0YSBhcyBEYXNoYm9hcmRJdGVtO1xuICB9O1xuXG4gIHByb3RlY3RlZCBvdmVycmlkZSB0cmFuc2Zvcm1Ub0RCRGF0YSA9IChkYXRhOiBhbnkpID0+IHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBkYmRhdGEnKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtZWREYXRhID0gbWFwVmFsdWVzKGRhdGEsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAodGhpcy5qc29uYkNvbHVtbnMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXBLZXlzKHRyYW5zZm9ybWVkRGF0YSwgKF92YWx1ZSwga2V5KSA9PiBzbmFrZUNhc2Uoa2V5KSk7XG4gIH07XG59XG4iXSwibmFtZXMiOlsiQmFzZVJlcG9zaXRvcnkiLCJjYW1lbENhc2UiLCJpc1BsYWluT2JqZWN0IiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsInNuYWtlQ2FzZSIsIkRhc2hib2FyZEl0ZW1UeXBlIiwiRGFzaGJvYXJkSXRlbVJlcG9zaXRvcnkiLCJjb25zdHJ1Y3RvciIsImtuZXhQZyIsInRhYmxlTmFtZSIsImpzb25iQ29sdW1ucyIsInRyYW5zZm9ybUZyb21EQkRhdGEiLCJkYXRhIiwiRXJyb3IiLCJjYW1lbENhc2VEYXRhIiwiX3ZhbHVlIiwia2V5IiwidHJhbnNmb3JtRGF0YSIsInZhbHVlIiwiaW5jbHVkZXMiLCJKU09OIiwicGFyc2UiLCJ0cmFuc2Zvcm1Ub0RCRGF0YSIsInRyYW5zZm9ybWVkRGF0YSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/dashboardItemRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/dashboardRepository.ts":
/*!***************************************************************!*\
  !*** ./src/apollo/server/repositories/dashboardRepository.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DashboardRepository: () => (/* binding */ DashboardRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass DashboardRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"dashboard\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvZGFzaGJvYXJkUmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUNvRTtBQVU3RCxNQUFNQyw0QkFDSEQsMkRBQWNBO0lBR3RCRSxZQUFZQyxNQUFZLENBQUU7UUFDeEIsS0FBSyxDQUFDO1lBQUVBO1lBQVFDLFdBQVc7UUFBWTtJQUN6QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3JlcG9zaXRvcmllcy9kYXNoYm9hcmRSZXBvc2l0b3J5LnRzPzU1MWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS25leCB9IGZyb20gJ2tuZXgnO1xuaW1wb3J0IHsgQmFzZVJlcG9zaXRvcnksIElCYXNpY1JlcG9zaXRvcnkgfSBmcm9tICcuL2Jhc2VSZXBvc2l0b3J5JztcblxuZXhwb3J0IGludGVyZmFjZSBEYXNoYm9hcmQge1xuICBpZDogbnVtYmVyO1xuICBwcm9qZWN0SWQ6IG51bWJlcjtcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXNoYm9hcmRSZXBvc2l0b3J5IGV4dGVuZHMgSUJhc2ljUmVwb3NpdG9yeTxEYXNoYm9hcmQ+IHt9XG5cbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRSZXBvc2l0b3J5XG4gIGV4dGVuZHMgQmFzZVJlcG9zaXRvcnk8RGFzaGJvYXJkPlxuICBpbXBsZW1lbnRzIElEYXNoYm9hcmRSZXBvc2l0b3J5XG57XG4gIGNvbnN0cnVjdG9yKGtuZXhQZzogS25leCkge1xuICAgIHN1cGVyKHsga25leFBnLCB0YWJsZU5hbWU6ICdkYXNoYm9hcmQnIH0pO1xuICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVJlcG9zaXRvcnkiLCJEYXNoYm9hcmRSZXBvc2l0b3J5IiwiY29uc3RydWN0b3IiLCJrbmV4UGciLCJ0YWJsZU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/dashboardRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/deployLogRepository.ts":
/*!***************************************************************!*\
  !*** ./src/apollo/server/repositories/deployLogRepository.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeployLogRepository: () => (/* binding */ DeployLogRepository),\n/* harmony export */   DeployStatusEnum: () => (/* binding */ DeployStatusEnum)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nvar DeployStatusEnum;\n(function(DeployStatusEnum) {\n    DeployStatusEnum[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    DeployStatusEnum[\"SUCCESS\"] = \"SUCCESS\";\n    DeployStatusEnum[\"FAILED\"] = \"FAILED\";\n})(DeployStatusEnum || (DeployStatusEnum = {}));\nclass DeployLogRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"deploy_log\"\n        });\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if ([\n                    \"manifest\"\n                ].includes(key)) {\n                    // sqlite return a string for json field, but postgres return an object\n                    return typeof value === \"string\" ? JSON.parse(value) : value;\n                }\n                return value;\n            });\n            return formattedData;\n        };\n    }\n    async findLastProjectDeployLog(projectId) {\n        const res = await this.knex.select(\"*\").from(this.tableName).where(this.transformToDBData({\n            projectId,\n            status: \"SUCCESS\"\n        })).orderBy(\"created_at\", \"desc\").first();\n        return res && this.transformFromDBData(res) || null;\n    }\n    async findInProgressProjectDeployLog(projectId) {\n        const res = await this.knex.select(\"*\").from(this.tableName).where(this.transformToDBData({\n            projectId,\n            status: \"IN_PROGRESS\"\n        })).orderBy(\"created_at\", \"desc\").first();\n        return res && this.transformFromDBData(res) || null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvZGVwbG95TG9nUmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUNvRTtBQUNFO0FBQUE7QUFBQTtBQUFBOztVQVcxREs7Ozs7R0FBQUEscUJBQUFBO0FBV0wsTUFBTUMsNEJBQ0hOLDJEQUFjQTtJQUd0Qk8sWUFBWUMsTUFBWSxDQUFFO1FBQ3hCLEtBQUssQ0FBQztZQUFFQTtZQUFRQyxXQUFXO1FBQWE7YUE4QjFCQyxzQkFBNkMsQ0FBQ0M7WUFDNUQsSUFBSSxDQUFDVCwyREFBYUEsQ0FBQ1MsT0FBTztnQkFDeEIsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBQ0EsTUFBTUMsZ0JBQWdCVixxREFBT0EsQ0FBQ1EsTUFBTSxDQUFDRyxRQUFRQyxNQUFRZCx1REFBU0EsQ0FBQ2M7WUFDL0QsTUFBTUMsZ0JBQWdCWix1REFBU0EsQ0FBQ1MsZUFBZSxDQUFDSSxPQUFPRjtnQkFDckQsSUFBSTtvQkFBQztpQkFBVyxDQUFDRyxRQUFRLENBQUNILE1BQU07b0JBQzlCLHVFQUF1RTtvQkFDdkUsT0FBTyxPQUFPRSxVQUFVLFdBQVdFLEtBQUtDLEtBQUssQ0FBQ0gsU0FBU0E7Z0JBQ3pEO2dCQUNBLE9BQU9BO1lBQ1Q7WUFDQSxPQUFPRDtRQUNUO0lBMUNBO0lBRUEsTUFBYUsseUJBQXlCQyxTQUFpQixFQUFFO1FBQ3ZELE1BQU1DLE1BQU0sTUFBTSxJQUFJLENBQUNDLElBQUksQ0FDeEJDLE1BQU0sQ0FBQyxLQUNQQyxJQUFJLENBQUMsSUFBSSxDQUFDakIsU0FBUyxFQUNuQmtCLEtBQUssQ0FDSixJQUFJLENBQUNDLGlCQUFpQixDQUFDO1lBQUVOO1lBQVdPLE1BQU07UUFBMkIsSUFFdEVDLE9BQU8sQ0FBQyxjQUFjLFFBQ3RCQyxLQUFLO1FBQ1IsT0FBTyxPQUFRLElBQUksQ0FBQ3JCLG1CQUFtQixDQUFDYSxRQUFTO0lBQ25EO0lBRUEsTUFBYVMsK0JBQStCVixTQUFpQixFQUFFO1FBQzdELE1BQU1DLE1BQU0sTUFBTSxJQUFJLENBQUNDLElBQUksQ0FDeEJDLE1BQU0sQ0FBQyxLQUNQQyxJQUFJLENBQUMsSUFBSSxDQUFDakIsU0FBUyxFQUNuQmtCLEtBQUssQ0FDSixJQUFJLENBQUNDLGlCQUFpQixDQUFDO1lBQ3JCTjtZQUNBTyxNQUFNO1FBQ1IsSUFFREMsT0FBTyxDQUFDLGNBQWMsUUFDdEJDLEtBQUs7UUFDUixPQUFPLE9BQVEsSUFBSSxDQUFDckIsbUJBQW1CLENBQUNhLFFBQVM7SUFDbkQ7QUFnQkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL2RlcGxveUxvZ1JlcG9zaXRvcnkudHM/YTc5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCc7XG5pbXBvcnQgeyBCYXNlUmVwb3NpdG9yeSwgSUJhc2ljUmVwb3NpdG9yeSB9IGZyb20gJy4vYmFzZVJlcG9zaXRvcnknO1xuaW1wb3J0IHsgY2FtZWxDYXNlLCBpc1BsYWluT2JqZWN0LCBtYXBLZXlzLCBtYXBWYWx1ZXMgfSBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlcGxveSB7XG4gIGlkOiBudW1iZXI7IC8vIElEXG4gIHByb2plY3RJZDogbnVtYmVyOyAvLyBSZWZlcmVuY2UgdG8gcHJvamVjdC5pZFxuICBtYW5pZmVzdDogb2JqZWN0OyAvLyBNb2RlbCBtYW5pZmVzdFxuICBoYXNoOiBzdHJpbmc7XG4gIHN0YXR1czogc3RyaW5nOyAvLyBEZXBsb3kgc3RhdHVzXG4gIGVycm9yOiBzdHJpbmc7IC8vIEVycm9yIG1lc3NhZ2Vcbn1cblxuZXhwb3J0IGVudW0gRGVwbG95U3RhdHVzRW51bSB7XG4gIElOX1BST0dSRVNTID0gJ0lOX1BST0dSRVNTJyxcbiAgU1VDQ0VTUyA9ICdTVUNDRVNTJyxcbiAgRkFJTEVEID0gJ0ZBSUxFRCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlcGxveUxvZ1JlcG9zaXRvcnkgZXh0ZW5kcyBJQmFzaWNSZXBvc2l0b3J5PERlcGxveT4ge1xuICBmaW5kTGFzdFByb2plY3REZXBsb3lMb2cocHJvamVjdElkOiBudW1iZXIpOiBQcm9taXNlPERlcGxveSB8IG51bGw+O1xuICBmaW5kSW5Qcm9ncmVzc1Byb2plY3REZXBsb3lMb2cocHJvamVjdElkOiBudW1iZXIpOiBQcm9taXNlPERlcGxveSB8IG51bGw+O1xufVxuXG5leHBvcnQgY2xhc3MgRGVwbG95TG9nUmVwb3NpdG9yeVxuICBleHRlbmRzIEJhc2VSZXBvc2l0b3J5PERlcGxveT5cbiAgaW1wbGVtZW50cyBJRGVwbG95TG9nUmVwb3NpdG9yeVxue1xuICBjb25zdHJ1Y3RvcihrbmV4UGc6IEtuZXgpIHtcbiAgICBzdXBlcih7IGtuZXhQZywgdGFibGVOYW1lOiAnZGVwbG95X2xvZycgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmluZExhc3RQcm9qZWN0RGVwbG95TG9nKHByb2plY3RJZDogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5rbmV4XG4gICAgICAuc2VsZWN0KCcqJylcbiAgICAgIC5mcm9tKHRoaXMudGFibGVOYW1lKVxuICAgICAgLndoZXJlKFxuICAgICAgICB0aGlzLnRyYW5zZm9ybVRvREJEYXRhKHsgcHJvamVjdElkLCBzdGF0dXM6IERlcGxveVN0YXR1c0VudW0uU1VDQ0VTUyB9KSxcbiAgICAgIClcbiAgICAgIC5vcmRlckJ5KCdjcmVhdGVkX2F0JywgJ2Rlc2MnKVxuICAgICAgLmZpcnN0KCk7XG4gICAgcmV0dXJuIChyZXMgJiYgdGhpcy50cmFuc2Zvcm1Gcm9tREJEYXRhKHJlcykpIHx8IG51bGw7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmluZEluUHJvZ3Jlc3NQcm9qZWN0RGVwbG95TG9nKHByb2plY3RJZDogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5rbmV4XG4gICAgICAuc2VsZWN0KCcqJylcbiAgICAgIC5mcm9tKHRoaXMudGFibGVOYW1lKVxuICAgICAgLndoZXJlKFxuICAgICAgICB0aGlzLnRyYW5zZm9ybVRvREJEYXRhKHtcbiAgICAgICAgICBwcm9qZWN0SWQsXG4gICAgICAgICAgc3RhdHVzOiBEZXBsb3lTdGF0dXNFbnVtLklOX1BST0dSRVNTLFxuICAgICAgICB9KSxcbiAgICAgIClcbiAgICAgIC5vcmRlckJ5KCdjcmVhdGVkX2F0JywgJ2Rlc2MnKVxuICAgICAgLmZpcnN0KCk7XG4gICAgcmV0dXJuIChyZXMgJiYgdGhpcy50cmFuc2Zvcm1Gcm9tREJEYXRhKHJlcykpIHx8IG51bGw7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdHJhbnNmb3JtRnJvbURCRGF0YTogKGRhdGE6IGFueSkgPT4gRGVwbG95ID0gKGRhdGE6IGFueSkgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGRiZGF0YScpO1xuICAgIH1cbiAgICBjb25zdCBjYW1lbENhc2VEYXRhID0gbWFwS2V5cyhkYXRhLCAoX3ZhbHVlLCBrZXkpID0+IGNhbWVsQ2FzZShrZXkpKTtcbiAgICBjb25zdCBmb3JtYXR0ZWREYXRhID0gbWFwVmFsdWVzKGNhbWVsQ2FzZURhdGEsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAoWydtYW5pZmVzdCddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgLy8gc3FsaXRlIHJldHVybiBhIHN0cmluZyBmb3IganNvbiBmaWVsZCwgYnV0IHBvc3RncmVzIHJldHVybiBhbiBvYmplY3RcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnBhcnNlKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBmb3JtYXR0ZWREYXRhIGFzIERlcGxveTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlUmVwb3NpdG9yeSIsImNhbWVsQ2FzZSIsImlzUGxhaW5PYmplY3QiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwiRGVwbG95U3RhdHVzRW51bSIsIkRlcGxveUxvZ1JlcG9zaXRvcnkiLCJjb25zdHJ1Y3RvciIsImtuZXhQZyIsInRhYmxlTmFtZSIsInRyYW5zZm9ybUZyb21EQkRhdGEiLCJkYXRhIiwiRXJyb3IiLCJjYW1lbENhc2VEYXRhIiwiX3ZhbHVlIiwia2V5IiwiZm9ybWF0dGVkRGF0YSIsInZhbHVlIiwiaW5jbHVkZXMiLCJKU09OIiwicGFyc2UiLCJmaW5kTGFzdFByb2plY3REZXBsb3lMb2ciLCJwcm9qZWN0SWQiLCJyZXMiLCJrbmV4Iiwic2VsZWN0IiwiZnJvbSIsIndoZXJlIiwidHJhbnNmb3JtVG9EQkRhdGEiLCJzdGF0dXMiLCJvcmRlckJ5IiwiZmlyc3QiLCJmaW5kSW5Qcm9ncmVzc1Byb2plY3REZXBsb3lMb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/deployLogRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/index.ts":
/*!*************************************************!*\
  !*** ./src/apollo/server/repositories/index.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _baseRepository__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _baseRepository__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _learningRepository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./learningRepository */ \"(api)/./src/apollo/server/repositories/learningRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _learningRepository__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _learningRepository__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _modelRepository__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modelRepository */ \"(api)/./src/apollo/server/repositories/modelRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _modelRepository__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _modelRepository__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _projectRepository__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./projectRepository */ \"(api)/./src/apollo/server/repositories/projectRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _projectRepository__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _projectRepository__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _modelColumnRepository__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modelColumnRepository */ \"(api)/./src/apollo/server/repositories/modelColumnRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _modelColumnRepository__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _modelColumnRepository__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _modelNestedColumnRepository__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modelNestedColumnRepository */ \"(api)/./src/apollo/server/repositories/modelNestedColumnRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _modelNestedColumnRepository__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _modelNestedColumnRepository__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _relationshipRepository__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./relationshipRepository */ \"(api)/./src/apollo/server/repositories/relationshipRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _relationshipRepository__WEBPACK_IMPORTED_MODULE_6__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _relationshipRepository__WEBPACK_IMPORTED_MODULE_6__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _metricsRepository__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./metricsRepository */ \"(api)/./src/apollo/server/repositories/metricsRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _metricsRepository__WEBPACK_IMPORTED_MODULE_7__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _metricsRepository__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _metricsMeasureRepository__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./metricsMeasureRepository */ \"(api)/./src/apollo/server/repositories/metricsMeasureRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _metricsMeasureRepository__WEBPACK_IMPORTED_MODULE_8__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _metricsMeasureRepository__WEBPACK_IMPORTED_MODULE_8__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _deployLogRepository__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./deployLogRepository */ \"(api)/./src/apollo/server/repositories/deployLogRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _deployLogRepository__WEBPACK_IMPORTED_MODULE_9__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _deployLogRepository__WEBPACK_IMPORTED_MODULE_9__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _viewRepository__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./viewRepository */ \"(api)/./src/apollo/server/repositories/viewRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _viewRepository__WEBPACK_IMPORTED_MODULE_10__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _viewRepository__WEBPACK_IMPORTED_MODULE_10__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _threadRepository__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./threadRepository */ \"(api)/./src/apollo/server/repositories/threadRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _threadRepository__WEBPACK_IMPORTED_MODULE_11__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _threadRepository__WEBPACK_IMPORTED_MODULE_11__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _threadResponseRepository__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./threadResponseRepository */ \"(api)/./src/apollo/server/repositories/threadResponseRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _threadResponseRepository__WEBPACK_IMPORTED_MODULE_12__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _threadResponseRepository__WEBPACK_IMPORTED_MODULE_12__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _schemaChangeRepository__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./schemaChangeRepository */ \"(api)/./src/apollo/server/repositories/schemaChangeRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _schemaChangeRepository__WEBPACK_IMPORTED_MODULE_13__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _schemaChangeRepository__WEBPACK_IMPORTED_MODULE_13__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _dashboardRepository__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./dashboardRepository */ \"(api)/./src/apollo/server/repositories/dashboardRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _dashboardRepository__WEBPACK_IMPORTED_MODULE_14__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _dashboardRepository__WEBPACK_IMPORTED_MODULE_14__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _dashboardItemRepository__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dashboardItemRepository */ \"(api)/./src/apollo/server/repositories/dashboardItemRepository.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _dashboardItemRepository__WEBPACK_IMPORTED_MODULE_15__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _dashboardItemRepository__WEBPACK_IMPORTED_MODULE_15__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDSTtBQUNIO0FBQ0U7QUFDSTtBQUNNO0FBQ0w7QUFDTDtBQUNPO0FBQ0w7QUFDTDtBQUNFO0FBQ1E7QUFDRjtBQUNIO0FBQ0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL2luZGV4LnRzPzY4NGYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9iYXNlUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL2xlYXJuaW5nUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL21vZGVsUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL3Byb2plY3RSZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWxDb2x1bW5SZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vcmVsYXRpb25zaGlwUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL21ldHJpY3NSZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vbWV0cmljc01lYXN1cmVSZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vZGVwbG95TG9nUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL3ZpZXdSZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vdGhyZWFkUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL3RocmVhZFJlc3BvbnNlUmVwb3NpdG9yeSc7XG5leHBvcnQgKiBmcm9tICcuL3NjaGVtYUNoYW5nZVJlcG9zaXRvcnknO1xuZXhwb3J0ICogZnJvbSAnLi9kYXNoYm9hcmRSZXBvc2l0b3J5JztcbmV4cG9ydCAqIGZyb20gJy4vZGFzaGJvYXJkSXRlbVJlcG9zaXRvcnknO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/learningRepository.ts":
/*!**************************************************************!*\
  !*** ./src/apollo/server/repositories/learningRepository.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LearningRepository: () => (/* binding */ LearningRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nclass LearningRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"learning\"\n        });\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const transformedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(data, (value, key)=>{\n                if ([\n                    \"paths\"\n                ].includes(key)) {\n                    return value ? JSON.stringify(value) : null;\n                }\n                return value;\n            });\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(transformedData, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default()(key));\n        };\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if ([\n                    \"paths\"\n                ].includes(key)) {\n                    // The value from Sqlite will be string type, while the value from PG is JSON object\n                    if (typeof value === \"string\") {\n                        return value ? JSON.parse(value) : value;\n                    } else {\n                        return value;\n                    }\n                }\n                return value;\n            });\n            return formattedData;\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbGVhcm5pbmdSZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNvRTtBQU9wRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBVVQsTUFBTU0sMkJBQ0hOLDJEQUFjQTtJQUd0Qk8sWUFBWUMsTUFBWSxDQUFFO1FBQ3hCLEtBQUssQ0FBQztZQUFFQTtZQUFRQyxXQUFXO1FBQVc7YUFHckJDLG9CQUFvQixDQUFDQztZQUN0QyxJQUFJLENBQUNULDJEQUFhQSxDQUFDUyxPQUFPO2dCQUN4QixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFDQSxNQUFNQyxrQkFBa0JULHVEQUFTQSxDQUFDTyxNQUFNLENBQUNHLE9BQU9DO2dCQUM5QyxJQUFJO29CQUFDO2lCQUFRLENBQUNDLFFBQVEsQ0FBQ0QsTUFBTTtvQkFDM0IsT0FBT0QsUUFBUUcsS0FBS0MsU0FBUyxDQUFDSixTQUFTO2dCQUN6QztnQkFDQSxPQUFPQTtZQUNUO1lBQ0EsT0FBT1gscURBQU9BLENBQUNVLGlCQUFpQixDQUFDTSxRQUFRSixNQUFRVix1REFBU0EsQ0FBQ1U7UUFDN0Q7YUFFbUJLLHNCQUFzQixDQUFDVDtZQUN4QyxJQUFJLENBQUNULDJEQUFhQSxDQUFDUyxPQUFPO2dCQUN4QixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFDQSxNQUFNUyxnQkFBZ0JsQixxREFBT0EsQ0FBQ1EsTUFBTSxDQUFDUSxRQUFRSixNQUFRZCx1REFBU0EsQ0FBQ2M7WUFDL0QsTUFBTU8sZ0JBQWdCbEIsdURBQVNBLENBQUNpQixlQUFlLENBQUNQLE9BQU9DO2dCQUNyRCxJQUFJO29CQUFDO2lCQUFRLENBQUNDLFFBQVEsQ0FBQ0QsTUFBTTtvQkFDM0Isb0ZBQW9GO29CQUNwRixJQUFJLE9BQU9ELFVBQVUsVUFBVTt3QkFDN0IsT0FBT0EsUUFBUUcsS0FBS00sS0FBSyxDQUFDVCxTQUFTQTtvQkFDckMsT0FBTzt3QkFDTCxPQUFPQTtvQkFDVDtnQkFDRjtnQkFDQSxPQUFPQTtZQUNUO1lBQ0EsT0FBT1E7UUFDVDtJQWhDQTtBQWlDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbGVhcm5pbmdSZXBvc2l0b3J5LnRzPzRjMDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS25leCB9IGZyb20gJ2tuZXgnO1xuaW1wb3J0IHsgQmFzZVJlcG9zaXRvcnksIElCYXNpY1JlcG9zaXRvcnkgfSBmcm9tICcuL2Jhc2VSZXBvc2l0b3J5JztcbmltcG9ydCB7XG4gIGNhbWVsQ2FzZSxcbiAgaXNQbGFpbk9iamVjdCxcbiAgbWFwS2V5cyxcbiAgbWFwVmFsdWVzLFxuICBzbmFrZUNhc2UsXG59IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmcge1xuICBpZDogbnVtYmVyOyAvLyBJRFxuICB1c2VySWQ6IHN0cmluZzsgLy8gUmVmZXJlbmNlIHRvIGNvbmZpZyB1c2VyVVVJRFxuICBwYXRoczogc3RyaW5nW107IC8vIFRoZSBsZWFybmluZyBwYXRocywgYXJyYXkgb2YgbGVhcm5pbmcgc3Rvcmllc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElMZWFybmluZ1JlcG9zaXRvcnkgZXh0ZW5kcyBJQmFzaWNSZXBvc2l0b3J5PExlYXJuaW5nPiB7fVxuXG5leHBvcnQgY2xhc3MgTGVhcm5pbmdSZXBvc2l0b3J5XG4gIGV4dGVuZHMgQmFzZVJlcG9zaXRvcnk8TGVhcm5pbmc+XG4gIGltcGxlbWVudHMgSUxlYXJuaW5nUmVwb3NpdG9yeVxue1xuICBjb25zdHJ1Y3RvcihrbmV4UGc6IEtuZXgpIHtcbiAgICBzdXBlcih7IGtuZXhQZywgdGFibGVOYW1lOiAnbGVhcm5pbmcnIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHRyYW5zZm9ybVRvREJEYXRhID0gKGRhdGE6IGFueSkgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGRiZGF0YScpO1xuICAgIH1cbiAgICBjb25zdCB0cmFuc2Zvcm1lZERhdGEgPSBtYXBWYWx1ZXMoZGF0YSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGlmIChbJ3BhdGhzJ10uaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXBLZXlzKHRyYW5zZm9ybWVkRGF0YSwgKF92YWx1ZSwga2V5KSA9PiBzbmFrZUNhc2Uoa2V5KSk7XG4gIH07XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHRyYW5zZm9ybUZyb21EQkRhdGEgPSAoZGF0YTogYW55KTogTGVhcm5pbmcgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGRiZGF0YScpO1xuICAgIH1cbiAgICBjb25zdCBjYW1lbENhc2VEYXRhID0gbWFwS2V5cyhkYXRhLCAoX3ZhbHVlLCBrZXkpID0+IGNhbWVsQ2FzZShrZXkpKTtcbiAgICBjb25zdCBmb3JtYXR0ZWREYXRhID0gbWFwVmFsdWVzKGNhbWVsQ2FzZURhdGEsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAoWydwYXRocyddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgLy8gVGhlIHZhbHVlIGZyb20gU3FsaXRlIHdpbGwgYmUgc3RyaW5nIHR5cGUsIHdoaWxlIHRoZSB2YWx1ZSBmcm9tIFBHIGlzIEpTT04gb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KSBhcyBMZWFybmluZztcbiAgICByZXR1cm4gZm9ybWF0dGVkRGF0YTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlUmVwb3NpdG9yeSIsImNhbWVsQ2FzZSIsImlzUGxhaW5PYmplY3QiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwic25ha2VDYXNlIiwiTGVhcm5pbmdSZXBvc2l0b3J5IiwiY29uc3RydWN0b3IiLCJrbmV4UGciLCJ0YWJsZU5hbWUiLCJ0cmFuc2Zvcm1Ub0RCRGF0YSIsImRhdGEiLCJFcnJvciIsInRyYW5zZm9ybWVkRGF0YSIsInZhbHVlIiwia2V5IiwiaW5jbHVkZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiX3ZhbHVlIiwidHJhbnNmb3JtRnJvbURCRGF0YSIsImNhbWVsQ2FzZURhdGEiLCJmb3JtYXR0ZWREYXRhIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/learningRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/metricsMeasureRepository.ts":
/*!********************************************************************!*\
  !*** ./src/apollo/server/repositories/metricsMeasureRepository.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetricMeasureRepository: () => (/* binding */ MetricMeasureRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass MetricMeasureRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"metric_measure\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbWV0cmljc01lYXN1cmVSZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ29FO0FBYTdELE1BQU1DLGdDQUNIRCwyREFBY0E7SUFHdEJFLFlBQVlDLE1BQVksQ0FBRTtRQUN4QixLQUFLLENBQUM7WUFBRUE7WUFBUUMsV0FBVztRQUFpQjtJQUM5QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3JlcG9zaXRvcmllcy9tZXRyaWNzTWVhc3VyZVJlcG9zaXRvcnkudHM/OGQ4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCc7XG5pbXBvcnQgeyBCYXNlUmVwb3NpdG9yeSwgSUJhc2ljUmVwb3NpdG9yeSB9IGZyb20gJy4vYmFzZVJlcG9zaXRvcnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1ldHJpY01lYXN1cmUge1xuICBpZDogbnVtYmVyOyAvLyBJRFxuICBtZXRyaWNJZDogbnVtYmVyOyAvLyBSZWZlcmVuY2UgdG8gbWV0cmljIElEXG4gIG5hbWU6IHN0cmluZzsgLy8gTWVhc3VyZSBuYW1lXG4gIGV4cHJlc3Npb246IHN0cmluZzsgLy8gRXhwcmVzc2lvbiBmb3IgdGhlIG1lYXN1cmVcbiAgZ3JhbnVsYXJpdHk/OiBzdHJpbmc7IC8vIEdyYW51bGFyaXR5IGZvciB0aGUgbWVhc3VyZSwgZWc6IFwiZGF5XCIsIFwiaG91clwiLCBcIm1pbnV0ZVwiLCBcInllYXJcIlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZXRyaWNNZWFzdXJlUmVwb3NpdG9yeVxuICBleHRlbmRzIElCYXNpY1JlcG9zaXRvcnk8TWV0cmljTWVhc3VyZT4ge31cblxuZXhwb3J0IGNsYXNzIE1ldHJpY01lYXN1cmVSZXBvc2l0b3J5XG4gIGV4dGVuZHMgQmFzZVJlcG9zaXRvcnk8TWV0cmljTWVhc3VyZT5cbiAgaW1wbGVtZW50cyBJTWV0cmljTWVhc3VyZVJlcG9zaXRvcnlcbntcbiAgY29uc3RydWN0b3Ioa25leFBnOiBLbmV4KSB7XG4gICAgc3VwZXIoeyBrbmV4UGcsIHRhYmxlTmFtZTogJ21ldHJpY19tZWFzdXJlJyB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VSZXBvc2l0b3J5IiwiTWV0cmljTWVhc3VyZVJlcG9zaXRvcnkiLCJjb25zdHJ1Y3RvciIsImtuZXhQZyIsInRhYmxlTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/metricsMeasureRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/metricsRepository.ts":
/*!*************************************************************!*\
  !*** ./src/apollo/server/repositories/metricsRepository.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetricRepository: () => (/* binding */ MetricRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass MetricRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"metric\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbWV0cmljc1JlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDb0U7QUFrQjdELE1BQU1DLHlCQUNIRCwyREFBY0E7SUFHdEJFLFlBQVlDLE1BQVksQ0FBRTtRQUN4QixLQUFLLENBQUM7WUFBRUE7WUFBUUMsV0FBVztRQUFTO0lBQ3RDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL21ldHJpY3NSZXBvc2l0b3J5LnRzPzgzMjQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS25leCB9IGZyb20gJ2tuZXgnO1xuaW1wb3J0IHsgQmFzZVJlcG9zaXRvcnksIElCYXNpY1JlcG9zaXRvcnkgfSBmcm9tICcuL2Jhc2VSZXBvc2l0b3J5JztcblxuZXhwb3J0IGludGVyZmFjZSBNZXRyaWMge1xuICBpZDogbnVtYmVyOyAvLyBJRFxuICBwcm9qZWN0SWQ6IG51bWJlcjsgLy8gUmVmZXJlbmNlIHRvIHByb2plY3QuaWRcbiAgbmFtZTogc3RyaW5nOyAvLyBNZXRyaWMgbmFtZVxuICB0eXBlOiBzdHJpbmc7IC8vIE1ldHJpYyB0eXBlLCBleDogXCJzaW1wbGVcIiBvciBcImN1bXVsYXRpdmVcIlxuICBjYWNoZWQ6IGJvb2xlYW47IC8vIE1vZGVsIGlzIGNhY2hlZCBvciBub3RcbiAgcmVmcmVzaFRpbWU/OiBzdHJpbmc7IC8vIENvbnRhaW4gYSBudW1iZXIgZm9sbG93ZWQgYnkgYSB0aW1lIHVuaXQgKG5zLCB1cywgbXMsIHMsIG0sIGgsIGQpLiBGb3IgZXhhbXBsZSwgXCIyaFwiXG5cbiAgLy8gbWV0cmljIGNhbiBiYXNlZCBvbiBtb2RlbCBvciBhbm90aGVyIG1ldHJpY1xuICBtb2RlbElkPzogbnVtYmVyOyAvLyBSZWZlcmVuY2UgdG8gbW9kZWwuaWRcbiAgbWV0cmljSWQ/OiBudW1iZXI7IC8vIFJlZmVyZW5jZSB0byBtZXRyaWMuaWRcbiAgcHJvcGVydGllcz86IHN0cmluZzsgLy8gTWV0cmljIHByb3BlcnRpZXMsIGEganNvbiBzdHJpbmcsIHRoZSBkZXNjcmlwdGlvbiBhbmQgZGlzcGxheU5hbWUgc2hvdWxkIGJlIHN0b3JlZCBoZXJlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1ldHJpY1JlcG9zaXRvcnkgZXh0ZW5kcyBJQmFzaWNSZXBvc2l0b3J5PE1ldHJpYz4ge31cblxuZXhwb3J0IGNsYXNzIE1ldHJpY1JlcG9zaXRvcnlcbiAgZXh0ZW5kcyBCYXNlUmVwb3NpdG9yeTxNZXRyaWM+XG4gIGltcGxlbWVudHMgSU1ldHJpY1JlcG9zaXRvcnlcbntcbiAgY29uc3RydWN0b3Ioa25leFBnOiBLbmV4KSB7XG4gICAgc3VwZXIoeyBrbmV4UGcsIHRhYmxlTmFtZTogJ21ldHJpYycgfSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlUmVwb3NpdG9yeSIsIk1ldHJpY1JlcG9zaXRvcnkiLCJjb25zdHJ1Y3RvciIsImtuZXhQZyIsInRhYmxlTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/metricsRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/modelColumnRepository.ts":
/*!*****************************************************************!*\
  !*** ./src/apollo/server/repositories/modelColumnRepository.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelColumnRepository: () => (/* binding */ ModelColumnRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass ModelColumnRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"model_column\"\n        });\n    }\n    async findColumnsByModelIds(modelIds, queryOptions) {\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            const result = await tx(this.tableName).whereIn(\"model_id\", modelIds).select(\"*\");\n            return result.map((r)=>this.transformFromDBData(r));\n        }\n        const result = await this.knex(\"model_column\").whereIn(\"model_id\", modelIds).select(\"*\");\n        return result.map((r)=>this.transformFromDBData(r));\n    }\n    async findColumnsByIds(ids, queryOptions) {\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            const result = await tx(this.tableName).whereIn(\"id\", ids).select(\"*\");\n            return result.map((r)=>this.transformFromDBData(r));\n        }\n        const result = await this.knex(\"model_column\").whereIn(\"id\", ids).select(\"*\");\n        return result.map((r)=>this.transformFromDBData(r));\n    }\n    async deleteByModelIds(modelIds, queryOptions) {\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            await tx(this.tableName).whereIn(\"model_id\", modelIds).delete();\n            return;\n        }\n        await this.knex(\"model_column\").whereIn(\"model_id\", modelIds).delete();\n    }\n    async resetModelPrimaryKey(modelId) {\n        await this.knex(\"model_column\").where(this.transformToDBData({\n            modelId\n        })).update(this.transformToDBData({\n            isPk: false\n        }));\n    }\n    async setModelPrimaryKey(modelId, sourceColumnName) {\n        await this.knex(\"model_column\").where(this.transformToDBData({\n            modelId,\n            sourceColumnName\n        })).update(this.transformToDBData({\n            isPk: true\n        }));\n    }\n    async deleteAllBySourceColumnNames(modelId, sourceColumnNames, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const builder = executer(this.tableName).where(this.transformToDBData({\n            modelId\n        })).whereIn(\"source_column_name\", sourceColumnNames).delete();\n        return await builder;\n    }\n    async deleteAllByColumnIds(columnIds, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        await executer(this.tableName).whereIn(\"id\", columnIds).delete();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbW9kZWxDb2x1bW5SZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSzBCO0FBNENuQixNQUFNQyw4QkFDSEQsMkRBQWNBO0lBR3RCRSxZQUFZQyxNQUFZLENBQUU7UUFDeEIsS0FBSyxDQUFDO1lBQUVBO1lBQVFDLFdBQVc7UUFBZTtJQUM1QztJQUVBLE1BQWFDLHNCQUFzQkMsUUFBUSxFQUFFQyxZQUE0QixFQUFFO1FBQ3pFLElBQUlBLGdCQUFnQkEsYUFBYUMsRUFBRSxFQUFFO1lBQ25DLE1BQU0sRUFBRUEsRUFBRSxFQUFFLEdBQUdEO1lBQ2YsTUFBTUUsU0FBUyxNQUFNRCxHQUFHLElBQUksQ0FBQ0osU0FBUyxFQUNuQ00sT0FBTyxDQUFDLFlBQVlKLFVBQ3BCSyxNQUFNLENBQUM7WUFDVixPQUFPRixPQUFPRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxJQUFJLENBQUNDLG1CQUFtQixDQUFDRDtRQUNwRDtRQUNBLE1BQU1KLFNBQVMsTUFBTSxJQUFJLENBQUNNLElBQUksQ0FBYyxnQkFDekNMLE9BQU8sQ0FBQyxZQUFZSixVQUNwQkssTUFBTSxDQUFDO1FBQ1YsT0FBT0YsT0FBT0csR0FBRyxDQUFDLENBQUNDLElBQU0sSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0Q7SUFDcEQ7SUFFQSxNQUFhRyxpQkFBaUJDLEdBQWEsRUFBRVYsWUFBNEIsRUFBRTtRQUN6RSxJQUFJQSxnQkFBZ0JBLGFBQWFDLEVBQUUsRUFBRTtZQUNuQyxNQUFNLEVBQUVBLEVBQUUsRUFBRSxHQUFHRDtZQUNmLE1BQU1FLFNBQVMsTUFBTUQsR0FBRyxJQUFJLENBQUNKLFNBQVMsRUFBRU0sT0FBTyxDQUFDLE1BQU1PLEtBQUtOLE1BQU0sQ0FBQztZQUNsRSxPQUFPRixPQUFPRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxJQUFJLENBQUNDLG1CQUFtQixDQUFDRDtRQUNwRDtRQUNBLE1BQU1KLFNBQVMsTUFBTSxJQUFJLENBQUNNLElBQUksQ0FBYyxnQkFDekNMLE9BQU8sQ0FBQyxNQUFNTyxLQUNkTixNQUFNLENBQUM7UUFDVixPQUFPRixPQUFPRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxJQUFJLENBQUNDLG1CQUFtQixDQUFDRDtJQUNwRDtJQUVBLE1BQWFLLGlCQUNYWixRQUFrQixFQUNsQkMsWUFBNEIsRUFDNUI7UUFDQSxJQUFJQSxnQkFBZ0JBLGFBQWFDLEVBQUUsRUFBRTtZQUNuQyxNQUFNLEVBQUVBLEVBQUUsRUFBRSxHQUFHRDtZQUNmLE1BQU1DLEdBQUcsSUFBSSxDQUFDSixTQUFTLEVBQUVNLE9BQU8sQ0FBQyxZQUFZSixVQUFVYSxNQUFNO1lBQzdEO1FBQ0Y7UUFDQSxNQUFNLElBQUksQ0FBQ0osSUFBSSxDQUFjLGdCQUMxQkwsT0FBTyxDQUFDLFlBQVlKLFVBQ3BCYSxNQUFNO0lBQ1g7SUFFQSxNQUFhQyxxQkFBcUJDLE9BQWUsRUFBRTtRQUNqRCxNQUFNLElBQUksQ0FBQ04sSUFBSSxDQUFjLGdCQUMxQk8sS0FBSyxDQUFDLElBQUksQ0FBQ0MsaUJBQWlCLENBQUM7WUFBRUY7UUFBUSxJQUN2Q0csTUFBTSxDQUFDLElBQUksQ0FBQ0QsaUJBQWlCLENBQUM7WUFBRUUsTUFBTTtRQUFNO0lBQ2pEO0lBQ0EsTUFBYUMsbUJBQW1CTCxPQUFlLEVBQUVNLGdCQUF3QixFQUFFO1FBQ3pFLE1BQU0sSUFBSSxDQUFDWixJQUFJLENBQWMsZ0JBQzFCTyxLQUFLLENBQUMsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQztZQUFFRjtZQUFTTTtRQUFpQixJQUN6REgsTUFBTSxDQUFDLElBQUksQ0FBQ0QsaUJBQWlCLENBQUM7WUFBRUUsTUFBTTtRQUFLO0lBQ2hEO0lBRUEsTUFBYUcsNkJBQ1hQLE9BQWUsRUFDZlEsaUJBQTJCLEVBQzNCdEIsWUFBNEIsRUFDWDtRQUNqQixNQUFNdUIsV0FBV3ZCLGNBQWNDLEtBQUtELGFBQWFDLEVBQUUsR0FBRyxJQUFJLENBQUNPLElBQUk7UUFDL0QsTUFBTWdCLFVBQVVELFNBQVMsSUFBSSxDQUFDMUIsU0FBUyxFQUNwQ2tCLEtBQUssQ0FBQyxJQUFJLENBQUNDLGlCQUFpQixDQUFDO1lBQUVGO1FBQVEsSUFDdkNYLE9BQU8sQ0FBQyxzQkFBc0JtQixtQkFDOUJWLE1BQU07UUFDVCxPQUFPLE1BQU1ZO0lBQ2Y7SUFFQSxNQUFhQyxxQkFDWEMsU0FBbUIsRUFDbkIxQixZQUE0QixFQUNiO1FBQ2YsTUFBTXVCLFdBQVd2QixjQUFjQyxLQUFLRCxhQUFhQyxFQUFFLEdBQUcsSUFBSSxDQUFDTyxJQUFJO1FBQy9ELE1BQU1lLFNBQXNCLElBQUksQ0FBQzFCLFNBQVMsRUFDdkNNLE9BQU8sQ0FBQyxNQUFNdUIsV0FDZGQsTUFBTTtJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL21vZGVsQ29sdW1uUmVwb3NpdG9yeS50cz84NTMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtuZXggfSBmcm9tICdrbmV4JztcbmltcG9ydCB7XG4gIEJhc2VSZXBvc2l0b3J5LFxuICBJQmFzaWNSZXBvc2l0b3J5LFxuICBJUXVlcnlPcHRpb25zLFxufSBmcm9tICcuL2Jhc2VSZXBvc2l0b3J5JztcblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbENvbHVtbiB7XG4gIGlkOiBudW1iZXI7IC8vIElEXG4gIG1vZGVsSWQ6IG51bWJlcjsgLy8gUmVmZXJlbmNlIHRvIG1vZGVsIElEXG4gIGlzQ2FsY3VsYXRlZDogYm9vbGVhbjsgLy8gSXMgY2FsY3VsYXRlZCBmaWVsZFxuICBkaXNwbGF5TmFtZTogc3RyaW5nOyAvLyBDb2x1bW4gbmFtZSBkaXNwbGF5ZWQgaW4gVUlcbiAgcmVmZXJlbmNlTmFtZTogc3RyaW5nOyAvLyBUaGUgbmFtZSB1c2VkIGluIHRoZSBNREwgc3RydWN0dXJlIGFuZCB3aGVuIHF1ZXJ5aW5nIHRoZSBkYXRhXG4gIHNvdXJjZUNvbHVtbk5hbWU6IHN0cmluZzsgLy8gVGhlIGNvbHVtbiBuYW1lIGluIHRoZSBkYXRhc291cmNlXG4gIGFnZ3JlZ2F0aW9uPzogc3RyaW5nOyAvLyBFeHByZXNzaW9uIGZvciB0aGUgY29sdW1uLCBjb3VsZCBiZSBjdXN0b20gZmllbGQgb3IgY2FsY3VsYXRlZCBmaWVsZCBleHByZXNzaW9uXG4gIGxpbmVhZ2U/OiBzdHJpbmc7IC8vIFRoZSBzZWxlY3RlZCBmaWVsZCBpbiBjYWxjdWxhdGVkIGZpZWxkLCBhcnJheSBvZiBpZHNcbiAgY3VzdG9tRXhwcmVzc2lvbj86IHN0cmluZzsgLy8gRm9yIGN1c3RvbSBmaWVsZCBvciBjdXN0b20gZXhwcmVzc2lvbiBvZiBjYWxjdWxhdGVkIGZpZWxkXG4gIHR5cGU6IHN0cmluZzsgLy8gRGF0YSB0eXBlLCByZWZlciB0byB0aGUgY29sdW1uIHR5cGUgaW4gdGhlIGRhdGFzb3VyY2VcbiAgbm90TnVsbDogYm9vbGVhbjsgLy8gSXMgbm90IG51bGxcbiAgaXNQazogYm9vbGVhbjsgLy8gSXMgcHJpbWFyeSBrZXkgb2YgdGhlIHRhYmxlXG4gIHByb3BlcnRpZXM/OiBzdHJpbmc7IC8vIENvbHVtbiBwcm9wZXJ0aWVzLCBhIGpzb24gc3RyaW5nLCB0aGUgZGVzY3JpcHRpb24gYW5kIGRpc3BsYXlOYW1lIHNob3VsZCBiZSBzdG9yZWQgaGVyZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNb2RlbENvbHVtblJlcG9zaXRvcnkgZXh0ZW5kcyBJQmFzaWNSZXBvc2l0b3J5PE1vZGVsQ29sdW1uPiB7XG4gIGZpbmRDb2x1bW5zQnlNb2RlbElkcyhcbiAgICBtb2RlbElkczogbnVtYmVyW10sXG4gICAgcXVlcnlPcHRpb25zPzogSVF1ZXJ5T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxNb2RlbENvbHVtbltdPjtcbiAgZmluZENvbHVtbnNCeUlkcyhcbiAgICBpZHM6IG51bWJlcltdLFxuICAgIHF1ZXJ5T3B0aW9ucz86IElRdWVyeU9wdGlvbnMsXG4gICk6IFByb21pc2U8TW9kZWxDb2x1bW5bXT47XG4gIGRlbGV0ZUJ5TW9kZWxJZHMoXG4gICAgbW9kZWxJZHM6IG51bWJlcltdLFxuICAgIHF1ZXJ5T3B0aW9ucz86IElRdWVyeU9wdGlvbnMsXG4gICk6IFByb21pc2U8dm9pZD47XG4gIHJlc2V0TW9kZWxQcmltYXJ5S2V5KG1vZGVsSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD47XG4gIHNldE1vZGVsUHJpbWFyeUtleShtb2RlbElkOiBudW1iZXIsIHNvdXJjZUNvbHVtbk5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG4gIGRlbGV0ZUFsbEJ5U291cmNlQ29sdW1uTmFtZXMoXG4gICAgbW9kZWxJZDogbnVtYmVyLFxuICAgIHNvdXJjZUNvbHVtbk5hbWVzOiBzdHJpbmdbXSxcbiAgICBxdWVyeU9wdGlvbnM/OiBJUXVlcnlPcHRpb25zLFxuICApOiBQcm9taXNlPG51bWJlcj47XG4gIGRlbGV0ZUFsbEJ5Q29sdW1uSWRzKFxuICAgIGNvbHVtbklkczogbnVtYmVyW10sXG4gICAgcXVlcnlPcHRpb25zPzogSVF1ZXJ5T3B0aW9ucyxcbiAgKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGNsYXNzIE1vZGVsQ29sdW1uUmVwb3NpdG9yeVxuICBleHRlbmRzIEJhc2VSZXBvc2l0b3J5PE1vZGVsQ29sdW1uPlxuICBpbXBsZW1lbnRzIElNb2RlbENvbHVtblJlcG9zaXRvcnlcbntcbiAgY29uc3RydWN0b3Ioa25leFBnOiBLbmV4KSB7XG4gICAgc3VwZXIoeyBrbmV4UGcsIHRhYmxlTmFtZTogJ21vZGVsX2NvbHVtbicgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmluZENvbHVtbnNCeU1vZGVsSWRzKG1vZGVsSWRzLCBxdWVyeU9wdGlvbnM/OiBJUXVlcnlPcHRpb25zKSB7XG4gICAgaWYgKHF1ZXJ5T3B0aW9ucyAmJiBxdWVyeU9wdGlvbnMudHgpIHtcbiAgICAgIGNvbnN0IHsgdHggfSA9IHF1ZXJ5T3B0aW9ucztcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHR4KHRoaXMudGFibGVOYW1lKVxuICAgICAgICAud2hlcmVJbignbW9kZWxfaWQnLCBtb2RlbElkcylcbiAgICAgICAgLnNlbGVjdCgnKicpO1xuICAgICAgcmV0dXJuIHJlc3VsdC5tYXAoKHIpID0+IHRoaXMudHJhbnNmb3JtRnJvbURCRGF0YShyKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMua25leDxNb2RlbENvbHVtbj4oJ21vZGVsX2NvbHVtbicpXG4gICAgICAud2hlcmVJbignbW9kZWxfaWQnLCBtb2RlbElkcylcbiAgICAgIC5zZWxlY3QoJyonKTtcbiAgICByZXR1cm4gcmVzdWx0Lm1hcCgocikgPT4gdGhpcy50cmFuc2Zvcm1Gcm9tREJEYXRhKHIpKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBmaW5kQ29sdW1uc0J5SWRzKGlkczogbnVtYmVyW10sIHF1ZXJ5T3B0aW9ucz86IElRdWVyeU9wdGlvbnMpIHtcbiAgICBpZiAocXVlcnlPcHRpb25zICYmIHF1ZXJ5T3B0aW9ucy50eCkge1xuICAgICAgY29uc3QgeyB0eCB9ID0gcXVlcnlPcHRpb25zO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdHgodGhpcy50YWJsZU5hbWUpLndoZXJlSW4oJ2lkJywgaWRzKS5zZWxlY3QoJyonKTtcbiAgICAgIHJldHVybiByZXN1bHQubWFwKChyKSA9PiB0aGlzLnRyYW5zZm9ybUZyb21EQkRhdGEocikpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmtuZXg8TW9kZWxDb2x1bW4+KCdtb2RlbF9jb2x1bW4nKVxuICAgICAgLndoZXJlSW4oJ2lkJywgaWRzKVxuICAgICAgLnNlbGVjdCgnKicpO1xuICAgIHJldHVybiByZXN1bHQubWFwKChyKSA9PiB0aGlzLnRyYW5zZm9ybUZyb21EQkRhdGEocikpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlbGV0ZUJ5TW9kZWxJZHMoXG4gICAgbW9kZWxJZHM6IG51bWJlcltdLFxuICAgIHF1ZXJ5T3B0aW9ucz86IElRdWVyeU9wdGlvbnMsXG4gICkge1xuICAgIGlmIChxdWVyeU9wdGlvbnMgJiYgcXVlcnlPcHRpb25zLnR4KSB7XG4gICAgICBjb25zdCB7IHR4IH0gPSBxdWVyeU9wdGlvbnM7XG4gICAgICBhd2FpdCB0eCh0aGlzLnRhYmxlTmFtZSkud2hlcmVJbignbW9kZWxfaWQnLCBtb2RlbElkcykuZGVsZXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IHRoaXMua25leDxNb2RlbENvbHVtbj4oJ21vZGVsX2NvbHVtbicpXG4gICAgICAud2hlcmVJbignbW9kZWxfaWQnLCBtb2RlbElkcylcbiAgICAgIC5kZWxldGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZXNldE1vZGVsUHJpbWFyeUtleShtb2RlbElkOiBudW1iZXIpIHtcbiAgICBhd2FpdCB0aGlzLmtuZXg8TW9kZWxDb2x1bW4+KCdtb2RlbF9jb2x1bW4nKVxuICAgICAgLndoZXJlKHRoaXMudHJhbnNmb3JtVG9EQkRhdGEoeyBtb2RlbElkIH0pKVxuICAgICAgLnVwZGF0ZSh0aGlzLnRyYW5zZm9ybVRvREJEYXRhKHsgaXNQazogZmFsc2UgfSkpO1xuICB9XG4gIHB1YmxpYyBhc3luYyBzZXRNb2RlbFByaW1hcnlLZXkobW9kZWxJZDogbnVtYmVyLCBzb3VyY2VDb2x1bW5OYW1lOiBzdHJpbmcpIHtcbiAgICBhd2FpdCB0aGlzLmtuZXg8TW9kZWxDb2x1bW4+KCdtb2RlbF9jb2x1bW4nKVxuICAgICAgLndoZXJlKHRoaXMudHJhbnNmb3JtVG9EQkRhdGEoeyBtb2RlbElkLCBzb3VyY2VDb2x1bW5OYW1lIH0pKVxuICAgICAgLnVwZGF0ZSh0aGlzLnRyYW5zZm9ybVRvREJEYXRhKHsgaXNQazogdHJ1ZSB9KSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlQWxsQnlTb3VyY2VDb2x1bW5OYW1lcyhcbiAgICBtb2RlbElkOiBudW1iZXIsXG4gICAgc291cmNlQ29sdW1uTmFtZXM6IHN0cmluZ1tdLFxuICAgIHF1ZXJ5T3B0aW9ucz86IElRdWVyeU9wdGlvbnMsXG4gICk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgY29uc3QgZXhlY3V0ZXIgPSBxdWVyeU9wdGlvbnM/LnR4ID8gcXVlcnlPcHRpb25zLnR4IDogdGhpcy5rbmV4O1xuICAgIGNvbnN0IGJ1aWxkZXIgPSBleGVjdXRlcih0aGlzLnRhYmxlTmFtZSlcbiAgICAgIC53aGVyZSh0aGlzLnRyYW5zZm9ybVRvREJEYXRhKHsgbW9kZWxJZCB9KSlcbiAgICAgIC53aGVyZUluKCdzb3VyY2VfY29sdW1uX25hbWUnLCBzb3VyY2VDb2x1bW5OYW1lcylcbiAgICAgIC5kZWxldGUoKTtcbiAgICByZXR1cm4gYXdhaXQgYnVpbGRlcjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBkZWxldGVBbGxCeUNvbHVtbklkcyhcbiAgICBjb2x1bW5JZHM6IG51bWJlcltdLFxuICAgIHF1ZXJ5T3B0aW9ucz86IElRdWVyeU9wdGlvbnMsXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGV4ZWN1dGVyID0gcXVlcnlPcHRpb25zPy50eCA/IHF1ZXJ5T3B0aW9ucy50eCA6IHRoaXMua25leDtcbiAgICBhd2FpdCBleGVjdXRlcjxNb2RlbENvbHVtbj4odGhpcy50YWJsZU5hbWUpXG4gICAgICAud2hlcmVJbignaWQnLCBjb2x1bW5JZHMpXG4gICAgICAuZGVsZXRlKCk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJCYXNlUmVwb3NpdG9yeSIsIk1vZGVsQ29sdW1uUmVwb3NpdG9yeSIsImNvbnN0cnVjdG9yIiwia25leFBnIiwidGFibGVOYW1lIiwiZmluZENvbHVtbnNCeU1vZGVsSWRzIiwibW9kZWxJZHMiLCJxdWVyeU9wdGlvbnMiLCJ0eCIsInJlc3VsdCIsIndoZXJlSW4iLCJzZWxlY3QiLCJtYXAiLCJyIiwidHJhbnNmb3JtRnJvbURCRGF0YSIsImtuZXgiLCJmaW5kQ29sdW1uc0J5SWRzIiwiaWRzIiwiZGVsZXRlQnlNb2RlbElkcyIsImRlbGV0ZSIsInJlc2V0TW9kZWxQcmltYXJ5S2V5IiwibW9kZWxJZCIsIndoZXJlIiwidHJhbnNmb3JtVG9EQkRhdGEiLCJ1cGRhdGUiLCJpc1BrIiwic2V0TW9kZWxQcmltYXJ5S2V5Iiwic291cmNlQ29sdW1uTmFtZSIsImRlbGV0ZUFsbEJ5U291cmNlQ29sdW1uTmFtZXMiLCJzb3VyY2VDb2x1bW5OYW1lcyIsImV4ZWN1dGVyIiwiYnVpbGRlciIsImRlbGV0ZUFsbEJ5Q29sdW1uSWRzIiwiY29sdW1uSWRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/modelColumnRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/modelNestedColumnRepository.ts":
/*!***********************************************************************!*\
  !*** ./src/apollo/server/repositories/modelNestedColumnRepository.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelNestedColumnRepository: () => (/* binding */ ModelNestedColumnRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nclass ModelNestedColumnRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"model_nested_column\"\n        });\n        this.findNestedColumnsByModelIds = async (modelIds)=>{\n            const result = await this.knex(this.tableName).select(\"*\").whereIn(\"model_id\", modelIds);\n            return result.map((r)=>this.transformFromDBData(r));\n        };\n        this.findNestedColumnsByIds = async (ids)=>{\n            const result = await this.knex(this.tableName).select(\"*\").whereIn(\"id\", ids);\n            return result.map((r)=>this.transformFromDBData(r));\n        };\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const transformedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(data, (value, key)=>{\n                if ([\n                    \"columnPath\",\n                    \"properties\"\n                ].includes(key)) {\n                    return value ? JSON.stringify(value) : null;\n                }\n                return value;\n            });\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(transformedData, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default()(key));\n        };\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if ([\n                    \"columnPath\",\n                    \"properties\"\n                ].includes(key)) {\n                    // The value from Sqlite will be string type, while the value from PG is JSON object\n                    if (typeof value === \"string\") {\n                        return value ? JSON.parse(value) : value;\n                    } else {\n                        return value;\n                    }\n                }\n                return value;\n            });\n            return formattedData;\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUNvRTtBQU9wRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0JULE1BQU1NLG9DQUNITiwyREFBY0E7SUFHdEJPLFlBQVlDLE1BQVksQ0FBRTtRQUN4QixLQUFLLENBQUM7WUFBRUE7WUFBUUMsV0FBVztRQUFzQjthQUc1Q0MsOEJBQThCLE9BQU9DO1lBQzFDLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNKLFNBQVMsRUFDMUNLLE1BQU0sQ0FBQyxLQUNQQyxPQUFPLENBQUMsWUFBWUo7WUFDdkIsT0FBT0MsT0FBT0ksR0FBRyxDQUFDLENBQUNDLElBQU0sSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0Q7UUFDcEQ7YUFFT0UseUJBQXlCLE9BQU9DO1lBQ3JDLE1BQU1SLFNBQVMsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNKLFNBQVMsRUFDMUNLLE1BQU0sQ0FBQyxLQUNQQyxPQUFPLENBQUMsTUFBTUs7WUFDakIsT0FBT1IsT0FBT0ksR0FBRyxDQUFDLENBQUNDLElBQU0sSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ0Q7UUFDcEQ7YUFFbUJJLG9CQUFvQixDQUFDQztZQUN0QyxJQUFJLENBQUNwQiwyREFBYUEsQ0FBQ29CLE9BQU87Z0JBQ3hCLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUNBLE1BQU1DLGtCQUFrQnBCLHVEQUFTQSxDQUFDa0IsTUFBTSxDQUFDRyxPQUFPQztnQkFDOUMsSUFBSTtvQkFBQztvQkFBYztpQkFBYSxDQUFDQyxRQUFRLENBQUNELE1BQU07b0JBQzlDLE9BQU9ELFFBQVFHLEtBQUtDLFNBQVMsQ0FBQ0osU0FBUztnQkFDekM7Z0JBQ0EsT0FBT0E7WUFDVDtZQUNBLE9BQU90QixxREFBT0EsQ0FBQ3FCLGlCQUFpQixDQUFDTSxRQUFRSixNQUFRckIsdURBQVNBLENBQUNxQjtRQUM3RDthQUVtQlIsc0JBQXNCLENBQUNJO1lBQ3hDLElBQUksQ0FBQ3BCLDJEQUFhQSxDQUFDb0IsT0FBTztnQkFDeEIsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBQ0EsTUFBTVEsZ0JBQWdCNUIscURBQU9BLENBQUNtQixNQUFNLENBQUNRLFFBQVFKLE1BQVF6Qix1REFBU0EsQ0FBQ3lCO1lBQy9ELE1BQU1NLGdCQUFnQjVCLHVEQUFTQSxDQUFDMkIsZUFBZSxDQUFDTixPQUFPQztnQkFDckQsSUFBSTtvQkFBQztvQkFBYztpQkFBYSxDQUFDQyxRQUFRLENBQUNELE1BQU07b0JBQzlDLG9GQUFvRjtvQkFDcEYsSUFBSSxPQUFPRCxVQUFVLFVBQVU7d0JBQzdCLE9BQU9BLFFBQVFHLEtBQUtLLEtBQUssQ0FBQ1IsU0FBU0E7b0JBQ3JDLE9BQU87d0JBQ0wsT0FBT0E7b0JBQ1Q7Z0JBQ0Y7Z0JBQ0EsT0FBT0E7WUFDVDtZQUNBLE9BQU9PO1FBQ1Q7SUE5Q0E7QUErQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL21vZGVsTmVzdGVkQ29sdW1uUmVwb3NpdG9yeS50cz8zMDgzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtuZXggfSBmcm9tICdrbmV4JztcbmltcG9ydCB7IEJhc2VSZXBvc2l0b3J5LCBJQmFzaWNSZXBvc2l0b3J5IH0gZnJvbSAnLi9iYXNlUmVwb3NpdG9yeSc7XG5pbXBvcnQge1xuICBjYW1lbENhc2UsXG4gIGlzUGxhaW5PYmplY3QsXG4gIG1hcEtleXMsXG4gIG1hcFZhbHVlcyxcbiAgc25ha2VDYXNlLFxufSBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsTmVzdGVkQ29sdW1uIHtcbiAgaWQ6IG51bWJlcjsgLy8gSURcbiAgbW9kZWxJZDogbnVtYmVyOyAvLyBSZWZlcmVuY2UgdG8gbW9kZWwgSURcbiAgY29sdW1uSWQ6IG51bWJlcjsgLy8gUmVmZXJlbmNlIHRvIGNvbHVtbiBJRFxuICBjb2x1bW5QYXRoOiBzdHJpbmdbXTtcbiAgZGlzcGxheU5hbWU6IHN0cmluZzsgLy8gTmVzdGVkIGNvbHVtbiBuYW1lIGRpc3BsYXllZCBpbiBVSVxuICByZWZlcmVuY2VOYW1lOiBzdHJpbmc7IC8vIFRoZSBuYW1lIHVzZWQgaW4gdGhlIE1ETCBzdHJ1Y3R1cmUgYW5kIHdoZW4gcXVlcnlpbmcgdGhlIGRhdGFcbiAgc291cmNlQ29sdW1uTmFtZTogc3RyaW5nOyAvLyBUaGUgbmVzdGVkIGNvbHVtbiBuYW1lIGluIHRoZSBkYXRhc291cmNlXG4gIHR5cGU6IHN0cmluZzsgLy8gRGF0YSB0eXBlLCByZWZlciB0byB0aGUgbmVzdGVkIGNvbHVtbiB0eXBlIGluIHRoZSBkYXRhc291cmNlXG4gIHByb3BlcnRpZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+OyAvLyBOZXN0ZWQgY29sdW1uIHByb3BlcnRpZXMsIGEganNvbiBzdHJpbmcsIHRoZSBkZXNjcmlwdGlvbiBzaG91bGQgYmUgc3RvcmVkIGhlcmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5XG4gIGV4dGVuZHMgSUJhc2ljUmVwb3NpdG9yeTxNb2RlbE5lc3RlZENvbHVtbj4ge1xuICBmaW5kTmVzdGVkQ29sdW1uc0J5TW9kZWxJZHMobW9kZWxJZHM6IG51bWJlcltdKTogUHJvbWlzZTxNb2RlbE5lc3RlZENvbHVtbltdPjtcbiAgZmluZE5lc3RlZENvbHVtbnNCeUlkcyhpZHM6IG51bWJlcltdKTogUHJvbWlzZTxNb2RlbE5lc3RlZENvbHVtbltdPjtcbn1cblxuZXhwb3J0IGNsYXNzIE1vZGVsTmVzdGVkQ29sdW1uUmVwb3NpdG9yeVxuICBleHRlbmRzIEJhc2VSZXBvc2l0b3J5PE1vZGVsTmVzdGVkQ29sdW1uPlxuICBpbXBsZW1lbnRzIElNb2RlbE5lc3RlZENvbHVtblJlcG9zaXRvcnlcbntcbiAgY29uc3RydWN0b3Ioa25leFBnOiBLbmV4KSB7XG4gICAgc3VwZXIoeyBrbmV4UGcsIHRhYmxlTmFtZTogJ21vZGVsX25lc3RlZF9jb2x1bW4nIH0pO1xuICB9XG5cbiAgcHVibGljIGZpbmROZXN0ZWRDb2x1bW5zQnlNb2RlbElkcyA9IGFzeW5jIChtb2RlbElkczogbnVtYmVyW10pID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmtuZXgodGhpcy50YWJsZU5hbWUpXG4gICAgICAuc2VsZWN0KCcqJylcbiAgICAgIC53aGVyZUluKCdtb2RlbF9pZCcsIG1vZGVsSWRzKTtcbiAgICByZXR1cm4gcmVzdWx0Lm1hcCgocikgPT4gdGhpcy50cmFuc2Zvcm1Gcm9tREJEYXRhKHIpKTtcbiAgfTtcblxuICBwdWJsaWMgZmluZE5lc3RlZENvbHVtbnNCeUlkcyA9IGFzeW5jIChpZHM6IG51bWJlcltdKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5rbmV4KHRoaXMudGFibGVOYW1lKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAud2hlcmVJbignaWQnLCBpZHMpO1xuICAgIHJldHVybiByZXN1bHQubWFwKChyKSA9PiB0aGlzLnRyYW5zZm9ybUZyb21EQkRhdGEocikpO1xuICB9O1xuXG4gIHByb3RlY3RlZCBvdmVycmlkZSB0cmFuc2Zvcm1Ub0RCRGF0YSA9IChkYXRhOiBhbnkpID0+IHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBkYmRhdGEnKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtZWREYXRhID0gbWFwVmFsdWVzKGRhdGEsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAoWydjb2x1bW5QYXRoJywgJ3Byb3BlcnRpZXMnXS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcEtleXModHJhbnNmb3JtZWREYXRhLCAoX3ZhbHVlLCBrZXkpID0+IHNuYWtlQ2FzZShrZXkpKTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdHJhbnNmb3JtRnJvbURCRGF0YSA9IChkYXRhOiBhbnkpOiBNb2RlbE5lc3RlZENvbHVtbiA9PiB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZGJkYXRhJyk7XG4gICAgfVxuICAgIGNvbnN0IGNhbWVsQ2FzZURhdGEgPSBtYXBLZXlzKGRhdGEsIChfdmFsdWUsIGtleSkgPT4gY2FtZWxDYXNlKGtleSkpO1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBtYXBWYWx1ZXMoY2FtZWxDYXNlRGF0YSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIGlmIChbJ2NvbHVtblBhdGgnLCAncHJvcGVydGllcyddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgLy8gVGhlIHZhbHVlIGZyb20gU3FsaXRlIHdpbGwgYmUgc3RyaW5nIHR5cGUsIHdoaWxlIHRoZSB2YWx1ZSBmcm9tIFBHIGlzIEpTT04gb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KSBhcyBNb2RlbE5lc3RlZENvbHVtbjtcbiAgICByZXR1cm4gZm9ybWF0dGVkRGF0YTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlUmVwb3NpdG9yeSIsImNhbWVsQ2FzZSIsImlzUGxhaW5PYmplY3QiLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwic25ha2VDYXNlIiwiTW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5IiwiY29uc3RydWN0b3IiLCJrbmV4UGciLCJ0YWJsZU5hbWUiLCJmaW5kTmVzdGVkQ29sdW1uc0J5TW9kZWxJZHMiLCJtb2RlbElkcyIsInJlc3VsdCIsImtuZXgiLCJzZWxlY3QiLCJ3aGVyZUluIiwibWFwIiwiciIsInRyYW5zZm9ybUZyb21EQkRhdGEiLCJmaW5kTmVzdGVkQ29sdW1uc0J5SWRzIiwiaWRzIiwidHJhbnNmb3JtVG9EQkRhdGEiLCJkYXRhIiwiRXJyb3IiLCJ0cmFuc2Zvcm1lZERhdGEiLCJ2YWx1ZSIsImtleSIsImluY2x1ZGVzIiwiSlNPTiIsInN0cmluZ2lmeSIsIl92YWx1ZSIsImNhbWVsQ2FzZURhdGEiLCJmb3JtYXR0ZWREYXRhIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/modelNestedColumnRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/modelRepository.ts":
/*!***********************************************************!*\
  !*** ./src/apollo/server/repositories/modelRepository.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelRepository: () => (/* binding */ ModelRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass ModelRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"model\"\n        });\n    }\n    async findAllByIds(ids) {\n        const res = await this.knex(this.tableName).whereIn(\"id\", ids);\n        return res.map((r)=>this.transformFromDBData(r));\n    }\n    async deleteAllBySourceTableNames(sourceTableNames, queryOptions) {\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const builder = executer(this.tableName).whereIn(\"source_table_name\", sourceTableNames).delete();\n        return await builder;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvbW9kZWxSZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBSzBCO0FBc0JuQixNQUFNQyx3QkFDSEQsMkRBQWNBO0lBR3RCRSxZQUFZQyxNQUFZLENBQUU7UUFDeEIsS0FBSyxDQUFDO1lBQUVBO1lBQVFDLFdBQVc7UUFBUTtJQUNyQztJQUNBLE1BQWFDLGFBQWFDLEdBQWEsRUFBRTtRQUN2QyxNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQVEsSUFBSSxDQUFDSixTQUFTLEVBQUVLLE9BQU8sQ0FBQyxNQUFNSDtRQUNqRSxPQUFPQyxJQUFJRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTSxJQUFJLENBQUNDLG1CQUFtQixDQUFDRDtJQUNqRDtJQUVBLE1BQWFFLDRCQUNYQyxnQkFBMEIsRUFDMUJDLFlBQTRCLEVBQzVCO1FBQ0EsTUFBTUMsV0FBV0QsY0FBY0UsS0FBS0YsYUFBYUUsRUFBRSxHQUFHLElBQUksQ0FBQ1QsSUFBSTtRQUMvRCxNQUFNVSxVQUFVRixTQUFTLElBQUksQ0FBQ1osU0FBUyxFQUNwQ0ssT0FBTyxDQUFDLHFCQUFxQkssa0JBQzdCSyxNQUFNO1FBQ1QsT0FBTyxNQUFNRDtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL21vZGVsUmVwb3NpdG9yeS50cz9kMWZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtuZXggfSBmcm9tICdrbmV4JztcbmltcG9ydCB7XG4gIEJhc2VSZXBvc2l0b3J5LFxuICBJQmFzaWNSZXBvc2l0b3J5LFxuICBJUXVlcnlPcHRpb25zLFxufSBmcm9tICcuL2Jhc2VSZXBvc2l0b3J5JztcblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbCB7XG4gIGlkOiBudW1iZXI7IC8vIElEXG4gIHByb2plY3RJZDogbnVtYmVyOyAvLyBSZWZlcmVuY2UgdG8gcHJvamVjdC5pZFxuICBkaXNwbGF5TmFtZTogc3RyaW5nOyAvLyBNb2RlbCBuYW1lIGRpc3BsYXllZCBpbiBVSVxuICBzb3VyY2VUYWJsZU5hbWU6IHN0cmluZzsgLy8gdGhlIHRhYmxlIG5hbWUgaW4gdGhlIGRhdGFzb3VyY2VcbiAgcmVmZXJlbmNlTmFtZTogc3RyaW5nOyAvLyB0aGUgbmFtZSB1c2VkIGluIHRoZSBNREwgc3RydWN0dXJlXG4gIHJlZlNxbDogc3RyaW5nOyAvLyBSZWZlcmVuY2UgU1FMXG4gIGNhY2hlZDogYm9vbGVhbjsgLy8gTW9kZWwgaXMgY2FjaGVkIG9yIG5vdFxuICByZWZyZXNoVGltZTogc3RyaW5nIHwgbnVsbDsgLy8gQ29udGFpbiBhIG51bWJlciBmb2xsb3dlZCBieSBhIHRpbWUgdW5pdCAobnMsIHVzLCBtcywgcywgbSwgaCwgZCkuIEZvciBleGFtcGxlLCBcIjJoXCJcbiAgcHJvcGVydGllczogc3RyaW5nIHwgbnVsbDsgLy8gTW9kZWwgcHJvcGVydGllcywgYSBqc29uIHN0cmluZywgdGhlIGRlc2NyaXB0aW9uIGFuZCBkaXNwbGF5TmFtZSBzaG91bGQgYmUgc3RvcmVkIGhlcmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTW9kZWxSZXBvc2l0b3J5IGV4dGVuZHMgSUJhc2ljUmVwb3NpdG9yeTxNb2RlbD4ge1xuICBmaW5kQWxsQnlJZHMoaWRzOiBudW1iZXJbXSk6IFByb21pc2U8TW9kZWxbXT47XG4gIGRlbGV0ZUFsbEJ5U291cmNlVGFibGVOYW1lcyhcbiAgICBzb3VyY2VUYWJsZU5hbWVzOiBzdHJpbmdbXSxcbiAgICBxdWVyeU9wdGlvbnM/OiBJUXVlcnlPcHRpb25zLFxuICApOiBQcm9taXNlPG51bWJlcj47XG59XG5cbmV4cG9ydCBjbGFzcyBNb2RlbFJlcG9zaXRvcnlcbiAgZXh0ZW5kcyBCYXNlUmVwb3NpdG9yeTxNb2RlbD5cbiAgaW1wbGVtZW50cyBJTW9kZWxSZXBvc2l0b3J5XG57XG4gIGNvbnN0cnVjdG9yKGtuZXhQZzogS25leCkge1xuICAgIHN1cGVyKHsga25leFBnLCB0YWJsZU5hbWU6ICdtb2RlbCcgfSk7XG4gIH1cbiAgcHVibGljIGFzeW5jIGZpbmRBbGxCeUlkcyhpZHM6IG51bWJlcltdKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5rbmV4PE1vZGVsPih0aGlzLnRhYmxlTmFtZSkud2hlcmVJbignaWQnLCBpZHMpO1xuICAgIHJldHVybiByZXMubWFwKChyKSA9PiB0aGlzLnRyYW5zZm9ybUZyb21EQkRhdGEocikpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlbGV0ZUFsbEJ5U291cmNlVGFibGVOYW1lcyhcbiAgICBzb3VyY2VUYWJsZU5hbWVzOiBzdHJpbmdbXSxcbiAgICBxdWVyeU9wdGlvbnM/OiBJUXVlcnlPcHRpb25zLFxuICApIHtcbiAgICBjb25zdCBleGVjdXRlciA9IHF1ZXJ5T3B0aW9ucz8udHggPyBxdWVyeU9wdGlvbnMudHggOiB0aGlzLmtuZXg7XG4gICAgY29uc3QgYnVpbGRlciA9IGV4ZWN1dGVyKHRoaXMudGFibGVOYW1lKVxuICAgICAgLndoZXJlSW4oJ3NvdXJjZV90YWJsZV9uYW1lJywgc291cmNlVGFibGVOYW1lcylcbiAgICAgIC5kZWxldGUoKTtcbiAgICByZXR1cm4gYXdhaXQgYnVpbGRlcjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VSZXBvc2l0b3J5IiwiTW9kZWxSZXBvc2l0b3J5IiwiY29uc3RydWN0b3IiLCJrbmV4UGciLCJ0YWJsZU5hbWUiLCJmaW5kQWxsQnlJZHMiLCJpZHMiLCJyZXMiLCJrbmV4Iiwid2hlcmVJbiIsIm1hcCIsInIiLCJ0cmFuc2Zvcm1Gcm9tREJEYXRhIiwiZGVsZXRlQWxsQnlTb3VyY2VUYWJsZU5hbWVzIiwic291cmNlVGFibGVOYW1lcyIsInF1ZXJ5T3B0aW9ucyIsImV4ZWN1dGVyIiwidHgiLCJidWlsZGVyIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/modelRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/projectRepository.ts":
/*!*************************************************************!*\
  !*** ./src/apollo/server/repositories/projectRepository.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectRepository: () => (/* binding */ ProjectRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isEmpty */ \"lodash/isEmpty\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _server_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @server/types */ \"(api)/./src/apollo/server/types/index.ts\");\n\n\n\n\n\n\n\n\nclass ProjectRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"project\"\n        });\n        this.jsonTypeColumns = [\n            \"questions\",\n            \"questions_error\",\n            \"connection_info\"\n        ];\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected db data\");\n            }\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(data, (value, key)=>{\n                if (this.jsonTypeColumns.includes(key) && typeof value === \"string\") {\n                    // should return {} if value is null / {}, use value ? {} : JSON.parse(value) will throw error when value is null\n                    return lodash_isEmpty__WEBPACK_IMPORTED_MODULE_6___default()(value) ? {} : JSON.parse(value);\n                }\n                if (key === \"type\") {\n                    return _server_types__WEBPACK_IMPORTED_MODULE_7__.DataSourceName[value];\n                }\n                return value;\n            });\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(formattedData, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            return camelCaseData;\n        };\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected db data\");\n            }\n            const snakeCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default()(key));\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(snakeCaseData, (value, key)=>{\n                if (this.jsonTypeColumns.includes(key) && typeof value !== \"string\") {\n                    return JSON.stringify(value);\n                }\n                return value;\n            });\n            return formattedData;\n        };\n    }\n    async getCurrentProject() {\n        const projects = await this.findAll({\n            order: \"id\",\n            limit: 1\n        });\n        if (!projects.length) {\n            throw new Error(\"No project found\");\n        }\n        return projects[0];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/projectRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/relationshipRepository.ts":
/*!******************************************************************!*\
  !*** ./src/apollo/server/repositories/relationshipRepository.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RelationRepository: () => (/* binding */ RelationRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass RelationRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"relation\"\n        });\n    }\n    async findRelationsBy({ columnIds, modelIds }, queryOptions) {\n        let executer = this.knex;\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            executer = tx;\n        }\n        // select the leftModel name and rightModel name along with relation\n        const builder = executer(this.tableName).join(\"model_column AS fmc\", `${this.tableName}.from_column_id`, \"=\", \"fmc.id\").join(\"model_column AS tmc\", `${this.tableName}.to_column_id`, \"=\", \"tmc.id\");\n        if (columnIds && columnIds.length > 0) {\n            builder.whereIn(`${this.tableName}.from_column_id`, columnIds).orWhereIn(`${this.tableName}.to_column_id`, columnIds);\n        }\n        if (modelIds && modelIds.length > 0) {\n            builder.whereIn(\"fmc.model_id\", modelIds).orWhereIn(\"tmc.model_id\", modelIds);\n        }\n        const result = await builder.select(`${this.tableName}.*`, \"fmc.model_id AS fromModelId\", \"tmc.model_id AS toModelId\");\n        return result.map((r)=>this.transformFromDBData(r));\n    }\n    async findRelationsByIds(ids, queryOptions) {\n        let executer = this.knex;\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            executer = tx;\n        }\n        const result = await executer(this.tableName).whereIn(\"id\", ids).select(\"*\");\n        return result.map((r)=>this.transformFromDBData(r));\n    }\n    async deleteRelationsByColumnIds(columnIds, queryOptions) {\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            await tx(this.tableName).whereIn(\"from_column_id\", columnIds).orWhereIn(\"to_column_id\", columnIds).delete();\n            return;\n        }\n        await this.knex(this.tableName).whereIn(\"from_column_id\", columnIds).orWhereIn(\"to_column_id\", columnIds).delete();\n    }\n    async findRelationInfoBy(filter, queryOptions) {\n        const { projectId, columnIds, modelIds } = filter;\n        let executer = this.knex;\n        if (queryOptions && queryOptions.tx) {\n            const { tx } = queryOptions;\n            executer = tx;\n        }\n        // select the leftModel name and rightModel name along with relation\n        const builder = executer(this.tableName).join(\"model_column AS fmc\", `${this.tableName}.from_column_id`, \"=\", \"fmc.id\").join(\"model_column AS tmc\", `${this.tableName}.to_column_id`, \"=\", \"tmc.id\").join(\"model AS fm\", \"fmc.model_id\", \"=\", \"fm.id\").join(\"model AS tm\", \"tmc.model_id\", \"=\", \"tm.id\");\n        if (projectId) {\n            builder.where(`${this.tableName}.project_id`, projectId);\n        } else if (columnIds && columnIds.length > 0) {\n            builder.whereIn(`${this.tableName}.from_column_id`, columnIds).orWhereIn(`${this.tableName}.to_column_id`, columnIds);\n        } else if (modelIds && modelIds.length > 0) {\n            builder.whereIn(\"fmc.model_id\", modelIds).orWhereIn(\"tmc.model_id\", modelIds);\n        }\n        const result = await builder.select(`${this.tableName}.*`, \"fm.id AS fromModelId\", \"fm.reference_name AS fromModelName\", \"fm.display_name AS fromModelDisplayName\", \"tm.id AS toModelId\", \"tm.reference_name AS toModelName\", \"tm.display_name AS toModelDisplayName\", \"fmc.reference_name AS fromColumnName\", \"fmc.display_name AS fromColumnDisplayName\", \"tmc.reference_name AS toColumnName\", \"tmc.display_name AS toColumnDisplayName\");\n        return result.map((r)=>this.transformFromDBData(r));\n    }\n    async findExistedRelationBetweenModels(relation) {\n        const { fromModelId, fromColumnId, toModelId, toColumnId } = relation;\n        const query = this.knex(this.tableName).join(\"model_column AS fmc\", `${this.tableName}.from_column_id`, \"=\", \"fmc.id\").join(\"model_column AS tmc\", `${this.tableName}.to_column_id`, \"=\", \"tmc.id\")// duplicate relationship check\n        .whereRaw(`fmc.model_id = ? And ${this.tableName}.from_column_id = ? And tmc.model_id = ? And ${this.tableName}.to_column_id = ?`, [\n            fromModelId,\n            fromColumnId,\n            toModelId,\n            toColumnId\n        ])// reverse relationship check\n        .orWhereRaw(`fmc.model_id = ? And ${this.tableName}.from_column_id = ? And tmc.model_id = ? And ${this.tableName}.to_column_id = ?`, [\n            toModelId,\n            toColumnId,\n            fromModelId,\n            fromColumnId\n        ]).select(`${this.tableName}.*`);\n        const result = await query;\n        return result.map((r)=>this.transformFromDBData(r));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/relationshipRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/schemaChangeRepository.ts":
/*!******************************************************************!*\
  !*** ./src/apollo/server/repositories/schemaChangeRepository.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaChangeRepository: () => (/* binding */ SchemaChangeRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nclass SchemaChangeRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"schema_change\"\n        });\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const transformedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(data, (value, key)=>{\n                if ([\n                    \"change\",\n                    \"resolve\"\n                ].includes(key)) {\n                    return value ? JSON.stringify(value) : null;\n                }\n                return value;\n            });\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(transformedData, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default()(key));\n        };\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if ([\n                    \"change\",\n                    \"resolve\"\n                ].includes(key)) {\n                    // The value from Sqlite will be string type, while the value from PG is JSON object\n                    if (typeof value === \"string\") {\n                        return value ? JSON.parse(value) : value;\n                    } else {\n                        return value;\n                    }\n                }\n                return value;\n            });\n            return formattedData;\n        };\n    }\n    async findLastSchemaChange(projectId) {\n        const res = await this.knex.select(\"*\").from(this.tableName).where(this.transformToDBData({\n            projectId\n        })).orderBy(\"created_at\", \"desc\").first();\n        return res && this.transformFromDBData(res) || null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvc2NoZW1hQ2hhbmdlUmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDb0U7QUFPcEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQW9CVCxNQUFNTSwrQkFDSE4sMkRBQWNBO0lBR3RCTyxZQUFZQyxNQUFZLENBQUU7UUFDeEIsS0FBSyxDQUFDO1lBQUVBO1lBQVFDLFdBQVc7UUFBZ0I7YUFhMUJDLG9CQUFvQixDQUFDQztZQUN0QyxJQUFJLENBQUNULDJEQUFhQSxDQUFDUyxPQUFPO2dCQUN4QixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFDQSxNQUFNQyxrQkFBa0JULHVEQUFTQSxDQUFDTyxNQUFNLENBQUNHLE9BQU9DO2dCQUM5QyxJQUFJO29CQUFDO29CQUFVO2lCQUFVLENBQUNDLFFBQVEsQ0FBQ0QsTUFBTTtvQkFDdkMsT0FBT0QsUUFBUUcsS0FBS0MsU0FBUyxDQUFDSixTQUFTO2dCQUN6QztnQkFDQSxPQUFPQTtZQUNUO1lBQ0EsT0FBT1gscURBQU9BLENBQUNVLGlCQUFpQixDQUFDTSxRQUFRSixNQUFRVix1REFBU0EsQ0FBQ1U7UUFDN0Q7YUFFbUJLLHNCQUFzQixDQUFDVDtZQUN4QyxJQUFJLENBQUNULDJEQUFhQSxDQUFDUyxPQUFPO2dCQUN4QixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFDQSxNQUFNUyxnQkFBZ0JsQixxREFBT0EsQ0FBQ1EsTUFBTSxDQUFDUSxRQUFRSixNQUFRZCx1REFBU0EsQ0FBQ2M7WUFDL0QsTUFBTU8sZ0JBQWdCbEIsdURBQVNBLENBQUNpQixlQUFlLENBQUNQLE9BQU9DO2dCQUNyRCxJQUFJO29CQUFDO29CQUFVO2lCQUFVLENBQUNDLFFBQVEsQ0FBQ0QsTUFBTTtvQkFDdkMsb0ZBQW9GO29CQUNwRixJQUFJLE9BQU9ELFVBQVUsVUFBVTt3QkFDN0IsT0FBT0EsUUFBUUcsS0FBS00sS0FBSyxDQUFDVCxTQUFTQTtvQkFDckMsT0FBTzt3QkFDTCxPQUFPQTtvQkFDVDtnQkFDRjtnQkFDQSxPQUFPQTtZQUNUO1lBQ0EsT0FBT1E7UUFDVDtJQTFDQTtJQUVBLE1BQWFFLHFCQUFxQkMsU0FBaUIsRUFBRTtRQUNuRCxNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQ3hCQyxNQUFNLENBQUMsS0FDUEMsSUFBSSxDQUFDLElBQUksQ0FBQ3BCLFNBQVMsRUFDbkJxQixLQUFLLENBQUMsSUFBSSxDQUFDcEIsaUJBQWlCLENBQUM7WUFBRWU7UUFBVSxJQUN6Q00sT0FBTyxDQUFDLGNBQWMsUUFDdEJDLEtBQUs7UUFDUixPQUFPLE9BQVEsSUFBSSxDQUFDWixtQkFBbUIsQ0FBQ00sUUFBUztJQUNuRDtBQWlDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvc2NoZW1hQ2hhbmdlUmVwb3NpdG9yeS50cz9jYThmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtuZXggfSBmcm9tICdrbmV4JztcbmltcG9ydCB7IEJhc2VSZXBvc2l0b3J5LCBJQmFzaWNSZXBvc2l0b3J5IH0gZnJvbSAnLi9iYXNlUmVwb3NpdG9yeSc7XG5pbXBvcnQge1xuICBjYW1lbENhc2UsXG4gIGlzUGxhaW5PYmplY3QsXG4gIG1hcEtleXMsXG4gIG1hcFZhbHVlcyxcbiAgc25ha2VDYXNlLFxufSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtcbiAgRGF0YVNvdXJjZVNjaGVtYUNoYW5nZSxcbiAgRGF0YVNvdXJjZVNjaGVtYVJlc29sdmUsXG59IGZyb20gJ0BzZXJ2ZXIvbWFuYWdlcnMvZGF0YVNvdXJjZVNjaGVtYURldGVjdG9yJztcblxuZXhwb3J0IGludGVyZmFjZSBTY2hlbWFDaGFuZ2Uge1xuICBpZDogbnVtYmVyOyAvLyBJRFxuICBwcm9qZWN0SWQ6IG51bWJlcjsgLy8gUmVmZXJlbmNlIHRvIHByb2plY3QuaWRcbiAgY2hhbmdlOiBEYXRhU291cmNlU2NoZW1hQ2hhbmdlOyAvLyBTY2hlbWEgY2hhbmdlXG4gIHJlc29sdmU6IERhdGFTb3VyY2VTY2hlbWFSZXNvbHZlOyAvLyBTYXZlIHJlc29sdmVcbiAgY3JlYXRlZEF0OiBzdHJpbmc7IC8vIENyZWF0ZWQgYXRcbiAgdXBkYXRlQXQ6IHN0cmluZzsgLy8gVXBkYXRlZCBhdFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTY2hlbWFDaGFuZ2VSZXBvc2l0b3J5XG4gIGV4dGVuZHMgSUJhc2ljUmVwb3NpdG9yeTxTY2hlbWFDaGFuZ2U+IHtcbiAgZmluZExhc3RTY2hlbWFDaGFuZ2UocHJvamVjdElkOiBudW1iZXIpOiBQcm9taXNlPFNjaGVtYUNoYW5nZSB8IG51bGw+O1xufVxuXG5leHBvcnQgY2xhc3MgU2NoZW1hQ2hhbmdlUmVwb3NpdG9yeVxuICBleHRlbmRzIEJhc2VSZXBvc2l0b3J5PFNjaGVtYUNoYW5nZT5cbiAgaW1wbGVtZW50cyBJU2NoZW1hQ2hhbmdlUmVwb3NpdG9yeVxue1xuICBjb25zdHJ1Y3RvcihrbmV4UGc6IEtuZXgpIHtcbiAgICBzdXBlcih7IGtuZXhQZywgdGFibGVOYW1lOiAnc2NoZW1hX2NoYW5nZScgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZmluZExhc3RTY2hlbWFDaGFuZ2UocHJvamVjdElkOiBudW1iZXIpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmtuZXhcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmZyb20odGhpcy50YWJsZU5hbWUpXG4gICAgICAud2hlcmUodGhpcy50cmFuc2Zvcm1Ub0RCRGF0YSh7IHByb2plY3RJZCB9KSlcbiAgICAgIC5vcmRlckJ5KCdjcmVhdGVkX2F0JywgJ2Rlc2MnKVxuICAgICAgLmZpcnN0KCk7XG4gICAgcmV0dXJuIChyZXMgJiYgdGhpcy50cmFuc2Zvcm1Gcm9tREJEYXRhKHJlcykpIHx8IG51bGw7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdHJhbnNmb3JtVG9EQkRhdGEgPSAoZGF0YTogYW55KSA9PiB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZGJkYXRhJyk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkRGF0YSA9IG1hcFZhbHVlcyhkYXRhLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKFsnY2hhbmdlJywgJ3Jlc29sdmUnXS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hcEtleXModHJhbnNmb3JtZWREYXRhLCAoX3ZhbHVlLCBrZXkpID0+IHNuYWtlQ2FzZShrZXkpKTtcbiAgfTtcblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdHJhbnNmb3JtRnJvbURCRGF0YSA9IChkYXRhOiBhbnkpOiBTY2hlbWFDaGFuZ2UgPT4ge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGRiZGF0YScpO1xuICAgIH1cbiAgICBjb25zdCBjYW1lbENhc2VEYXRhID0gbWFwS2V5cyhkYXRhLCAoX3ZhbHVlLCBrZXkpID0+IGNhbWVsQ2FzZShrZXkpKTtcbiAgICBjb25zdCBmb3JtYXR0ZWREYXRhID0gbWFwVmFsdWVzKGNhbWVsQ2FzZURhdGEsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICBpZiAoWydjaGFuZ2UnLCAncmVzb2x2ZSddLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgLy8gVGhlIHZhbHVlIGZyb20gU3FsaXRlIHdpbGwgYmUgc3RyaW5nIHR5cGUsIHdoaWxlIHRoZSB2YWx1ZSBmcm9tIFBHIGlzIEpTT04gb2JqZWN0XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID8gSlNPTi5wYXJzZSh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KSBhcyBTY2hlbWFDaGFuZ2U7XG4gICAgcmV0dXJuIGZvcm1hdHRlZERhdGE7XG4gIH07XG59XG4iXSwibmFtZXMiOlsiQmFzZVJlcG9zaXRvcnkiLCJjYW1lbENhc2UiLCJpc1BsYWluT2JqZWN0IiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsInNuYWtlQ2FzZSIsIlNjaGVtYUNoYW5nZVJlcG9zaXRvcnkiLCJjb25zdHJ1Y3RvciIsImtuZXhQZyIsInRhYmxlTmFtZSIsInRyYW5zZm9ybVRvREJEYXRhIiwiZGF0YSIsIkVycm9yIiwidHJhbnNmb3JtZWREYXRhIiwidmFsdWUiLCJrZXkiLCJpbmNsdWRlcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJfdmFsdWUiLCJ0cmFuc2Zvcm1Gcm9tREJEYXRhIiwiY2FtZWxDYXNlRGF0YSIsImZvcm1hdHRlZERhdGEiLCJwYXJzZSIsImZpbmRMYXN0U2NoZW1hQ2hhbmdlIiwicHJvamVjdElkIiwicmVzIiwia25leCIsInNlbGVjdCIsImZyb20iLCJ3aGVyZSIsIm9yZGVyQnkiLCJmaXJzdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/schemaChangeRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/threadRepository.ts":
/*!************************************************************!*\
  !*** ./src/apollo/server/repositories/threadRepository.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThreadRepository: () => (/* binding */ ThreadRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nclass ThreadRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"thread\"\n        });\n        this.jsonbColumns = [\n            \"questions\",\n            \"questionsError\"\n        ];\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const transformData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if (this.jsonbColumns.includes(key)) {\n                    if (typeof value === \"string\") {\n                        return value ? JSON.parse(value) : value;\n                    } else {\n                        return value;\n                    }\n                }\n                return value;\n            });\n            return transformData;\n        };\n        this.transformToDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const transformedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(data, (value, key)=>{\n                if (this.jsonbColumns.includes(key)) {\n                    return JSON.stringify(value);\n                } else {\n                    return value;\n                }\n            });\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(transformedData, (_value, key)=>lodash_snakeCase__WEBPACK_IMPORTED_MODULE_5___default()(key));\n        };\n    }\n    async listAllTimeDescOrder(projectId) {\n        const threads = await this.knex(this.tableName).where(this.transformToDBData({\n            projectId\n        })).orderBy(\"created_at\", \"desc\");\n        return threads.map((thread)=>this.transformFromDBData(thread));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvdGhyZWFkUmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDb0U7QUFPcEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQXdCVCxNQUFNTSx5QkFDSE4sMkRBQWNBO0lBS3RCTyxZQUFZQyxNQUFZLENBQUU7UUFDeEIsS0FBSyxDQUFDO1lBQUVBO1lBQVFDLFdBQVc7UUFBUzthQUhyQkMsZUFBZTtZQUFDO1lBQWE7U0FBaUI7YUFhNUNDLHNCQUFzQixDQUFDQztZQUN4QyxJQUFJLENBQUNWLDJEQUFhQSxDQUFDVSxPQUFPO2dCQUN4QixNQUFNLElBQUlDLE1BQU07WUFDbEI7WUFDQSxNQUFNQyxnQkFBZ0JYLHFEQUFPQSxDQUFDUyxNQUFNLENBQUNHLFFBQVFDLE1BQVFmLHVEQUFTQSxDQUFDZTtZQUMvRCxNQUFNQyxnQkFBZ0JiLHVEQUFTQSxDQUFDVSxlQUFlLENBQUNJLE9BQU9GO2dCQUNyRCxJQUFJLElBQUksQ0FBQ04sWUFBWSxDQUFDUyxRQUFRLENBQUNILE1BQU07b0JBQ25DLElBQUksT0FBT0UsVUFBVSxVQUFVO3dCQUM3QixPQUFPQSxRQUFRRSxLQUFLQyxLQUFLLENBQUNILFNBQVNBO29CQUNyQyxPQUFPO3dCQUNMLE9BQU9BO29CQUNUO2dCQUNGO2dCQUNBLE9BQU9BO1lBQ1Q7WUFDQSxPQUFPRDtRQUNUO2FBRW1CSyxvQkFBb0IsQ0FBQ1Y7WUFDdEMsSUFBSSxDQUFDViwyREFBYUEsQ0FBQ1UsT0FBTztnQkFDeEIsTUFBTSxJQUFJQyxNQUFNO1lBQ2xCO1lBQ0EsTUFBTVUsa0JBQWtCbkIsdURBQVNBLENBQUNRLE1BQU0sQ0FBQ00sT0FBT0Y7Z0JBQzlDLElBQUksSUFBSSxDQUFDTixZQUFZLENBQUNTLFFBQVEsQ0FBQ0gsTUFBTTtvQkFDbkMsT0FBT0ksS0FBS0ksU0FBUyxDQUFDTjtnQkFDeEIsT0FBTztvQkFDTCxPQUFPQTtnQkFDVDtZQUNGO1lBQ0EsT0FBT2YscURBQU9BLENBQUNvQixpQkFBaUIsQ0FBQ1IsUUFBUUMsTUFBUVgsdURBQVNBLENBQUNXO1FBQzdEO0lBdkNBO0lBRUEsTUFBYVMscUJBQXFCQyxTQUFpQixFQUFxQjtRQUN0RSxNQUFNQyxVQUFVLE1BQU0sSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDbkIsU0FBUyxFQUMzQ29CLEtBQUssQ0FBQyxJQUFJLENBQUNQLGlCQUFpQixDQUFDO1lBQUVJO1FBQVUsSUFDekNJLE9BQU8sQ0FBQyxjQUFjO1FBQ3pCLE9BQU9ILFFBQVFJLEdBQUcsQ0FBQyxDQUFDQyxTQUFXLElBQUksQ0FBQ3JCLG1CQUFtQixDQUFDcUI7SUFDMUQ7QUFpQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVwb3NpdG9yaWVzL3RocmVhZFJlcG9zaXRvcnkudHM/YzBiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCc7XG5pbXBvcnQgeyBCYXNlUmVwb3NpdG9yeSwgSUJhc2ljUmVwb3NpdG9yeSB9IGZyb20gJy4vYmFzZVJlcG9zaXRvcnknO1xuaW1wb3J0IHtcbiAgY2FtZWxDYXNlLFxuICBpc1BsYWluT2JqZWN0LFxuICBtYXBLZXlzLFxuICBtYXBWYWx1ZXMsXG4gIHNuYWtlQ2FzZSxcbn0gZnJvbSAnbG9kYXNoJztcblxuZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSZWNvbW1lbmRhdGlvblF1ZXN0aW9uUmVzdWx0IHtcbiAgcXVlc3Rpb246IHN0cmluZztcbiAgY2F0ZWdvcnk6IHN0cmluZztcbiAgc3FsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkIHtcbiAgaWQ6IG51bWJlcjsgLy8gSURcbiAgcHJvamVjdElkOiBudW1iZXI7IC8vIFJlZmVyZW5jZSB0byBwcm9qZWN0LmlkXG4gIHN1bW1hcnk6IHN0cmluZzsgLy8gVGhyZWFkIHN1bW1hcnlcblxuICAvLyByZWNvbW1lbmQgcXVlc3Rpb25cbiAgcXVlcnlJZD86IHN0cmluZzsgLy8gUXVlcnkgSURcbiAgcXVlc3Rpb25zPzogVGhyZWFkUmVjb21tZW5kYXRpb25RdWVzdGlvblJlc3VsdFtdOyAvLyBSZWNvbW1lbmRlZCBxdWVzdGlvbnNcbiAgcXVlc3Rpb25zU3RhdHVzPzogc3RyaW5nOyAvLyBTdGF0dXMgb2YgdGhlIHJlY29tbWVuZGVkIHF1ZXN0aW9uc1xuICBxdWVzdGlvbnNFcnJvcj86IG9iamVjdDsgLy8gRXJyb3Igb2YgdGhlIHJlY29tbWVuZGVkIHF1ZXN0aW9uc1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUaHJlYWRSZXBvc2l0b3J5IGV4dGVuZHMgSUJhc2ljUmVwb3NpdG9yeTxUaHJlYWQ+IHtcbiAgbGlzdEFsbFRpbWVEZXNjT3JkZXIocHJvamVjdElkOiBudW1iZXIpOiBQcm9taXNlPFRocmVhZFtdPjtcbn1cblxuZXhwb3J0IGNsYXNzIFRocmVhZFJlcG9zaXRvcnlcbiAgZXh0ZW5kcyBCYXNlUmVwb3NpdG9yeTxUaHJlYWQ+XG4gIGltcGxlbWVudHMgSVRocmVhZFJlcG9zaXRvcnlcbntcbiAgcHJpdmF0ZSByZWFkb25seSBqc29uYkNvbHVtbnMgPSBbJ3F1ZXN0aW9ucycsICdxdWVzdGlvbnNFcnJvciddO1xuXG4gIGNvbnN0cnVjdG9yKGtuZXhQZzogS25leCkge1xuICAgIHN1cGVyKHsga25leFBnLCB0YWJsZU5hbWU6ICd0aHJlYWQnIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RBbGxUaW1lRGVzY09yZGVyKHByb2plY3RJZDogbnVtYmVyKTogUHJvbWlzZTxUaHJlYWRbXT4ge1xuICAgIGNvbnN0IHRocmVhZHMgPSBhd2FpdCB0aGlzLmtuZXgodGhpcy50YWJsZU5hbWUpXG4gICAgICAud2hlcmUodGhpcy50cmFuc2Zvcm1Ub0RCRGF0YSh7IHByb2plY3RJZCB9KSlcbiAgICAgIC5vcmRlckJ5KCdjcmVhdGVkX2F0JywgJ2Rlc2MnKTtcbiAgICByZXR1cm4gdGhyZWFkcy5tYXAoKHRocmVhZCkgPT4gdGhpcy50cmFuc2Zvcm1Gcm9tREJEYXRhKHRocmVhZCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHRyYW5zZm9ybUZyb21EQkRhdGEgPSAoZGF0YTogYW55KTogVGhyZWFkID0+IHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBkYmRhdGEnKTtcbiAgICB9XG4gICAgY29uc3QgY2FtZWxDYXNlRGF0YSA9IG1hcEtleXMoZGF0YSwgKF92YWx1ZSwga2V5KSA9PiBjYW1lbENhc2Uoa2V5KSk7XG4gICAgY29uc3QgdHJhbnNmb3JtRGF0YSA9IG1hcFZhbHVlcyhjYW1lbENhc2VEYXRhLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKHRoaXMuanNvbmJDb2x1bW5zLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0cmFuc2Zvcm1EYXRhIGFzIFRocmVhZDtcbiAgfTtcblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgdHJhbnNmb3JtVG9EQkRhdGEgPSAoZGF0YTogYW55KSA9PiB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgZGJkYXRhJyk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkRGF0YSA9IG1hcFZhbHVlcyhkYXRhLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgaWYgKHRoaXMuanNvbmJDb2x1bW5zLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbWFwS2V5cyh0cmFuc2Zvcm1lZERhdGEsIChfdmFsdWUsIGtleSkgPT4gc25ha2VDYXNlKGtleSkpO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbIkJhc2VSZXBvc2l0b3J5IiwiY2FtZWxDYXNlIiwiaXNQbGFpbk9iamVjdCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJzbmFrZUNhc2UiLCJUaHJlYWRSZXBvc2l0b3J5IiwiY29uc3RydWN0b3IiLCJrbmV4UGciLCJ0YWJsZU5hbWUiLCJqc29uYkNvbHVtbnMiLCJ0cmFuc2Zvcm1Gcm9tREJEYXRhIiwiZGF0YSIsIkVycm9yIiwiY2FtZWxDYXNlRGF0YSIsIl92YWx1ZSIsImtleSIsInRyYW5zZm9ybURhdGEiLCJ2YWx1ZSIsImluY2x1ZGVzIiwiSlNPTiIsInBhcnNlIiwidHJhbnNmb3JtVG9EQkRhdGEiLCJ0cmFuc2Zvcm1lZERhdGEiLCJzdHJpbmdpZnkiLCJsaXN0QWxsVGltZURlc2NPcmRlciIsInByb2plY3RJZCIsInRocmVhZHMiLCJrbmV4Iiwid2hlcmUiLCJvcmRlckJ5IiwibWFwIiwidGhyZWFkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/threadRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/threadResponseRepository.ts":
/*!********************************************************************!*\
  !*** ./src/apollo/server/repositories/threadResponseRepository.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ThreadResponseRepository: () => (/* binding */ ThreadResponseRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/camelCase */ \"lodash/camelCase\");\n/* harmony import */ var lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_camelCase__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isPlainObject */ \"lodash/isPlainObject\");\n/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/mapKeys */ \"lodash/mapKeys\");\n/* harmony import */ var lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/mapValues */ \"lodash/mapValues\");\n/* harmony import */ var lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_mapValues__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nclass ThreadResponseRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"thread_response\"\n        });\n        this.jsonbColumns = [\n            \"answerDetail\",\n            \"breakdownDetail\",\n            \"chartDetail\"\n        ];\n        this.transformFromDBData = (data)=>{\n            if (!lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_2___default()(data)) {\n                throw new Error(\"Unexpected dbdata\");\n            }\n            const camelCaseData = lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(data, (_value, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n            const formattedData = lodash_mapValues__WEBPACK_IMPORTED_MODULE_4___default()(camelCaseData, (value, key)=>{\n                if (this.jsonbColumns.includes(key)) {\n                    // The value from Sqlite will be string type, while the value from PG is JSON object\n                    if (typeof value === \"string\") {\n                        return value ? JSON.parse(value) : value;\n                    } else {\n                        return value;\n                    }\n                }\n                return value;\n            });\n            return formattedData;\n        };\n    }\n    async getResponsesWithThread(threadId, limit) {\n        const query = this.knex(this.tableName).select(\"thread_response.*\").where({\n            thread_id: threadId\n        }).leftJoin(\"thread\", \"thread.id\", \"thread_response.thread_id\");\n        if (limit) {\n            query.orderBy(\"created_at\", \"desc\").limit(limit);\n        }\n        return (await query).map((res)=>{\n            // turn object keys into camelCase\n            return lodash_mapKeys__WEBPACK_IMPORTED_MODULE_3___default()(res, (_, key)=>lodash_camelCase__WEBPACK_IMPORTED_MODULE_1___default()(key));\n        }).map((res)=>{\n            // JSON.parse detail and error\n            const answerDetail = res.answerDetail && typeof res.answerDetail === \"string\" ? JSON.parse(res.answerDetail) : res.answerDetail;\n            const breakdownDetail = res.breakdownDetail && typeof res.breakdownDetail === \"string\" ? JSON.parse(res.breakdownDetail) : res.breakdownDetail;\n            const chartDetail = res.chartDetail && typeof res.chartDetail === \"string\" ? JSON.parse(res.chartDetail) : res.chartDetail;\n            return {\n                ...res,\n                answerDetail: answerDetail || null,\n                breakdownDetail: breakdownDetail || null,\n                chartDetail: chartDetail || null\n            };\n        });\n    }\n    async updateOne(id, data, queryOptions) {\n        const transformedData = {\n            status: data.status ? data.status : undefined,\n            answerDetail: data.answerDetail ? JSON.stringify(data.answerDetail) : undefined,\n            breakdownDetail: data.breakdownDetail ? JSON.stringify(data.breakdownDetail) : undefined,\n            chartDetail: data.chartDetail ? JSON.stringify(data.chartDetail) : undefined\n        };\n        const executer = queryOptions?.tx ? queryOptions.tx : this.knex;\n        const [result] = await executer(this.tableName).where({\n            id\n        }).update(this.transformToDBData(transformedData)).returning(\"*\");\n        return this.transformFromDBData(result);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/threadResponseRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/repositories/viewRepository.ts":
/*!**********************************************************!*\
  !*** ./src/apollo/server/repositories/viewRepository.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ViewRepository: () => (/* binding */ ViewRepository)\n/* harmony export */ });\n/* harmony import */ var _baseRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseRepository */ \"(api)/./src/apollo/server/repositories/baseRepository.ts\");\n\nclass ViewRepository extends _baseRepository__WEBPACK_IMPORTED_MODULE_0__.BaseRepository {\n    constructor(knexPg){\n        super({\n            knexPg,\n            tableName: \"view\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvdmlld1JlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDb0U7QUFjN0QsTUFBTUMsdUJBQ0hELDJEQUFjQTtJQUd0QkUsWUFBWUMsTUFBWSxDQUFFO1FBQ3hCLEtBQUssQ0FBQztZQUFFQTtZQUFRQyxXQUFXO1FBQU87SUFDcEM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXBvc2l0b3JpZXMvdmlld1JlcG9zaXRvcnkudHM/Yzk4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbmV4IH0gZnJvbSAna25leCc7XG5pbXBvcnQgeyBCYXNlUmVwb3NpdG9yeSwgSUJhc2ljUmVwb3NpdG9yeSB9IGZyb20gJy4vYmFzZVJlcG9zaXRvcnknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXcge1xuICBpZDogbnVtYmVyOyAvLyBJRFxuICBwcm9qZWN0SWQ6IG51bWJlcjsgLy8gUmVmZXJlbmNlIHRvIHByb2plY3QuaWRcbiAgbmFtZTogc3RyaW5nOyAvLyBUaGUgdmlldyBuYW1lXG4gIHN0YXRlbWVudDogc3RyaW5nOyAvLyBUaGUgU1FMIHN0YXRlbWVudCBvZiB0aGlzIHZpZXdcbiAgY2FjaGVkOiBib29sZWFuOyAvLyBWaWV3IGlzIGNhY2hlZCBvciBub3RcbiAgcmVmcmVzaFRpbWU/OiBzdHJpbmc7IC8vIENvbnRhaW4gYSBudW1iZXIgZm9sbG93ZWQgYnkgYSB0aW1lIHVuaXQgKG5zLCB1cywgbXMsIHMsIG0sIGgsIGQpLiBGb3IgZXhhbXBsZSwgXCIyaFwiXG4gIHByb3BlcnRpZXM/OiBzdHJpbmc7IC8vIFZpZXcgcHJvcGVydGllcywgYSBqc29uIHN0cmluZywgdGhlIGRlc2NyaXB0aW9uIGFuZCBkaXNwbGF5TmFtZSBzaG91bGQgYmUgc3RvcmVkIGhlcmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVmlld1JlcG9zaXRvcnkgZXh0ZW5kcyBJQmFzaWNSZXBvc2l0b3J5PFZpZXc+IHt9XG5cbmV4cG9ydCBjbGFzcyBWaWV3UmVwb3NpdG9yeVxuICBleHRlbmRzIEJhc2VSZXBvc2l0b3J5PFZpZXc+XG4gIGltcGxlbWVudHMgSVZpZXdSZXBvc2l0b3J5XG57XG4gIGNvbnN0cnVjdG9yKGtuZXhQZzogS25leCkge1xuICAgIHN1cGVyKHsga25leFBnLCB0YWJsZU5hbWU6ICd2aWV3JyB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VSZXBvc2l0b3J5IiwiVmlld1JlcG9zaXRvcnkiLCJjb25zdHJ1Y3RvciIsImtuZXhQZyIsInRhYmxlTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/repositories/viewRepository.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers.ts":
/*!****************************************!*\
  !*** ./src/apollo/server/resolvers.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var graphql_type_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql-type-json */ \"graphql-type-json\");\n/* harmony import */ var graphql_type_json__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql_type_json__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _resolvers_projectResolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resolvers/projectResolver */ \"(api)/./src/apollo/server/resolvers/projectResolver.ts\");\n/* harmony import */ var _resolvers_modelResolver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolvers/modelResolver */ \"(api)/./src/apollo/server/resolvers/modelResolver.ts\");\n/* harmony import */ var _resolvers_askingResolver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolvers/askingResolver */ \"(api)/./src/apollo/server/resolvers/askingResolver.ts\");\n/* harmony import */ var _resolvers_diagramResolver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resolvers/diagramResolver */ \"(api)/./src/apollo/server/resolvers/diagramResolver.ts\");\n/* harmony import */ var _resolvers_learningResolver__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resolvers/learningResolver */ \"(api)/./src/apollo/server/resolvers/learningResolver.ts\");\n/* harmony import */ var _resolvers_dashboardResolver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./resolvers/dashboardResolver */ \"(api)/./src/apollo/server/resolvers/dashboardResolver.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_resolvers_projectResolver__WEBPACK_IMPORTED_MODULE_1__, _resolvers_modelResolver__WEBPACK_IMPORTED_MODULE_2__, _resolvers_askingResolver__WEBPACK_IMPORTED_MODULE_3__, _resolvers_diagramResolver__WEBPACK_IMPORTED_MODULE_4__, _resolvers_dashboardResolver__WEBPACK_IMPORTED_MODULE_6__]);\n([_resolvers_projectResolver__WEBPACK_IMPORTED_MODULE_1__, _resolvers_modelResolver__WEBPACK_IMPORTED_MODULE_2__, _resolvers_askingResolver__WEBPACK_IMPORTED_MODULE_3__, _resolvers_diagramResolver__WEBPACK_IMPORTED_MODULE_4__, _resolvers_dashboardResolver__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nconst projectResolver = new _resolvers_projectResolver__WEBPACK_IMPORTED_MODULE_1__.ProjectResolver();\nconst modelResolver = new _resolvers_modelResolver__WEBPACK_IMPORTED_MODULE_2__.ModelResolver();\nconst askingResolver = new _resolvers_askingResolver__WEBPACK_IMPORTED_MODULE_3__.AskingResolver();\nconst diagramResolver = new _resolvers_diagramResolver__WEBPACK_IMPORTED_MODULE_4__.DiagramResolver();\nconst learningResolver = new _resolvers_learningResolver__WEBPACK_IMPORTED_MODULE_5__.LearningResolver();\nconst dashboardResolver = new _resolvers_dashboardResolver__WEBPACK_IMPORTED_MODULE_6__.DashboardResolver();\nconst resolvers = {\n    JSON: (graphql_type_json__WEBPACK_IMPORTED_MODULE_0___default()),\n    Query: {\n        listDataSourceTables: projectResolver.listDataSourceTables,\n        autoGenerateRelation: projectResolver.autoGenerateRelation,\n        listModels: modelResolver.listModels,\n        model: modelResolver.getModel,\n        onboardingStatus: projectResolver.getOnboardingStatus,\n        modelSync: modelResolver.checkModelSync,\n        diagram: diagramResolver.getDiagram,\n        schemaChange: projectResolver.getSchemaChange,\n        // Ask\n        askingTask: askingResolver.getAskingTask,\n        suggestedQuestions: askingResolver.getSuggestedQuestions,\n        instantRecommendedQuestions: askingResolver.getInstantRecommendedQuestions,\n        // Thread\n        thread: askingResolver.getThread,\n        threads: askingResolver.listThreads,\n        threadResponse: askingResolver.getResponse,\n        nativeSql: modelResolver.getNativeSql,\n        // Views\n        listViews: modelResolver.listViews,\n        view: modelResolver.getView,\n        // Settings\n        settings: projectResolver.getSettings,\n        getMDL: modelResolver.getMDL,\n        // Learning\n        learningRecord: learningResolver.getLearningRecord,\n        // Recommendation questions\n        getThreadRecommendationQuestions: askingResolver.getThreadRecommendationQuestions,\n        getProjectRecommendationQuestions: projectResolver.getProjectRecommendationQuestions,\n        // Dashboard\n        dashboardItems: dashboardResolver.getDashboardItems\n    },\n    Mutation: {\n        deploy: modelResolver.deploy,\n        saveDataSource: projectResolver.saveDataSource,\n        startSampleDataset: projectResolver.startSampleDataset,\n        saveTables: projectResolver.saveTables,\n        saveRelations: projectResolver.saveRelations,\n        createModel: modelResolver.createModel,\n        updateModel: modelResolver.updateModel,\n        deleteModel: modelResolver.deleteModel,\n        previewModelData: modelResolver.previewModelData,\n        updateModelMetadata: modelResolver.updateModelMetadata,\n        triggerDataSourceDetection: projectResolver.triggerDataSourceDetection,\n        resolveSchemaChange: projectResolver.resolveSchemaChange,\n        // calculated field\n        createCalculatedField: modelResolver.createCalculatedField,\n        validateCalculatedField: modelResolver.validateCalculatedField,\n        updateCalculatedField: modelResolver.updateCalculatedField,\n        deleteCalculatedField: modelResolver.deleteCalculatedField,\n        // relation\n        createRelation: modelResolver.createRelation,\n        updateRelation: modelResolver.updateRelation,\n        deleteRelation: modelResolver.deleteRelation,\n        // Ask\n        createAskingTask: askingResolver.createAskingTask,\n        cancelAskingTask: askingResolver.cancelAskingTask,\n        createInstantRecommendedQuestions: askingResolver.createInstantRecommendedQuestions,\n        // Thread\n        createThread: askingResolver.createThread,\n        updateThread: askingResolver.updateThread,\n        deleteThread: askingResolver.deleteThread,\n        createThreadResponse: askingResolver.createThreadResponse,\n        previewData: askingResolver.previewData,\n        previewBreakdownData: askingResolver.previewBreakdownData,\n        // Generate Thread Response Breakdown\n        generateThreadResponseBreakdown: askingResolver.generateThreadResponseBreakdown,\n        // Generate Thread Response Answer\n        generateThreadResponseAnswer: askingResolver.generateThreadResponseAnswer,\n        // Generate Thread Response Chart\n        generateThreadResponseChart: askingResolver.generateThreadResponseChart,\n        // Adjust Thread Response Chart\n        adjustThreadResponseChart: askingResolver.adjustThreadResponseChart,\n        // Views\n        createView: modelResolver.createView,\n        deleteView: modelResolver.deleteView,\n        previewViewData: modelResolver.previewViewData,\n        validateView: modelResolver.validateView,\n        updateViewMetadata: modelResolver.updateViewMetadata,\n        // Settings\n        resetCurrentProject: projectResolver.resetCurrentProject,\n        updateCurrentProject: projectResolver.updateCurrentProject,\n        updateDataSource: projectResolver.updateDataSource,\n        // preview\n        previewSql: modelResolver.previewSql,\n        // Learning\n        saveLearningRecord: learningResolver.saveLearningRecord,\n        // Recommendation questions\n        generateThreadRecommendationQuestions: askingResolver.generateThreadRecommendationQuestions,\n        generateProjectRecommendationQuestions: askingResolver.generateProjectRecommendationQuestions,\n        // Dashboard\n        updateDashboardItemLayouts: dashboardResolver.updateDashboardItemLayouts,\n        createDashboardItem: dashboardResolver.createDashboardItem,\n        deleteDashboardItem: dashboardResolver.deleteDashboardItem,\n        previewItemSQL: dashboardResolver.previewItemSQL\n    },\n    ThreadResponse: askingResolver.getThreadResponseNestedResolver(),\n    DetailStep: askingResolver.getDetailStepNestedResolver(),\n    ResultCandidate: askingResolver.getResultCandidateNestedResolver(),\n    // Handle struct type to record for UI\n    DiagramModelField: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    },\n    DiagramModelNestedField: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    },\n    CompactColumn: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    },\n    FieldInfo: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    },\n    DetailedColumn: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    },\n    DetailedNestedColumn: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    },\n    DetailedChangeColumn: {\n        type: _server_utils__WEBPACK_IMPORTED_MODULE_7__.convertColumnType\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolvers);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers/askingResolver.ts":
/*!*******************************************************!*\
  !*** ./src/apollo/server/resolvers/askingResolver.ts ***!
  \*******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AskingResolver: () => (/* binding */ AskingResolver)\n/* harmony export */ });\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var lodash_reduce__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/reduce */ \"lodash/reduce\");\n/* harmony import */ var lodash_reduce__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_reduce__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var sql_formatter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! sql-formatter */ \"sql-formatter\");\n/* harmony import */ var _services_askingService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/askingService */ \"(api)/./src/apollo/server/services/askingService.ts\");\n/* harmony import */ var _data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data */ \"(api)/./src/apollo/server/data/index.ts\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sql_formatter__WEBPACK_IMPORTED_MODULE_3__, _services_askingService__WEBPACK_IMPORTED_MODULE_4__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__]);\n([sql_formatter__WEBPACK_IMPORTED_MODULE_3__, _services_askingService__WEBPACK_IMPORTED_MODULE_4__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"AskingResolver\");\nlogger.level = \"debug\";\nclass AskingResolver {\n    constructor(){\n        /**\n   * Nested resolvers\n   */ this.getThreadResponseNestedResolver = ()=>({\n                view: async (parent, _args, ctx)=>{\n                    const viewId = parent.viewId;\n                    if (!viewId) return null;\n                    const view = await ctx.viewRepository.findOneBy({\n                        id: viewId\n                    });\n                    const displayName = view.properties ? JSON.parse(view.properties)?.displayName : view.name;\n                    return {\n                        ...view,\n                        displayName\n                    };\n                },\n                answerDetail: (parent, _args, _ctx)=>{\n                    if (!parent?.answerDetail) return null;\n                    const { content, ...rest } = parent.answerDetail;\n                    if (!content) return parent.answerDetail;\n                    const formattedContent = content// replace the \\\\n to \\n\n                    .replace(/\\\\n/g, \"\\n\")// replace the \\\\\\\" to \\\",\n                    .replace(/\\\\\"/g, '\"');\n                    return {\n                        ...rest,\n                        content: formattedContent\n                    };\n                },\n                sql: (parent, _args, _ctx)=>{\n                    if (parent.breakdownDetail && parent.breakdownDetail.steps) {\n                        // construct sql from breakdownDetail\n                        return (0,sql_formatter__WEBPACK_IMPORTED_MODULE_3__.format)((0,_services_askingService__WEBPACK_IMPORTED_MODULE_4__.constructCteSql)(parent.breakdownDetail.steps));\n                    }\n                    return (0,sql_formatter__WEBPACK_IMPORTED_MODULE_3__.format)(parent.sql);\n                }\n            });\n        this.getDetailStepNestedResolver = ()=>({\n                sql: (parent, _args, _ctx)=>{\n                    return (0,sql_formatter__WEBPACK_IMPORTED_MODULE_3__.format)(parent.sql);\n                }\n            });\n        this.getResultCandidateNestedResolver = ()=>({\n                sql: (parent, _args, _ctx)=>{\n                    return (0,sql_formatter__WEBPACK_IMPORTED_MODULE_3__.format)(parent.sql);\n                },\n                view: async (parent, _args, ctx)=>{\n                    const viewId = parent.view?.id;\n                    if (!viewId) return parent.view;\n                    const view = await ctx.viewRepository.findOneBy({\n                        id: viewId\n                    });\n                    const displayName = view.properties ? JSON.parse(view.properties).displayName : view.name;\n                    return {\n                        ...parent.view,\n                        displayName\n                    };\n                }\n            });\n        this.createAskingTask = this.createAskingTask.bind(this);\n        this.cancelAskingTask = this.cancelAskingTask.bind(this);\n        this.getAskingTask = this.getAskingTask.bind(this);\n        this.createThread = this.createThread.bind(this);\n        this.getThread = this.getThread.bind(this);\n        this.updateThread = this.updateThread.bind(this);\n        this.deleteThread = this.deleteThread.bind(this);\n        this.listThreads = this.listThreads.bind(this);\n        this.createThreadResponse = this.createThreadResponse.bind(this);\n        this.getResponse = this.getResponse.bind(this);\n        this.previewData = this.previewData.bind(this);\n        this.previewBreakdownData = this.previewBreakdownData.bind(this);\n        this.getSuggestedQuestions = this.getSuggestedQuestions.bind(this);\n        this.createInstantRecommendedQuestions = this.createInstantRecommendedQuestions.bind(this);\n        this.getInstantRecommendedQuestions = this.getInstantRecommendedQuestions.bind(this);\n        this.generateThreadRecommendationQuestions = this.generateThreadRecommendationQuestions.bind(this);\n        this.generateProjectRecommendationQuestions = this.generateProjectRecommendationQuestions.bind(this);\n        this.getThreadRecommendationQuestions = this.getThreadRecommendationQuestions.bind(this);\n        this.generateThreadResponseBreakdown = this.generateThreadResponseBreakdown.bind(this);\n        this.generateThreadResponseAnswer = this.generateThreadResponseAnswer.bind(this);\n        this.generateThreadResponseChart = this.generateThreadResponseChart.bind(this);\n        this.adjustThreadResponseChart = this.adjustThreadResponseChart.bind(this);\n    }\n    async generateProjectRecommendationQuestions(_root, _args, ctx) {\n        await ctx.projectService.generateProjectRecommendationQuestions();\n        return true;\n    }\n    async generateThreadRecommendationQuestions(_root, args, ctx) {\n        const { threadId } = args;\n        const askingService = ctx.askingService;\n        await askingService.generateThreadRecommendationQuestions(threadId);\n        return true;\n    }\n    async getThreadRecommendationQuestions(_root, args, ctx) {\n        const { threadId } = args;\n        const askingService = ctx.askingService;\n        return askingService.getThreadRecommendationQuestions(threadId);\n    }\n    async getSuggestedQuestions(_root, _args, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { sampleDataset } = project;\n        if (!sampleDataset) {\n            return {\n                questions: []\n            };\n        }\n        const questions = (0,_data__WEBPACK_IMPORTED_MODULE_5__.getSampleAskQuestions)(sampleDataset);\n        return {\n            questions\n        };\n    }\n    async createAskingTask(_root, args, ctx) {\n        const { question, threadId } = args.data;\n        const project = await ctx.projectService.getCurrentProject();\n        const askingService = ctx.askingService;\n        const data = {\n            question\n        };\n        const task = await askingService.createAskingTask(data, {\n            threadId,\n            language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n        });\n        ctx.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.HOME_ASK_CANDIDATE, {\n            question,\n            taskId: task.id\n        });\n        return task;\n    }\n    async cancelAskingTask(_root, args, ctx) {\n        const { taskId } = args;\n        const askingService = ctx.askingService;\n        await askingService.cancelAskingTask(taskId);\n        return true;\n    }\n    async getAskingTask(_root, args, ctx) {\n        const { taskId } = args;\n        const askingService = ctx.askingService;\n        const askResult = await askingService.getAskingTask(taskId);\n        // telemetry\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.HOME_ASK_CANDIDATE;\n        if (askResult.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.FINISHED) {\n            ctx.telemetry.sendEvent(eventName, {\n                taskId,\n                status: askResult.status,\n                candidates: askResult.response\n            });\n        }\n        if (askResult.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.FAILED) {\n            ctx.telemetry.sendEvent(eventName, {\n                taskId,\n                status: askResult.status,\n                error: askResult.error\n            }, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.WrenService.AI, false);\n        }\n        // construct candidates from response\n        const candidates = await Promise.all((askResult.response || []).map(async (response)=>{\n            const view = response.viewId ? await ctx.viewRepository.findOneBy({\n                id: response.viewId\n            }) : null;\n            return {\n                type: response.type,\n                sql: response.sql,\n                view\n            };\n        }));\n        return {\n            type: askResult.type,\n            status: askResult.status,\n            error: askResult.error,\n            candidates,\n            intentReasoning: askResult.intentReasoning\n        };\n    }\n    async createThread(_root, args, ctx) {\n        const { data } = args;\n        const askingService = ctx.askingService;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.HOME_CREATE_THREAD;\n        try {\n            const thread = await askingService.createThread(data);\n            ctx.telemetry.sendEvent(eventName, {});\n            return thread;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    // telemetry\n    }\n    async getThread(_root, args, ctx) {\n        const { threadId } = args;\n        const askingService = ctx.askingService;\n        const responses = await askingService.getResponsesWithThread(threadId);\n        // reduce responses to group by thread id\n        const thread = lodash_reduce__WEBPACK_IMPORTED_MODULE_1___default()(responses, (acc, response)=>{\n            if (!acc.id) {\n                acc.id = response.threadId;\n                acc.sql = response.sql;\n                acc.responses = [];\n            }\n            acc.responses.push({\n                id: response.id,\n                viewId: response.viewId,\n                threadId: response.threadId,\n                question: response.question,\n                sql: response.sql,\n                breakdownDetail: response.breakdownDetail,\n                answerDetail: response.answerDetail,\n                chartDetail: response.chartDetail\n            });\n            return acc;\n        }, {});\n        return thread;\n    }\n    async updateThread(_root, args, ctx) {\n        const { where, data } = args;\n        const askingService = ctx.askingService;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.HOME_UPDATE_THREAD_SUMMARY;\n        const newSummary = data.summary;\n        try {\n            const thread = await askingService.updateThread(where.id, data);\n            // telemetry\n            ctx.telemetry.sendEvent(eventName, {\n                new_summary: newSummary\n            });\n            return thread;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                new_summary: newSummary\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async deleteThread(_root, args, ctx) {\n        const { where } = args;\n        const askingService = ctx.askingService;\n        await askingService.deleteThread(where.id);\n        return true;\n    }\n    async listThreads(_root, _args, ctx) {\n        const threads = await ctx.askingService.listThreads();\n        return threads;\n    }\n    async createThreadResponse(_root, args, ctx) {\n        const { threadId, data } = args;\n        const askingService = ctx.askingService;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.HOME_ASK_FOLLOWUP_QUESTION;\n        try {\n            const response = await askingService.createThreadResponse(data, threadId);\n            ctx.telemetry.sendEvent(eventName, {\n                data\n            });\n            return response;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async generateThreadResponseBreakdown(_root, args, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { responseId } = args;\n        const askingService = ctx.askingService;\n        const breakdownDetail = await askingService.generateThreadResponseBreakdown(responseId, {\n            language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n        });\n        return breakdownDetail;\n    }\n    async generateThreadResponseAnswer(_root, args, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { responseId } = args;\n        const askingService = ctx.askingService;\n        return askingService.generateThreadResponseAnswer(responseId, {\n            language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n        });\n    }\n    async generateThreadResponseChart(_root, args, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { responseId } = args;\n        const askingService = ctx.askingService;\n        return askingService.generateThreadResponseChart(responseId, {\n            language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n        });\n    }\n    async adjustThreadResponseChart(_root, args, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { responseId, data } = args;\n        const askingService = ctx.askingService;\n        return askingService.adjustThreadResponseChart(responseId, data, {\n            language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n        });\n    }\n    async getResponse(_root, args, ctx) {\n        const { responseId } = args;\n        const askingService = ctx.askingService;\n        const response = await askingService.getResponse(responseId);\n        return response;\n    }\n    async previewData(_root, args, ctx) {\n        const { responseId, limit } = args.where;\n        const askingService = ctx.askingService;\n        const data = await askingService.previewData(responseId, limit);\n        return data;\n    }\n    async previewBreakdownData(_root, args, ctx) {\n        const { responseId, stepIndex, limit } = args.where;\n        const askingService = ctx.askingService;\n        const data = await askingService.previewBreakdownData(responseId, stepIndex, limit);\n        return data;\n    }\n    async createInstantRecommendedQuestions(_root, args, ctx) {\n        const { data } = args;\n        const askingService = ctx.askingService;\n        return askingService.createInstantRecommendedQuestions(data);\n    }\n    async getInstantRecommendedQuestions(_root, args, ctx) {\n        const { taskId } = args;\n        const askingService = ctx.askingService;\n        const result = await askingService.getInstantRecommendedQuestions(taskId);\n        return {\n            questions: result.response?.questions || [],\n            status: result.status,\n            error: result.error\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXNvbHZlcnMvYXNraW5nUmVzb2x2ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBT2dDO0FBTUE7QUFFVTtBQUNIO0FBSUo7QUFLbEI7QUFDb0Q7QUFFckUsTUFBTVMsU0FBU04sd0RBQVNBLENBQUM7QUFDekJNLE9BQU9DLEtBQUssR0FBRztBQXFDUixNQUFNQztJQUNYQyxhQUFjO1FBZ2JkOztHQUVDLFFBQ01DLGtDQUFrQyxJQUFPO2dCQUM5Q0MsTUFBTSxPQUFPQyxRQUF3QkMsT0FBWUM7b0JBQy9DLE1BQU1DLFNBQVNILE9BQU9HLE1BQU07b0JBQzVCLElBQUksQ0FBQ0EsUUFBUSxPQUFPO29CQUNwQixNQUFNSixPQUFPLE1BQU1HLElBQUlFLGNBQWMsQ0FBQ0MsU0FBUyxDQUFDO3dCQUFFQyxJQUFJSDtvQkFBTztvQkFDN0QsTUFBTUksY0FBY1IsS0FBS1MsVUFBVSxHQUMvQkMsS0FBS0MsS0FBSyxDQUFDWCxLQUFLUyxVQUFVLEdBQUdELGNBQzdCUixLQUFLWSxJQUFJO29CQUNiLE9BQU87d0JBQUUsR0FBR1osSUFBSTt3QkFBRVE7b0JBQVk7Z0JBQ2hDO2dCQUNBSyxjQUFjLENBQUNaLFFBQXdCQyxPQUFZWTtvQkFDakQsSUFBSSxDQUFDYixRQUFRWSxjQUFjLE9BQU87b0JBRWxDLE1BQU0sRUFBRUUsT0FBTyxFQUFFLEdBQUdDLE1BQU0sR0FBR2YsT0FBT1ksWUFBWTtvQkFFaEQsSUFBSSxDQUFDRSxTQUFTLE9BQU9kLE9BQU9ZLFlBQVk7b0JBRXhDLE1BQU1JLG1CQUFtQkYsT0FDdkIsd0JBQXdCO3FCQUN2QkcsT0FBTyxDQUFDLFFBQVEsS0FDakIsMEJBQTBCO3FCQUN6QkEsT0FBTyxDQUFDLFFBQVE7b0JBRW5CLE9BQU87d0JBQ0wsR0FBR0YsSUFBSTt3QkFDUEQsU0FBU0U7b0JBQ1g7Z0JBQ0Y7Z0JBQ0FFLEtBQUssQ0FBQ2xCLFFBQXdCQyxPQUFZWTtvQkFDeEMsSUFBSWIsT0FBT21CLGVBQWUsSUFBSW5CLE9BQU9tQixlQUFlLENBQUNDLEtBQUssRUFBRTt3QkFDMUQscUNBQXFDO3dCQUNyQyxPQUFPL0IscURBQU1BLENBQUNDLHdFQUFlQSxDQUFDVSxPQUFPbUIsZUFBZSxDQUFDQyxLQUFLO29CQUM1RDtvQkFDQSxPQUFPL0IscURBQU1BLENBQUNXLE9BQU9rQixHQUFHO2dCQUMxQjtZQUNGO2FBRU9HLDhCQUE4QixJQUFPO2dCQUMxQ0gsS0FBSyxDQUFDbEIsUUFBb0JDLE9BQVlZO29CQUNwQyxPQUFPeEIscURBQU1BLENBQUNXLE9BQU9rQixHQUFHO2dCQUMxQjtZQUNGO2FBRU9JLG1DQUFtQyxJQUFPO2dCQUMvQ0osS0FBSyxDQUFDbEIsUUFBYUMsT0FBWVk7b0JBQzdCLE9BQU94QixxREFBTUEsQ0FBQ1csT0FBT2tCLEdBQUc7Z0JBQzFCO2dCQUNBbkIsTUFBTSxPQUFPQyxRQUFhQyxPQUFZQztvQkFDcEMsTUFBTUMsU0FBU0gsT0FBT0QsSUFBSSxFQUFFTztvQkFDNUIsSUFBSSxDQUFDSCxRQUFRLE9BQU9ILE9BQU9ELElBQUk7b0JBQy9CLE1BQU1BLE9BQU8sTUFBTUcsSUFBSUUsY0FBYyxDQUFDQyxTQUFTLENBQUM7d0JBQUVDLElBQUlIO29CQUFPO29CQUU3RCxNQUFNSSxjQUFjUixLQUFLUyxVQUFVLEdBQy9CQyxLQUFLQyxLQUFLLENBQUNYLEtBQUtTLFVBQVUsRUFBRUQsV0FBVyxHQUN2Q1IsS0FBS1ksSUFBSTtvQkFDYixPQUFPO3dCQUNMLEdBQUdYLE9BQU9ELElBQUk7d0JBQ2RRO29CQUNGO2dCQUNGO1lBQ0Y7UUE5ZUUsSUFBSSxDQUFDZ0IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7UUFDdkQsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUNBLGdCQUFnQixDQUFDRCxJQUFJLENBQUMsSUFBSTtRQUN2RCxJQUFJLENBQUNFLGFBQWEsR0FBRyxJQUFJLENBQUNBLGFBQWEsQ0FBQ0YsSUFBSSxDQUFDLElBQUk7UUFDakQsSUFBSSxDQUFDRyxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUNILElBQUksQ0FBQyxJQUFJO1FBQy9DLElBQUksQ0FBQ0ksU0FBUyxHQUFHLElBQUksQ0FBQ0EsU0FBUyxDQUFDSixJQUFJLENBQUMsSUFBSTtRQUN6QyxJQUFJLENBQUNLLFlBQVksR0FBRyxJQUFJLENBQUNBLFlBQVksQ0FBQ0wsSUFBSSxDQUFDLElBQUk7UUFDL0MsSUFBSSxDQUFDTSxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUNOLElBQUksQ0FBQyxJQUFJO1FBQy9DLElBQUksQ0FBQ08sV0FBVyxHQUFHLElBQUksQ0FBQ0EsV0FBVyxDQUFDUCxJQUFJLENBQUMsSUFBSTtRQUM3QyxJQUFJLENBQUNRLG9CQUFvQixHQUFHLElBQUksQ0FBQ0Esb0JBQW9CLENBQUNSLElBQUksQ0FBQyxJQUFJO1FBQy9ELElBQUksQ0FBQ1MsV0FBVyxHQUFHLElBQUksQ0FBQ0EsV0FBVyxDQUFDVCxJQUFJLENBQUMsSUFBSTtRQUM3QyxJQUFJLENBQUNVLFdBQVcsR0FBRyxJQUFJLENBQUNBLFdBQVcsQ0FBQ1YsSUFBSSxDQUFDLElBQUk7UUFDN0MsSUFBSSxDQUFDVyxvQkFBb0IsR0FBRyxJQUFJLENBQUNBLG9CQUFvQixDQUFDWCxJQUFJLENBQUMsSUFBSTtRQUMvRCxJQUFJLENBQUNZLHFCQUFxQixHQUFHLElBQUksQ0FBQ0EscUJBQXFCLENBQUNaLElBQUksQ0FBQyxJQUFJO1FBQ2pFLElBQUksQ0FBQ2EsaUNBQWlDLEdBQ3BDLElBQUksQ0FBQ0EsaUNBQWlDLENBQUNiLElBQUksQ0FBQyxJQUFJO1FBQ2xELElBQUksQ0FBQ2MsOEJBQThCLEdBQ2pDLElBQUksQ0FBQ0EsOEJBQThCLENBQUNkLElBQUksQ0FBQyxJQUFJO1FBQy9DLElBQUksQ0FBQ2UscUNBQXFDLEdBQ3hDLElBQUksQ0FBQ0EscUNBQXFDLENBQUNmLElBQUksQ0FBQyxJQUFJO1FBQ3RELElBQUksQ0FBQ2dCLHNDQUFzQyxHQUN6QyxJQUFJLENBQUNBLHNDQUFzQyxDQUFDaEIsSUFBSSxDQUFDLElBQUk7UUFFdkQsSUFBSSxDQUFDaUIsZ0NBQWdDLEdBQ25DLElBQUksQ0FBQ0EsZ0NBQWdDLENBQUNqQixJQUFJLENBQUMsSUFBSTtRQUNqRCxJQUFJLENBQUNrQiwrQkFBK0IsR0FDbEMsSUFBSSxDQUFDQSwrQkFBK0IsQ0FBQ2xCLElBQUksQ0FBQyxJQUFJO1FBQ2hELElBQUksQ0FBQ21CLDRCQUE0QixHQUMvQixJQUFJLENBQUNBLDRCQUE0QixDQUFDbkIsSUFBSSxDQUFDLElBQUk7UUFDN0MsSUFBSSxDQUFDb0IsMkJBQTJCLEdBQzlCLElBQUksQ0FBQ0EsMkJBQTJCLENBQUNwQixJQUFJLENBQUMsSUFBSTtRQUM1QyxJQUFJLENBQUNxQix5QkFBeUIsR0FBRyxJQUFJLENBQUNBLHlCQUF5QixDQUFDckIsSUFBSSxDQUFDLElBQUk7SUFDM0U7SUFFQSxNQUFhZ0IsdUNBQ1hNLEtBQVUsRUFDVjdDLEtBQVUsRUFDVkMsR0FBYSxFQUNLO1FBQ2xCLE1BQU1BLElBQUk2QyxjQUFjLENBQUNQLHNDQUFzQztRQUMvRCxPQUFPO0lBQ1Q7SUFFQSxNQUFhRCxzQ0FDWE8sS0FBVSxFQUNWRSxJQUEwQixFQUMxQjlDLEdBQWEsRUFDSztRQUNsQixNQUFNLEVBQUUrQyxRQUFRLEVBQUUsR0FBR0Q7UUFDckIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsTUFBTUEsY0FBY1gscUNBQXFDLENBQUNVO1FBQzFELE9BQU87SUFDVDtJQUVBLE1BQWFSLGlDQUNYSyxLQUFVLEVBQ1ZFLElBQTBCLEVBQzFCOUMsR0FBYSxFQUMyQjtRQUN4QyxNQUFNLEVBQUUrQyxRQUFRLEVBQUUsR0FBR0Q7UUFDckIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsT0FBT0EsY0FBY1QsZ0NBQWdDLENBQUNRO0lBQ3hEO0lBRUEsTUFBYWIsc0JBQ1hVLEtBQVUsRUFDVjdDLEtBQVUsRUFDVkMsR0FBYSxFQUN1QjtRQUNwQyxNQUFNaUQsVUFBVSxNQUFNakQsSUFBSTZDLGNBQWMsQ0FBQ0ssaUJBQWlCO1FBQzFELE1BQU0sRUFBRUMsYUFBYSxFQUFFLEdBQUdGO1FBQzFCLElBQUksQ0FBQ0UsZUFBZTtZQUNsQixPQUFPO2dCQUFFQyxXQUFXLEVBQUU7WUFBQztRQUN6QjtRQUNBLE1BQU1BLFlBQVkvRCw0REFBcUJBLENBQUM4RDtRQUN4QyxPQUFPO1lBQUVDO1FBQVU7SUFDckI7SUFFQSxNQUFhL0IsaUJBQ1h1QixLQUFVLEVBQ1ZFLElBQXVELEVBQ3ZEOUMsR0FBYSxFQUNFO1FBQ2YsTUFBTSxFQUFFcUQsUUFBUSxFQUFFTixRQUFRLEVBQUUsR0FBR0QsS0FBS1EsSUFBSTtRQUN4QyxNQUFNTCxVQUFVLE1BQU1qRCxJQUFJNkMsY0FBYyxDQUFDSyxpQkFBaUI7UUFFMUQsTUFBTUYsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsTUFBTU0sT0FBTztZQUFFRDtRQUFTO1FBQ3hCLE1BQU1FLE9BQU8sTUFBTVAsY0FBYzNCLGdCQUFnQixDQUFDaUMsTUFBTTtZQUN0RFA7WUFDQVMsVUFBVXpFLGtFQUFjLENBQUNrRSxRQUFRTyxRQUFRLENBQUMsSUFBSXpFLGtFQUFjQSxDQUFDMEUsRUFBRTtRQUNqRTtRQUNBekQsSUFBSTBELFNBQVMsQ0FBQ0MsU0FBUyxDQUFDckUsZ0VBQWNBLENBQUNzRSxrQkFBa0IsRUFBRTtZQUN6RFA7WUFDQVEsUUFBUU4sS0FBS25ELEVBQUU7UUFDakI7UUFDQSxPQUFPbUQ7SUFDVDtJQUVBLE1BQWFoQyxpQkFDWHFCLEtBQVUsRUFDVkUsSUFBd0IsRUFDeEI5QyxHQUFhLEVBQ0s7UUFDbEIsTUFBTSxFQUFFNkQsTUFBTSxFQUFFLEdBQUdmO1FBQ25CLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE1BQU1BLGNBQWN6QixnQkFBZ0IsQ0FBQ3NDO1FBQ3JDLE9BQU87SUFDVDtJQUVBLE1BQWFyQyxjQUNYb0IsS0FBVSxFQUNWRSxJQUF3QixFQUN4QjlDLEdBQWEsRUFDUTtRQUNyQixNQUFNLEVBQUU2RCxNQUFNLEVBQUUsR0FBR2Y7UUFDbkIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsTUFBTWMsWUFBWSxNQUFNZCxjQUFjeEIsYUFBYSxDQUFDcUM7UUFFcEQsWUFBWTtRQUNaLE1BQU1FLFlBQVl6RSxnRUFBY0EsQ0FBQ3NFLGtCQUFrQjtRQUNuRCxJQUFJRSxVQUFVRSxNQUFNLEtBQUtoRixtRUFBZUEsQ0FBQ2lGLFFBQVEsRUFBRTtZQUNqRGpFLElBQUkwRCxTQUFTLENBQUNDLFNBQVMsQ0FBQ0ksV0FBVztnQkFDakNGO2dCQUNBRyxRQUFRRixVQUFVRSxNQUFNO2dCQUN4QkUsWUFBWUosVUFBVUssUUFBUTtZQUNoQztRQUNGO1FBQ0EsSUFBSUwsVUFBVUUsTUFBTSxLQUFLaEYsbUVBQWVBLENBQUNvRixNQUFNLEVBQUU7WUFDL0NwRSxJQUFJMEQsU0FBUyxDQUFDQyxTQUFTLENBQ3JCSSxXQUNBO2dCQUNFRjtnQkFDQUcsUUFBUUYsVUFBVUUsTUFBTTtnQkFDeEJLLE9BQU9QLFVBQVVPLEtBQUs7WUFDeEIsR0FDQTlFLDZEQUFXQSxDQUFDK0UsRUFBRSxFQUNkO1FBRUo7UUFFQSxxQ0FBcUM7UUFDckMsTUFBTUosYUFBYSxNQUFNSyxRQUFRQyxHQUFHLENBQ2xDLENBQUNWLFVBQVVLLFFBQVEsSUFBSSxFQUFFLEVBQUVNLEdBQUcsQ0FBQyxPQUFPTjtZQUNwQyxNQUFNdEUsT0FBT3NFLFNBQVNsRSxNQUFNLEdBQ3hCLE1BQU1ELElBQUlFLGNBQWMsQ0FBQ0MsU0FBUyxDQUFDO2dCQUFFQyxJQUFJK0QsU0FBU2xFLE1BQU07WUFBQyxLQUN6RDtZQUNKLE9BQU87Z0JBQ0x5RSxNQUFNUCxTQUFTTyxJQUFJO2dCQUNuQjFELEtBQUttRCxTQUFTbkQsR0FBRztnQkFDakJuQjtZQUNGO1FBQ0Y7UUFHRixPQUFPO1lBQ0w2RSxNQUFNWixVQUFVWSxJQUFJO1lBQ3BCVixRQUFRRixVQUFVRSxNQUFNO1lBQ3hCSyxPQUFPUCxVQUFVTyxLQUFLO1lBQ3RCSDtZQUNBUyxpQkFBaUJiLFVBQVVhLGVBQWU7UUFDNUM7SUFDRjtJQUVBLE1BQWFsRCxhQUNYbUIsS0FBVSxFQUNWRSxJQU1DLEVBQ0Q5QyxHQUFhLEVBQ0k7UUFDakIsTUFBTSxFQUFFc0QsSUFBSSxFQUFFLEdBQUdSO1FBRWpCLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE1BQU1lLFlBQVl6RSxnRUFBY0EsQ0FBQ3NGLGtCQUFrQjtRQUNuRCxJQUFJO1lBQ0YsTUFBTUMsU0FBUyxNQUFNN0IsY0FBY3ZCLFlBQVksQ0FBQzZCO1lBQ2hEdEQsSUFBSTBELFNBQVMsQ0FBQ0MsU0FBUyxDQUFDSSxXQUFXLENBQUM7WUFDcEMsT0FBT2M7UUFDVCxFQUFFLE9BQU9DLEtBQVU7WUFDakI5RSxJQUFJMEQsU0FBUyxDQUFDQyxTQUFTLENBQ3JCSSxXQUNBO2dCQUFFTSxPQUFPUyxJQUFJQyxPQUFPO1lBQUMsR0FDckJELElBQUlFLFVBQVUsRUFBRUMsU0FDaEI7WUFFRixNQUFNSDtRQUNSO0lBQ0EsWUFBWTtJQUNkO0lBRUEsTUFBYXBELFVBQ1hrQixLQUFVLEVBQ1ZFLElBQTBCLEVBQzFCOUMsR0FBYSxFQUNZO1FBQ3pCLE1BQU0sRUFBRStDLFFBQVEsRUFBRSxHQUFHRDtRQUVyQixNQUFNRSxnQkFBZ0JoRCxJQUFJZ0QsYUFBYTtRQUN2QyxNQUFNa0MsWUFBWSxNQUFNbEMsY0FBY21DLHNCQUFzQixDQUFDcEM7UUFDN0QseUNBQXlDO1FBQ3pDLE1BQU04QixTQUFTNUYsb0RBQU1BLENBQ25CaUcsV0FDQSxDQUFDRSxLQUFLakI7WUFDSixJQUFJLENBQUNpQixJQUFJaEYsRUFBRSxFQUFFO2dCQUNYZ0YsSUFBSWhGLEVBQUUsR0FBRytELFNBQVNwQixRQUFRO2dCQUMxQnFDLElBQUlwRSxHQUFHLEdBQUdtRCxTQUFTbkQsR0FBRztnQkFDdEJvRSxJQUFJRixTQUFTLEdBQUcsRUFBRTtZQUNwQjtZQUVBRSxJQUFJRixTQUFTLENBQUNHLElBQUksQ0FBQztnQkFDakJqRixJQUFJK0QsU0FBUy9ELEVBQUU7Z0JBQ2ZILFFBQVFrRSxTQUFTbEUsTUFBTTtnQkFDdkI4QyxVQUFVb0IsU0FBU3BCLFFBQVE7Z0JBQzNCTSxVQUFVYyxTQUFTZCxRQUFRO2dCQUMzQnJDLEtBQUttRCxTQUFTbkQsR0FBRztnQkFDakJDLGlCQUFpQmtELFNBQVNsRCxlQUFlO2dCQUN6Q1AsY0FBY3lELFNBQVN6RCxZQUFZO2dCQUNuQzRFLGFBQWFuQixTQUFTbUIsV0FBVztZQUNuQztZQUVBLE9BQU9GO1FBQ1QsR0FDQSxDQUFDO1FBR0gsT0FBT1A7SUFDVDtJQUVBLE1BQWFsRCxhQUNYaUIsS0FBVSxFQUNWRSxJQUEwRCxFQUMxRDlDLEdBQWEsRUFDSTtRQUNqQixNQUFNLEVBQUV1RixLQUFLLEVBQUVqQyxJQUFJLEVBQUUsR0FBR1I7UUFFeEIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsTUFBTWUsWUFBWXpFLGdFQUFjQSxDQUFDa0csMEJBQTBCO1FBQzNELE1BQU1DLGFBQWFuQyxLQUFLb0MsT0FBTztRQUMvQixJQUFJO1lBQ0YsTUFBTWIsU0FBUyxNQUFNN0IsY0FBY3JCLFlBQVksQ0FBQzRELE1BQU1uRixFQUFFLEVBQUVrRDtZQUMxRCxZQUFZO1lBQ1p0RCxJQUFJMEQsU0FBUyxDQUFDQyxTQUFTLENBQUNJLFdBQVc7Z0JBQ2pDNEIsYUFBYUY7WUFDZjtZQUNBLE9BQU9aO1FBQ1QsRUFBRSxPQUFPQyxLQUFVO1lBQ2pCOUUsSUFBSTBELFNBQVMsQ0FBQ0MsU0FBUyxDQUNyQkksV0FDQTtnQkFDRTRCLGFBQWFGO1lBQ2YsR0FDQVgsSUFBSUUsVUFBVSxFQUFFQyxTQUNoQjtZQUVGLE1BQU1IO1FBQ1I7SUFDRjtJQUVBLE1BQWFsRCxhQUNYZ0IsS0FBVSxFQUNWRSxJQUErQixFQUMvQjlDLEdBQWEsRUFDSztRQUNsQixNQUFNLEVBQUV1RixLQUFLLEVBQUUsR0FBR3pDO1FBRWxCLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE1BQU1BLGNBQWNwQixZQUFZLENBQUMyRCxNQUFNbkYsRUFBRTtRQUN6QyxPQUFPO0lBQ1Q7SUFFQSxNQUFheUIsWUFDWGUsS0FBVSxFQUNWN0MsS0FBVSxFQUNWQyxHQUFhLEVBQ007UUFDbkIsTUFBTTRGLFVBQVUsTUFBTTVGLElBQUlnRCxhQUFhLENBQUNuQixXQUFXO1FBQ25ELE9BQU8rRDtJQUNUO0lBRUEsTUFBYTlELHFCQUNYYyxLQUFVLEVBQ1ZFLElBT0MsRUFDRDlDLEdBQWEsRUFDWTtRQUN6QixNQUFNLEVBQUUrQyxRQUFRLEVBQUVPLElBQUksRUFBRSxHQUFHUjtRQUUzQixNQUFNRSxnQkFBZ0JoRCxJQUFJZ0QsYUFBYTtRQUN2QyxNQUFNZSxZQUFZekUsZ0VBQWNBLENBQUN1RywwQkFBMEI7UUFDM0QsSUFBSTtZQUNGLE1BQU0xQixXQUFXLE1BQU1uQixjQUFjbEIsb0JBQW9CLENBQUN3QixNQUFNUDtZQUNoRS9DLElBQUkwRCxTQUFTLENBQUNDLFNBQVMsQ0FBQ0ksV0FBVztnQkFBRVQ7WUFBSztZQUMxQyxPQUFPYTtRQUNULEVBQUUsT0FBT1csS0FBVTtZQUNqQjlFLElBQUkwRCxTQUFTLENBQUNDLFNBQVMsQ0FDckJJLFdBQ0E7Z0JBQUVUO2dCQUFNZSxPQUFPUyxJQUFJQyxPQUFPO1lBQUMsR0FDM0JELElBQUlFLFVBQVUsRUFBRUMsU0FDaEI7WUFFRixNQUFNSDtRQUNSO0lBQ0Y7SUFFQSxNQUFhdEMsZ0NBQ1hJLEtBQVUsRUFDVkUsSUFBNEIsRUFDNUI5QyxHQUFhLEVBQ1k7UUFDekIsTUFBTWlELFVBQVUsTUFBTWpELElBQUk2QyxjQUFjLENBQUNLLGlCQUFpQjtRQUMxRCxNQUFNLEVBQUU0QyxVQUFVLEVBQUUsR0FBR2hEO1FBQ3ZCLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE1BQU0vQixrQkFBa0IsTUFBTStCLGNBQWNSLCtCQUErQixDQUN6RXNELFlBQ0E7WUFBRXRDLFVBQVV6RSxrRUFBYyxDQUFDa0UsUUFBUU8sUUFBUSxDQUFDLElBQUl6RSxrRUFBY0EsQ0FBQzBFLEVBQUU7UUFBQztRQUVwRSxPQUFPeEM7SUFDVDtJQUVBLE1BQWF3Qiw2QkFDWEcsS0FBVSxFQUNWRSxJQUE0QixFQUM1QjlDLEdBQWEsRUFDWTtRQUN6QixNQUFNaUQsVUFBVSxNQUFNakQsSUFBSTZDLGNBQWMsQ0FBQ0ssaUJBQWlCO1FBQzFELE1BQU0sRUFBRTRDLFVBQVUsRUFBRSxHQUFHaEQ7UUFDdkIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsT0FBT0EsY0FBY1AsNEJBQTRCLENBQUNxRCxZQUFZO1lBQzVEdEMsVUFBVXpFLGtFQUFjLENBQUNrRSxRQUFRTyxRQUFRLENBQUMsSUFBSXpFLGtFQUFjQSxDQUFDMEUsRUFBRTtRQUNqRTtJQUNGO0lBRUEsTUFBYWYsNEJBQ1hFLEtBQVUsRUFDVkUsSUFBNEIsRUFDNUI5QyxHQUFhLEVBQ1k7UUFDekIsTUFBTWlELFVBQVUsTUFBTWpELElBQUk2QyxjQUFjLENBQUNLLGlCQUFpQjtRQUMxRCxNQUFNLEVBQUU0QyxVQUFVLEVBQUUsR0FBR2hEO1FBQ3ZCLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE9BQU9BLGNBQWNOLDJCQUEyQixDQUFDb0QsWUFBWTtZQUMzRHRDLFVBQVV6RSxrRUFBYyxDQUFDa0UsUUFBUU8sUUFBUSxDQUFDLElBQUl6RSxrRUFBY0EsQ0FBQzBFLEVBQUU7UUFDakU7SUFDRjtJQUVBLE1BQWFkLDBCQUNYQyxLQUFVLEVBQ1ZFLElBQXlELEVBQ3pEOUMsR0FBYSxFQUNZO1FBQ3pCLE1BQU1pRCxVQUFVLE1BQU1qRCxJQUFJNkMsY0FBYyxDQUFDSyxpQkFBaUI7UUFDMUQsTUFBTSxFQUFFNEMsVUFBVSxFQUFFeEMsSUFBSSxFQUFFLEdBQUdSO1FBQzdCLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE9BQU9BLGNBQWNMLHlCQUF5QixDQUFDbUQsWUFBWXhDLE1BQU07WUFDL0RFLFVBQVV6RSxrRUFBYyxDQUFDa0UsUUFBUU8sUUFBUSxDQUFDLElBQUl6RSxrRUFBY0EsQ0FBQzBFLEVBQUU7UUFDakU7SUFDRjtJQUVBLE1BQWExQixZQUNYYSxLQUFVLEVBQ1ZFLElBQTRCLEVBQzVCOUMsR0FBYSxFQUNZO1FBQ3pCLE1BQU0sRUFBRThGLFVBQVUsRUFBRSxHQUFHaEQ7UUFDdkIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsTUFBTW1CLFdBQVcsTUFBTW5CLGNBQWNqQixXQUFXLENBQUMrRDtRQUVqRCxPQUFPM0I7SUFDVDtJQUVBLE1BQWFuQyxZQUNYWSxLQUFVLEVBQ1ZFLElBQTJFLEVBQzNFOUMsR0FBYSxFQUNDO1FBQ2QsTUFBTSxFQUFFOEYsVUFBVSxFQUFFQyxLQUFLLEVBQUUsR0FBR2pELEtBQUt5QyxLQUFLO1FBQ3hDLE1BQU12QyxnQkFBZ0JoRCxJQUFJZ0QsYUFBYTtRQUN2QyxNQUFNTSxPQUFPLE1BQU1OLGNBQWNoQixXQUFXLENBQUM4RCxZQUFZQztRQUN6RCxPQUFPekM7SUFDVDtJQUVBLE1BQWFyQixxQkFDWFcsS0FBVSxFQUNWRSxJQUEyRSxFQUMzRTlDLEdBQWEsRUFDQztRQUNkLE1BQU0sRUFBRThGLFVBQVUsRUFBRUUsU0FBUyxFQUFFRCxLQUFLLEVBQUUsR0FBR2pELEtBQUt5QyxLQUFLO1FBQ25ELE1BQU12QyxnQkFBZ0JoRCxJQUFJZ0QsYUFBYTtRQUN2QyxNQUFNTSxPQUFPLE1BQU1OLGNBQWNmLG9CQUFvQixDQUNuRDZELFlBQ0FFLFdBQ0FEO1FBRUYsT0FBT3pDO0lBQ1Q7SUFFQSxNQUFhbkIsa0NBQ1hTLEtBQVUsRUFDVkUsSUFBZ0QsRUFDaEQ5QyxHQUFhLEVBQ0U7UUFDZixNQUFNLEVBQUVzRCxJQUFJLEVBQUUsR0FBR1I7UUFDakIsTUFBTUUsZ0JBQWdCaEQsSUFBSWdELGFBQWE7UUFDdkMsT0FBT0EsY0FBY2IsaUNBQWlDLENBQUNtQjtJQUN6RDtJQUVBLE1BQWFsQiwrQkFDWFEsS0FBVSxFQUNWRSxJQUF3QixFQUN4QjlDLEdBQWEsRUFDc0I7UUFDbkMsTUFBTSxFQUFFNkQsTUFBTSxFQUFFLEdBQUdmO1FBQ25CLE1BQU1FLGdCQUFnQmhELElBQUlnRCxhQUFhO1FBQ3ZDLE1BQU1pRCxTQUFTLE1BQU1qRCxjQUFjWiw4QkFBOEIsQ0FBQ3lCO1FBQ2xFLE9BQU87WUFDTFQsV0FBVzZDLE9BQU85QixRQUFRLEVBQUVmLGFBQWEsRUFBRTtZQUMzQ1ksUUFBUWlDLE9BQU9qQyxNQUFNO1lBQ3JCSyxPQUFPNEIsT0FBTzVCLEtBQUs7UUFDckI7SUFDRjtBQWtFRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXNvbHZlcnMvYXNraW5nUmVzb2x2ZXIudHM/YTUyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBXcmVuQUlFcnJvcixcbiAgV3JlbkFJTGFuZ3VhZ2UsXG4gIEFza1Jlc3VsdFN0YXR1cyxcbiAgQXNrUmVzdWx0VHlwZSxcbiAgUmVjb21tZW5kYXRpb25RdWVzdGlvblN0YXR1cyxcbiAgQ2hhcnRBZGp1c3RtZW50T3B0aW9uLFxufSBmcm9tICdAc2VydmVyL21vZGVscy9hZGFwdG9yJztcbmltcG9ydCB7IFRocmVhZCB9IGZyb20gJy4uL3JlcG9zaXRvcmllcy90aHJlYWRSZXBvc2l0b3J5JztcbmltcG9ydCB7XG4gIERldGFpbFN0ZXAsXG4gIFRocmVhZFJlc3BvbnNlLFxufSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvdGhyZWFkUmVzcG9uc2VSZXBvc2l0b3J5JztcbmltcG9ydCB7IHJlZHVjZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBJQ29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ0BzZXJ2ZXIvdXRpbHMnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnc3FsLWZvcm1hdHRlcic7XG5pbXBvcnQge1xuICBjb25zdHJ1Y3RDdGVTcWwsXG4gIFRocmVhZFJlY29tbWVuZFF1ZXN0aW9uUmVzdWx0LFxufSBmcm9tICcuLi9zZXJ2aWNlcy9hc2tpbmdTZXJ2aWNlJztcbmltcG9ydCB7XG4gIFN1Z2dlc3RlZFF1ZXN0aW9uLFxuICBTYW1wbGVEYXRhc2V0TmFtZSxcbiAgZ2V0U2FtcGxlQXNrUXVlc3Rpb25zLFxufSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFRlbGVtZXRyeUV2ZW50LCBXcmVuU2VydmljZSB9IGZyb20gJy4uL3RlbGVtZXRyeS90ZWxlbWV0cnknO1xuXG5jb25zdCBsb2dnZXIgPSBnZXRMb2dnZXIoJ0Fza2luZ1Jlc29sdmVyJyk7XG5sb2dnZXIubGV2ZWwgPSAnZGVidWcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1Z2dlc3RlZFF1ZXN0aW9uUmVzcG9uc2Uge1xuICBxdWVzdGlvbnM6IFN1Z2dlc3RlZFF1ZXN0aW9uW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFzayB7XG4gIGlkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNraW5nVGFzayB7XG4gIHR5cGU6IEFza1Jlc3VsdFR5cGUgfCBudWxsO1xuICBzdGF0dXM6IEFza1Jlc3VsdFN0YXR1cztcbiAgY2FuZGlkYXRlczogQXJyYXk8e1xuICAgIHNxbDogc3RyaW5nO1xuICB9PjtcbiAgZXJyb3I6IFdyZW5BSUVycm9yIHwgbnVsbDtcbiAgaW50ZW50UmVhc29uaW5nPzogc3RyaW5nO1xufVxuXG4vLyBEZXRhaWxlZFRocmVhZCBpcyBhIHR5cGUgdGhhdCByZXByZXNlbnRzIGEgZGV0YWlsZWQgdGhyZWFkLCB3aGljaCBpcyBhIHRocmVhZCB3aXRoIHJlc3BvbnNlcy5cbmV4cG9ydCBpbnRlcmZhY2UgRGV0YWlsZWRUaHJlYWQge1xuICBpZDogbnVtYmVyOyAvLyBJRFxuICBzcWw6IHN0cmluZzsgLy8gU1FMXG4gIHJlc3BvbnNlczogVGhyZWFkUmVzcG9uc2VbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWNvbW1lbmRlZFF1ZXN0aW9uc1Rhc2sge1xuICBxdWVzdGlvbnM6IHtcbiAgICBxdWVzdGlvbjogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgc3FsOiBzdHJpbmc7XG4gIH1bXTtcbiAgc3RhdHVzOiBSZWNvbW1lbmRhdGlvblF1ZXN0aW9uU3RhdHVzO1xuICBlcnJvcjogV3JlbkFJRXJyb3IgfCBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgQXNraW5nUmVzb2x2ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNyZWF0ZUFza2luZ1Rhc2sgPSB0aGlzLmNyZWF0ZUFza2luZ1Rhc2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmNhbmNlbEFza2luZ1Rhc2sgPSB0aGlzLmNhbmNlbEFza2luZ1Rhc2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmdldEFza2luZ1Rhc2sgPSB0aGlzLmdldEFza2luZ1Rhc2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmNyZWF0ZVRocmVhZCA9IHRoaXMuY3JlYXRlVGhyZWFkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRUaHJlYWQgPSB0aGlzLmdldFRocmVhZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudXBkYXRlVGhyZWFkID0gdGhpcy51cGRhdGVUaHJlYWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRlbGV0ZVRocmVhZCA9IHRoaXMuZGVsZXRlVGhyZWFkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5saXN0VGhyZWFkcyA9IHRoaXMubGlzdFRocmVhZHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNyZWF0ZVRocmVhZFJlc3BvbnNlID0gdGhpcy5jcmVhdGVUaHJlYWRSZXNwb25zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0UmVzcG9uc2UgPSB0aGlzLmdldFJlc3BvbnNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcmV2aWV3RGF0YSA9IHRoaXMucHJldmlld0RhdGEuYmluZCh0aGlzKTtcbiAgICB0aGlzLnByZXZpZXdCcmVha2Rvd25EYXRhID0gdGhpcy5wcmV2aWV3QnJlYWtkb3duRGF0YS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0U3VnZ2VzdGVkUXVlc3Rpb25zID0gdGhpcy5nZXRTdWdnZXN0ZWRRdWVzdGlvbnMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNyZWF0ZUluc3RhbnRSZWNvbW1lbmRlZFF1ZXN0aW9ucyA9XG4gICAgICB0aGlzLmNyZWF0ZUluc3RhbnRSZWNvbW1lbmRlZFF1ZXN0aW9ucy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0SW5zdGFudFJlY29tbWVuZGVkUXVlc3Rpb25zID1cbiAgICAgIHRoaXMuZ2V0SW5zdGFudFJlY29tbWVuZGVkUXVlc3Rpb25zLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZW5lcmF0ZVRocmVhZFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zID1cbiAgICAgIHRoaXMuZ2VuZXJhdGVUaHJlYWRSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVQcm9qZWN0UmVjb21tZW5kYXRpb25RdWVzdGlvbnMgPVxuICAgICAgdGhpcy5nZW5lcmF0ZVByb2plY3RSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucy5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5nZXRUaHJlYWRSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucyA9XG4gICAgICB0aGlzLmdldFRocmVhZFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZW5lcmF0ZVRocmVhZFJlc3BvbnNlQnJlYWtkb3duID1cbiAgICAgIHRoaXMuZ2VuZXJhdGVUaHJlYWRSZXNwb25zZUJyZWFrZG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2VuZXJhdGVUaHJlYWRSZXNwb25zZUFuc3dlciA9XG4gICAgICB0aGlzLmdlbmVyYXRlVGhyZWFkUmVzcG9uc2VBbnN3ZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLmdlbmVyYXRlVGhyZWFkUmVzcG9uc2VDaGFydCA9XG4gICAgICB0aGlzLmdlbmVyYXRlVGhyZWFkUmVzcG9uc2VDaGFydC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYWRqdXN0VGhyZWFkUmVzcG9uc2VDaGFydCA9IHRoaXMuYWRqdXN0VGhyZWFkUmVzcG9uc2VDaGFydC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlUHJvamVjdFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zKFxuICAgIF9yb290OiBhbnksXG4gICAgX2FyZ3M6IGFueSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2VuZXJhdGVQcm9qZWN0UmVjb21tZW5kYXRpb25RdWVzdGlvbnMoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZW5lcmF0ZVRocmVhZFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczogeyB0aHJlYWRJZDogbnVtYmVyIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgeyB0aHJlYWRJZCB9ID0gYXJncztcbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgYXdhaXQgYXNraW5nU2VydmljZS5nZW5lcmF0ZVRocmVhZFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zKHRocmVhZElkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRUaHJlYWRSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucyhcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgdGhyZWFkSWQ6IG51bWJlciB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICk6IFByb21pc2U8VGhyZWFkUmVjb21tZW5kUXVlc3Rpb25SZXN1bHQ+IHtcbiAgICBjb25zdCB7IHRocmVhZElkIH0gPSBhcmdzO1xuICAgIGNvbnN0IGFza2luZ1NlcnZpY2UgPSBjdHguYXNraW5nU2VydmljZTtcbiAgICByZXR1cm4gYXNraW5nU2VydmljZS5nZXRUaHJlYWRSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucyh0aHJlYWRJZCk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0U3VnZ2VzdGVkUXVlc3Rpb25zKFxuICAgIF9yb290OiBhbnksXG4gICAgX2FyZ3M6IGFueSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPFN1Z2dlc3RlZFF1ZXN0aW9uUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgY29uc3QgeyBzYW1wbGVEYXRhc2V0IH0gPSBwcm9qZWN0O1xuICAgIGlmICghc2FtcGxlRGF0YXNldCkge1xuICAgICAgcmV0dXJuIHsgcXVlc3Rpb25zOiBbXSB9O1xuICAgIH1cbiAgICBjb25zdCBxdWVzdGlvbnMgPSBnZXRTYW1wbGVBc2tRdWVzdGlvbnMoc2FtcGxlRGF0YXNldCBhcyBTYW1wbGVEYXRhc2V0TmFtZSk7XG4gICAgcmV0dXJuIHsgcXVlc3Rpb25zIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY3JlYXRlQXNraW5nVGFzayhcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgZGF0YTogeyBxdWVzdGlvbjogc3RyaW5nOyB0aHJlYWRJZD86IG51bWJlciB9IH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxUYXNrPiB7XG4gICAgY29uc3QgeyBxdWVzdGlvbiwgdGhyZWFkSWQgfSA9IGFyZ3MuZGF0YTtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG5cbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgY29uc3QgZGF0YSA9IHsgcXVlc3Rpb24gfTtcbiAgICBjb25zdCB0YXNrID0gYXdhaXQgYXNraW5nU2VydmljZS5jcmVhdGVBc2tpbmdUYXNrKGRhdGEsIHtcbiAgICAgIHRocmVhZElkLFxuICAgICAgbGFuZ3VhZ2U6IFdyZW5BSUxhbmd1YWdlW3Byb2plY3QubGFuZ3VhZ2VdIHx8IFdyZW5BSUxhbmd1YWdlLkVOLFxuICAgIH0pO1xuICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KFRlbGVtZXRyeUV2ZW50LkhPTUVfQVNLX0NBTkRJREFURSwge1xuICAgICAgcXVlc3Rpb24sXG4gICAgICB0YXNrSWQ6IHRhc2suaWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY2FuY2VsQXNraW5nVGFzayhcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgdGFza0lkOiBzdHJpbmcgfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCB7IHRhc2tJZCB9ID0gYXJncztcbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgYXdhaXQgYXNraW5nU2VydmljZS5jYW5jZWxBc2tpbmdUYXNrKHRhc2tJZCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0QXNraW5nVGFzayhcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgdGFza0lkOiBzdHJpbmcgfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPEFza2luZ1Rhc2s+IHtcbiAgICBjb25zdCB7IHRhc2tJZCB9ID0gYXJncztcbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgY29uc3QgYXNrUmVzdWx0ID0gYXdhaXQgYXNraW5nU2VydmljZS5nZXRBc2tpbmdUYXNrKHRhc2tJZCk7XG5cbiAgICAvLyB0ZWxlbWV0cnlcbiAgICBjb25zdCBldmVudE5hbWUgPSBUZWxlbWV0cnlFdmVudC5IT01FX0FTS19DQU5ESURBVEU7XG4gICAgaWYgKGFza1Jlc3VsdC5zdGF0dXMgPT09IEFza1Jlc3VsdFN0YXR1cy5GSU5JU0hFRCkge1xuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIHRhc2tJZCxcbiAgICAgICAgc3RhdHVzOiBhc2tSZXN1bHQuc3RhdHVzLFxuICAgICAgICBjYW5kaWRhdGVzOiBhc2tSZXN1bHQucmVzcG9uc2UsXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGFza1Jlc3VsdC5zdGF0dXMgPT09IEFza1Jlc3VsdFN0YXR1cy5GQUlMRUQpIHtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHtcbiAgICAgICAgICB0YXNrSWQsXG4gICAgICAgICAgc3RhdHVzOiBhc2tSZXN1bHQuc3RhdHVzLFxuICAgICAgICAgIGVycm9yOiBhc2tSZXN1bHQuZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICAgIFdyZW5TZXJ2aWNlLkFJLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29uc3RydWN0IGNhbmRpZGF0ZXMgZnJvbSByZXNwb25zZVxuICAgIGNvbnN0IGNhbmRpZGF0ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIChhc2tSZXN1bHQucmVzcG9uc2UgfHwgW10pLm1hcChhc3luYyAocmVzcG9uc2UpID0+IHtcbiAgICAgICAgY29uc3QgdmlldyA9IHJlc3BvbnNlLnZpZXdJZFxuICAgICAgICAgID8gYXdhaXQgY3R4LnZpZXdSZXBvc2l0b3J5LmZpbmRPbmVCeSh7IGlkOiByZXNwb25zZS52aWV3SWQgfSlcbiAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogcmVzcG9uc2UudHlwZSxcbiAgICAgICAgICBzcWw6IHJlc3BvbnNlLnNxbCxcbiAgICAgICAgICB2aWV3LFxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBhc2tSZXN1bHQudHlwZSxcbiAgICAgIHN0YXR1czogYXNrUmVzdWx0LnN0YXR1cyxcbiAgICAgIGVycm9yOiBhc2tSZXN1bHQuZXJyb3IsXG4gICAgICBjYW5kaWRhdGVzLFxuICAgICAgaW50ZW50UmVhc29uaW5nOiBhc2tSZXN1bHQuaW50ZW50UmVhc29uaW5nLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY3JlYXRlVGhyZWFkKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczoge1xuICAgICAgZGF0YToge1xuICAgICAgICBxdWVzdGlvbj86IHN0cmluZztcbiAgICAgICAgc3FsPzogc3RyaW5nO1xuICAgICAgICB2aWV3SWQ/OiBudW1iZXI7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxUaHJlYWQ+IHtcbiAgICBjb25zdCB7IGRhdGEgfSA9IGFyZ3M7XG5cbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgY29uc3QgZXZlbnROYW1lID0gVGVsZW1ldHJ5RXZlbnQuSE9NRV9DUkVBVEVfVEhSRUFEO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0aHJlYWQgPSBhd2FpdCBhc2tpbmdTZXJ2aWNlLmNyZWF0ZVRocmVhZChkYXRhKTtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KGV2ZW50TmFtZSwge30pO1xuICAgICAgcmV0dXJuIHRocmVhZDtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgeyBlcnJvcjogZXJyLm1lc3NhZ2UgfSxcbiAgICAgICAgZXJyLmV4dGVuc2lvbnM/LnNlcnZpY2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgLy8gdGVsZW1ldHJ5XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0VGhyZWFkKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczogeyB0aHJlYWRJZDogbnVtYmVyIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxEZXRhaWxlZFRocmVhZD4ge1xuICAgIGNvbnN0IHsgdGhyZWFkSWQgfSA9IGFyZ3M7XG5cbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgY29uc3QgcmVzcG9uc2VzID0gYXdhaXQgYXNraW5nU2VydmljZS5nZXRSZXNwb25zZXNXaXRoVGhyZWFkKHRocmVhZElkKTtcbiAgICAvLyByZWR1Y2UgcmVzcG9uc2VzIHRvIGdyb3VwIGJ5IHRocmVhZCBpZFxuICAgIGNvbnN0IHRocmVhZCA9IHJlZHVjZShcbiAgICAgIHJlc3BvbnNlcyxcbiAgICAgIChhY2MsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmICghYWNjLmlkKSB7XG4gICAgICAgICAgYWNjLmlkID0gcmVzcG9uc2UudGhyZWFkSWQ7XG4gICAgICAgICAgYWNjLnNxbCA9IHJlc3BvbnNlLnNxbDtcbiAgICAgICAgICBhY2MucmVzcG9uc2VzID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBhY2MucmVzcG9uc2VzLnB1c2goe1xuICAgICAgICAgIGlkOiByZXNwb25zZS5pZCxcbiAgICAgICAgICB2aWV3SWQ6IHJlc3BvbnNlLnZpZXdJZCxcbiAgICAgICAgICB0aHJlYWRJZDogcmVzcG9uc2UudGhyZWFkSWQsXG4gICAgICAgICAgcXVlc3Rpb246IHJlc3BvbnNlLnF1ZXN0aW9uLFxuICAgICAgICAgIHNxbDogcmVzcG9uc2Uuc3FsLFxuICAgICAgICAgIGJyZWFrZG93bkRldGFpbDogcmVzcG9uc2UuYnJlYWtkb3duRGV0YWlsLFxuICAgICAgICAgIGFuc3dlckRldGFpbDogcmVzcG9uc2UuYW5zd2VyRGV0YWlsLFxuICAgICAgICAgIGNoYXJ0RGV0YWlsOiByZXNwb25zZS5jaGFydERldGFpbCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sXG4gICAgICB7fSBhcyBhbnksXG4gICAgKTtcblxuICAgIHJldHVybiB0aHJlYWQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlVGhyZWFkKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczogeyB3aGVyZTogeyBpZDogbnVtYmVyIH07IGRhdGE6IHsgc3VtbWFyeTogc3RyaW5nIH0gfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPFRocmVhZD4ge1xuICAgIGNvbnN0IHsgd2hlcmUsIGRhdGEgfSA9IGFyZ3M7XG5cbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgY29uc3QgZXZlbnROYW1lID0gVGVsZW1ldHJ5RXZlbnQuSE9NRV9VUERBVEVfVEhSRUFEX1NVTU1BUlk7XG4gICAgY29uc3QgbmV3U3VtbWFyeSA9IGRhdGEuc3VtbWFyeTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdGhyZWFkID0gYXdhaXQgYXNraW5nU2VydmljZS51cGRhdGVUaHJlYWQod2hlcmUuaWQsIGRhdGEpO1xuICAgICAgLy8gdGVsZW1ldHJ5XG4gICAgICBjdHgudGVsZW1ldHJ5LnNlbmRFdmVudChldmVudE5hbWUsIHtcbiAgICAgICAgbmV3X3N1bW1hcnk6IG5ld1N1bW1hcnksXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aHJlYWQ7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHtcbiAgICAgICAgICBuZXdfc3VtbWFyeTogbmV3U3VtbWFyeSxcbiAgICAgICAgfSxcbiAgICAgICAgZXJyLmV4dGVuc2lvbnM/LnNlcnZpY2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlVGhyZWFkKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczogeyB3aGVyZTogeyBpZDogbnVtYmVyIH0gfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCB7IHdoZXJlIH0gPSBhcmdzO1xuXG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIGF3YWl0IGFza2luZ1NlcnZpY2UuZGVsZXRlVGhyZWFkKHdoZXJlLmlkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0VGhyZWFkcyhcbiAgICBfcm9vdDogYW55LFxuICAgIF9hcmdzOiBhbnksXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxUaHJlYWRbXT4ge1xuICAgIGNvbnN0IHRocmVhZHMgPSBhd2FpdCBjdHguYXNraW5nU2VydmljZS5saXN0VGhyZWFkcygpO1xuICAgIHJldHVybiB0aHJlYWRzO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGNyZWF0ZVRocmVhZFJlc3BvbnNlKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczoge1xuICAgICAgdGhyZWFkSWQ6IG51bWJlcjtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgcXVlc3Rpb24/OiBzdHJpbmc7XG4gICAgICAgIHNxbD86IHN0cmluZztcbiAgICAgICAgdmlld0lkPzogbnVtYmVyO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICk6IFByb21pc2U8VGhyZWFkUmVzcG9uc2U+IHtcbiAgICBjb25zdCB7IHRocmVhZElkLCBkYXRhIH0gPSBhcmdzO1xuXG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IFRlbGVtZXRyeUV2ZW50LkhPTUVfQVNLX0ZPTExPV1VQX1FVRVNUSU9OO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFza2luZ1NlcnZpY2UuY3JlYXRlVGhyZWFkUmVzcG9uc2UoZGF0YSwgdGhyZWFkSWQpO1xuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoZXZlbnROYW1lLCB7IGRhdGEgfSk7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHsgZGF0YSwgZXJyb3I6IGVyci5tZXNzYWdlIH0sXG4gICAgICAgIGVyci5leHRlbnNpb25zPy5zZXJ2aWNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlVGhyZWFkUmVzcG9uc2VCcmVha2Rvd24oXG4gICAgX3Jvb3Q6IGFueSxcbiAgICBhcmdzOiB7IHJlc3BvbnNlSWQ6IG51bWJlciB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICk6IFByb21pc2U8VGhyZWFkUmVzcG9uc2U+IHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgY29uc3QgeyByZXNwb25zZUlkIH0gPSBhcmdzO1xuICAgIGNvbnN0IGFza2luZ1NlcnZpY2UgPSBjdHguYXNraW5nU2VydmljZTtcbiAgICBjb25zdCBicmVha2Rvd25EZXRhaWwgPSBhd2FpdCBhc2tpbmdTZXJ2aWNlLmdlbmVyYXRlVGhyZWFkUmVzcG9uc2VCcmVha2Rvd24oXG4gICAgICByZXNwb25zZUlkLFxuICAgICAgeyBsYW5ndWFnZTogV3JlbkFJTGFuZ3VhZ2VbcHJvamVjdC5sYW5ndWFnZV0gfHwgV3JlbkFJTGFuZ3VhZ2UuRU4gfSxcbiAgICApO1xuICAgIHJldHVybiBicmVha2Rvd25EZXRhaWw7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2VuZXJhdGVUaHJlYWRSZXNwb25zZUFuc3dlcihcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgcmVzcG9uc2VJZDogbnVtYmVyIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxUaHJlYWRSZXNwb25zZT4ge1xuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICBjb25zdCB7IHJlc3BvbnNlSWQgfSA9IGFyZ3M7XG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIHJldHVybiBhc2tpbmdTZXJ2aWNlLmdlbmVyYXRlVGhyZWFkUmVzcG9uc2VBbnN3ZXIocmVzcG9uc2VJZCwge1xuICAgICAgbGFuZ3VhZ2U6IFdyZW5BSUxhbmd1YWdlW3Byb2plY3QubGFuZ3VhZ2VdIHx8IFdyZW5BSUxhbmd1YWdlLkVOLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdlbmVyYXRlVGhyZWFkUmVzcG9uc2VDaGFydChcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgcmVzcG9uc2VJZDogbnVtYmVyIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxUaHJlYWRSZXNwb25zZT4ge1xuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICBjb25zdCB7IHJlc3BvbnNlSWQgfSA9IGFyZ3M7XG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIHJldHVybiBhc2tpbmdTZXJ2aWNlLmdlbmVyYXRlVGhyZWFkUmVzcG9uc2VDaGFydChyZXNwb25zZUlkLCB7XG4gICAgICBsYW5ndWFnZTogV3JlbkFJTGFuZ3VhZ2VbcHJvamVjdC5sYW5ndWFnZV0gfHwgV3JlbkFJTGFuZ3VhZ2UuRU4sXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYWRqdXN0VGhyZWFkUmVzcG9uc2VDaGFydChcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgcmVzcG9uc2VJZDogbnVtYmVyOyBkYXRhOiBDaGFydEFkanVzdG1lbnRPcHRpb24gfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPFRocmVhZFJlc3BvbnNlPiB7XG4gICAgY29uc3QgcHJvamVjdCA9IGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZXRDdXJyZW50UHJvamVjdCgpO1xuICAgIGNvbnN0IHsgcmVzcG9uc2VJZCwgZGF0YSB9ID0gYXJncztcbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgcmV0dXJuIGFza2luZ1NlcnZpY2UuYWRqdXN0VGhyZWFkUmVzcG9uc2VDaGFydChyZXNwb25zZUlkLCBkYXRhLCB7XG4gICAgICBsYW5ndWFnZTogV3JlbkFJTGFuZ3VhZ2VbcHJvamVjdC5sYW5ndWFnZV0gfHwgV3JlbkFJTGFuZ3VhZ2UuRU4sXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0UmVzcG9uc2UoXG4gICAgX3Jvb3Q6IGFueSxcbiAgICBhcmdzOiB7IHJlc3BvbnNlSWQ6IG51bWJlciB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICk6IFByb21pc2U8VGhyZWFkUmVzcG9uc2U+IHtcbiAgICBjb25zdCB7IHJlc3BvbnNlSWQgfSA9IGFyZ3M7XG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXNraW5nU2VydmljZS5nZXRSZXNwb25zZShyZXNwb25zZUlkKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwcmV2aWV3RGF0YShcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgd2hlcmU6IHsgcmVzcG9uc2VJZDogbnVtYmVyOyBzdGVwSW5kZXg/OiBudW1iZXI7IGxpbWl0PzogbnVtYmVyIH0gfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHsgcmVzcG9uc2VJZCwgbGltaXQgfSA9IGFyZ3Mud2hlcmU7XG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBhc2tpbmdTZXJ2aWNlLnByZXZpZXdEYXRhKHJlc3BvbnNlSWQsIGxpbWl0KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwcmV2aWV3QnJlYWtkb3duRGF0YShcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgd2hlcmU6IHsgcmVzcG9uc2VJZDogbnVtYmVyOyBzdGVwSW5kZXg/OiBudW1iZXI7IGxpbWl0PzogbnVtYmVyIH0gfSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHsgcmVzcG9uc2VJZCwgc3RlcEluZGV4LCBsaW1pdCB9ID0gYXJncy53aGVyZTtcbiAgICBjb25zdCBhc2tpbmdTZXJ2aWNlID0gY3R4LmFza2luZ1NlcnZpY2U7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IGFza2luZ1NlcnZpY2UucHJldmlld0JyZWFrZG93bkRhdGEoXG4gICAgICByZXNwb25zZUlkLFxuICAgICAgc3RlcEluZGV4LFxuICAgICAgbGltaXQsXG4gICAgKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjcmVhdGVJbnN0YW50UmVjb21tZW5kZWRRdWVzdGlvbnMoXG4gICAgX3Jvb3Q6IGFueSxcbiAgICBhcmdzOiB7IGRhdGE6IHsgcHJldmlvdXNRdWVzdGlvbnM/OiBzdHJpbmdbXSB9IH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKTogUHJvbWlzZTxUYXNrPiB7XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhcmdzO1xuICAgIGNvbnN0IGFza2luZ1NlcnZpY2UgPSBjdHguYXNraW5nU2VydmljZTtcbiAgICByZXR1cm4gYXNraW5nU2VydmljZS5jcmVhdGVJbnN0YW50UmVjb21tZW5kZWRRdWVzdGlvbnMoZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0SW5zdGFudFJlY29tbWVuZGVkUXVlc3Rpb25zKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczogeyB0YXNrSWQ6IHN0cmluZyB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICk6IFByb21pc2U8UmVjb21tZW5kZWRRdWVzdGlvbnNUYXNrPiB7XG4gICAgY29uc3QgeyB0YXNrSWQgfSA9IGFyZ3M7XG4gICAgY29uc3QgYXNraW5nU2VydmljZSA9IGN0eC5hc2tpbmdTZXJ2aWNlO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFza2luZ1NlcnZpY2UuZ2V0SW5zdGFudFJlY29tbWVuZGVkUXVlc3Rpb25zKHRhc2tJZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHF1ZXN0aW9uczogcmVzdWx0LnJlc3BvbnNlPy5xdWVzdGlvbnMgfHwgW10sXG4gICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXG4gICAgICBlcnJvcjogcmVzdWx0LmVycm9yLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogTmVzdGVkIHJlc29sdmVyc1xuICAgKi9cbiAgcHVibGljIGdldFRocmVhZFJlc3BvbnNlTmVzdGVkUmVzb2x2ZXIgPSAoKSA9PiAoe1xuICAgIHZpZXc6IGFzeW5jIChwYXJlbnQ6IFRocmVhZFJlc3BvbnNlLCBfYXJnczogYW55LCBjdHg6IElDb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB2aWV3SWQgPSBwYXJlbnQudmlld0lkO1xuICAgICAgaWYgKCF2aWV3SWQpIHJldHVybiBudWxsO1xuICAgICAgY29uc3QgdmlldyA9IGF3YWl0IGN0eC52aWV3UmVwb3NpdG9yeS5maW5kT25lQnkoeyBpZDogdmlld0lkIH0pO1xuICAgICAgY29uc3QgZGlzcGxheU5hbWUgPSB2aWV3LnByb3BlcnRpZXNcbiAgICAgICAgPyBKU09OLnBhcnNlKHZpZXcucHJvcGVydGllcyk/LmRpc3BsYXlOYW1lXG4gICAgICAgIDogdmlldy5uYW1lO1xuICAgICAgcmV0dXJuIHsgLi4udmlldywgZGlzcGxheU5hbWUgfTtcbiAgICB9LFxuICAgIGFuc3dlckRldGFpbDogKHBhcmVudDogVGhyZWFkUmVzcG9uc2UsIF9hcmdzOiBhbnksIF9jdHg6IElDb250ZXh0KSA9PiB7XG4gICAgICBpZiAoIXBhcmVudD8uYW5zd2VyRGV0YWlsKSByZXR1cm4gbnVsbDtcblxuICAgICAgY29uc3QgeyBjb250ZW50LCAuLi5yZXN0IH0gPSBwYXJlbnQuYW5zd2VyRGV0YWlsO1xuXG4gICAgICBpZiAoIWNvbnRlbnQpIHJldHVybiBwYXJlbnQuYW5zd2VyRGV0YWlsO1xuXG4gICAgICBjb25zdCBmb3JtYXR0ZWRDb250ZW50ID0gY29udGVudFxuICAgICAgICAvLyByZXBsYWNlIHRoZSBcXFxcbiB0byBcXG5cbiAgICAgICAgLnJlcGxhY2UoL1xcXFxuL2csICdcXG4nKVxuICAgICAgICAvLyByZXBsYWNlIHRoZSBcXFxcXFxcIiB0byBcXFwiLFxuICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5yZXN0LFxuICAgICAgICBjb250ZW50OiBmb3JtYXR0ZWRDb250ZW50LFxuICAgICAgfTtcbiAgICB9LFxuICAgIHNxbDogKHBhcmVudDogVGhyZWFkUmVzcG9uc2UsIF9hcmdzOiBhbnksIF9jdHg6IElDb250ZXh0KSA9PiB7XG4gICAgICBpZiAocGFyZW50LmJyZWFrZG93bkRldGFpbCAmJiBwYXJlbnQuYnJlYWtkb3duRGV0YWlsLnN0ZXBzKSB7XG4gICAgICAgIC8vIGNvbnN0cnVjdCBzcWwgZnJvbSBicmVha2Rvd25EZXRhaWxcbiAgICAgICAgcmV0dXJuIGZvcm1hdChjb25zdHJ1Y3RDdGVTcWwocGFyZW50LmJyZWFrZG93bkRldGFpbC5zdGVwcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdChwYXJlbnQuc3FsKTtcbiAgICB9LFxuICB9KTtcblxuICBwdWJsaWMgZ2V0RGV0YWlsU3RlcE5lc3RlZFJlc29sdmVyID0gKCkgPT4gKHtcbiAgICBzcWw6IChwYXJlbnQ6IERldGFpbFN0ZXAsIF9hcmdzOiBhbnksIF9jdHg6IElDb250ZXh0KSA9PiB7XG4gICAgICByZXR1cm4gZm9ybWF0KHBhcmVudC5zcWwpO1xuICAgIH0sXG4gIH0pO1xuXG4gIHB1YmxpYyBnZXRSZXN1bHRDYW5kaWRhdGVOZXN0ZWRSZXNvbHZlciA9ICgpID0+ICh7XG4gICAgc3FsOiAocGFyZW50OiBhbnksIF9hcmdzOiBhbnksIF9jdHg6IElDb250ZXh0KSA9PiB7XG4gICAgICByZXR1cm4gZm9ybWF0KHBhcmVudC5zcWwpO1xuICAgIH0sXG4gICAgdmlldzogYXN5bmMgKHBhcmVudDogYW55LCBfYXJnczogYW55LCBjdHg6IElDb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCB2aWV3SWQgPSBwYXJlbnQudmlldz8uaWQ7XG4gICAgICBpZiAoIXZpZXdJZCkgcmV0dXJuIHBhcmVudC52aWV3O1xuICAgICAgY29uc3QgdmlldyA9IGF3YWl0IGN0eC52aWV3UmVwb3NpdG9yeS5maW5kT25lQnkoeyBpZDogdmlld0lkIH0pO1xuXG4gICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IHZpZXcucHJvcGVydGllc1xuICAgICAgICA/IEpTT04ucGFyc2Uodmlldy5wcm9wZXJ0aWVzKS5kaXNwbGF5TmFtZVxuICAgICAgICA6IHZpZXcubmFtZTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnBhcmVudC52aWV3LFxuICAgICAgICBkaXNwbGF5TmFtZSxcbiAgICAgIH07XG4gICAgfSxcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiV3JlbkFJTGFuZ3VhZ2UiLCJBc2tSZXN1bHRTdGF0dXMiLCJyZWR1Y2UiLCJnZXRMb2dnZXIiLCJmb3JtYXQiLCJjb25zdHJ1Y3RDdGVTcWwiLCJnZXRTYW1wbGVBc2tRdWVzdGlvbnMiLCJUZWxlbWV0cnlFdmVudCIsIldyZW5TZXJ2aWNlIiwibG9nZ2VyIiwibGV2ZWwiLCJBc2tpbmdSZXNvbHZlciIsImNvbnN0cnVjdG9yIiwiZ2V0VGhyZWFkUmVzcG9uc2VOZXN0ZWRSZXNvbHZlciIsInZpZXciLCJwYXJlbnQiLCJfYXJncyIsImN0eCIsInZpZXdJZCIsInZpZXdSZXBvc2l0b3J5IiwiZmluZE9uZUJ5IiwiaWQiLCJkaXNwbGF5TmFtZSIsInByb3BlcnRpZXMiLCJKU09OIiwicGFyc2UiLCJuYW1lIiwiYW5zd2VyRGV0YWlsIiwiX2N0eCIsImNvbnRlbnQiLCJyZXN0IiwiZm9ybWF0dGVkQ29udGVudCIsInJlcGxhY2UiLCJzcWwiLCJicmVha2Rvd25EZXRhaWwiLCJzdGVwcyIsImdldERldGFpbFN0ZXBOZXN0ZWRSZXNvbHZlciIsImdldFJlc3VsdENhbmRpZGF0ZU5lc3RlZFJlc29sdmVyIiwiY3JlYXRlQXNraW5nVGFzayIsImJpbmQiLCJjYW5jZWxBc2tpbmdUYXNrIiwiZ2V0QXNraW5nVGFzayIsImNyZWF0ZVRocmVhZCIsImdldFRocmVhZCIsInVwZGF0ZVRocmVhZCIsImRlbGV0ZVRocmVhZCIsImxpc3RUaHJlYWRzIiwiY3JlYXRlVGhyZWFkUmVzcG9uc2UiLCJnZXRSZXNwb25zZSIsInByZXZpZXdEYXRhIiwicHJldmlld0JyZWFrZG93bkRhdGEiLCJnZXRTdWdnZXN0ZWRRdWVzdGlvbnMiLCJjcmVhdGVJbnN0YW50UmVjb21tZW5kZWRRdWVzdGlvbnMiLCJnZXRJbnN0YW50UmVjb21tZW5kZWRRdWVzdGlvbnMiLCJnZW5lcmF0ZVRocmVhZFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zIiwiZ2VuZXJhdGVQcm9qZWN0UmVjb21tZW5kYXRpb25RdWVzdGlvbnMiLCJnZXRUaHJlYWRSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucyIsImdlbmVyYXRlVGhyZWFkUmVzcG9uc2VCcmVha2Rvd24iLCJnZW5lcmF0ZVRocmVhZFJlc3BvbnNlQW5zd2VyIiwiZ2VuZXJhdGVUaHJlYWRSZXNwb25zZUNoYXJ0IiwiYWRqdXN0VGhyZWFkUmVzcG9uc2VDaGFydCIsIl9yb290IiwicHJvamVjdFNlcnZpY2UiLCJhcmdzIiwidGhyZWFkSWQiLCJhc2tpbmdTZXJ2aWNlIiwicHJvamVjdCIsImdldEN1cnJlbnRQcm9qZWN0Iiwic2FtcGxlRGF0YXNldCIsInF1ZXN0aW9ucyIsInF1ZXN0aW9uIiwiZGF0YSIsInRhc2siLCJsYW5ndWFnZSIsIkVOIiwidGVsZW1ldHJ5Iiwic2VuZEV2ZW50IiwiSE9NRV9BU0tfQ0FORElEQVRFIiwidGFza0lkIiwiYXNrUmVzdWx0IiwiZXZlbnROYW1lIiwic3RhdHVzIiwiRklOSVNIRUQiLCJjYW5kaWRhdGVzIiwicmVzcG9uc2UiLCJGQUlMRUQiLCJlcnJvciIsIkFJIiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsInR5cGUiLCJpbnRlbnRSZWFzb25pbmciLCJIT01FX0NSRUFURV9USFJFQUQiLCJ0aHJlYWQiLCJlcnIiLCJtZXNzYWdlIiwiZXh0ZW5zaW9ucyIsInNlcnZpY2UiLCJyZXNwb25zZXMiLCJnZXRSZXNwb25zZXNXaXRoVGhyZWFkIiwiYWNjIiwicHVzaCIsImNoYXJ0RGV0YWlsIiwid2hlcmUiLCJIT01FX1VQREFURV9USFJFQURfU1VNTUFSWSIsIm5ld1N1bW1hcnkiLCJzdW1tYXJ5IiwibmV3X3N1bW1hcnkiLCJ0aHJlYWRzIiwiSE9NRV9BU0tfRk9MTE9XVVBfUVVFU1RJT04iLCJyZXNwb25zZUlkIiwibGltaXQiLCJzdGVwSW5kZXgiLCJyZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers/askingResolver.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers/dashboardResolver.ts":
/*!**********************************************************!*\
  !*** ./src/apollo/server/resolvers/dashboardResolver.ts ***!
  \**********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DashboardResolver: () => (/* binding */ DashboardResolver)\n/* harmony export */ });\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _server_services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/services */ \"(api)/./src/apollo/server/services/index.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_services__WEBPACK_IMPORTED_MODULE_1__]);\n_server_services__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"DashboardResolver\");\nlogger.level = \"debug\";\nclass DashboardResolver {\n    constructor(){\n        this.getDashboardItems = this.getDashboardItems.bind(this);\n        this.createDashboardItem = this.createDashboardItem.bind(this);\n        this.deleteDashboardItem = this.deleteDashboardItem.bind(this);\n        this.updateDashboardItemLayouts = this.updateDashboardItemLayouts.bind(this);\n        this.previewItemSQL = this.previewItemSQL.bind(this);\n    }\n    async getDashboardItems(_root, _args, ctx) {\n        const dashboard = await ctx.dashboardService.getCurrentDashboard();\n        if (!dashboard) {\n            throw new Error(\"Dashboard not found.\");\n        }\n        return await ctx.dashboardService.getDashboardItems(dashboard.id);\n    }\n    async createDashboardItem(_root, args, ctx) {\n        const { responseId, itemType } = args.data;\n        const dashboard = await ctx.dashboardService.getCurrentDashboard();\n        const response = await ctx.askingService.getResponse(responseId);\n        if (!response) {\n            throw new Error(`Thread response not found. responseId: ${responseId}`);\n        }\n        if (!Object.keys(_server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartType).includes(itemType)) {\n            throw new Error(`Chart type not supported. responseId: ${responseId}`);\n        }\n        if (!response.chartDetail?.chartSchema) {\n            throw new Error(`Chart schema not found in thread response. responseId: ${responseId}`);\n        }\n        return await ctx.dashboardService.createDashboardItem({\n            dashboardId: dashboard.id,\n            type: itemType,\n            sql: response.sql,\n            chartSchema: response.chartDetail?.chartSchema\n        });\n    }\n    async deleteDashboardItem(_root, args, ctx) {\n        const { id } = args.where;\n        const item = await ctx.dashboardService.getDashboardItem(id);\n        if (!item) {\n            throw new Error(`Dashboard item not found. id: ${id}`);\n        }\n        return await ctx.dashboardService.deleteDashboardItem(id);\n    }\n    async updateDashboardItemLayouts(_root, args, ctx) {\n        const { layouts } = args.data;\n        if (layouts.length === 0) {\n            throw new Error(\"Layouts are required.\");\n        }\n        return await ctx.dashboardService.updateDashboardItemLayouts(layouts);\n    }\n    async previewItemSQL(_root, args, ctx) {\n        const { itemId, limit } = args.data;\n        try {\n            const item = await ctx.dashboardService.getDashboardItem(itemId);\n            const project = await ctx.projectService.getCurrentProject();\n            const deployment = await ctx.deployService.getLastDeployment(project.id);\n            const mdl = deployment.manifest;\n            const data = await ctx.queryService.preview(item.detail.sql, {\n                project,\n                manifest: mdl,\n                limit: limit || _server_services__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PREVIEW_LIMIT\n            });\n            // handle data to [{ column1: value1, column2: value2, ... }]\n            const values = data.data.map((val)=>{\n                return data.columns.reduce((acc, col, index)=>{\n                    acc[col.name] = val[index];\n                    return acc;\n                }, {});\n            });\n            return values;\n        } catch (error) {\n            logger.error(`Error previewing SQL item ${itemId}: ${error}`);\n            throw error;\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers/dashboardResolver.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers/diagramResolver.ts":
/*!********************************************************!*\
  !*** ./src/apollo/server/resolvers/diagramResolver.ts ***!
  \********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagramResolver: () => (/* binding */ DiagramResolver)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var _server_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _mdl_mdlBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mdl/mdlBuilder */ \"(api)/./src/apollo/server/mdl/mdlBuilder.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_0__]);\nuuid__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"DiagramResolver\");\nlogger.level = \"debug\";\nclass DiagramResolver {\n    constructor(){\n        this.getDiagram = this.getDiagram.bind(this);\n    }\n    async getDiagram(_root, _args, ctx) {\n        const project = await ctx.projectRepository.getCurrentProject();\n        const models = await ctx.modelRepository.findAllBy({\n            projectId: project.id\n        });\n        const modelIds = models.map((model)=>model.id);\n        const modelColumns = await ctx.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const modelNestedColumns = await ctx.modelNestedColumnRepository.findNestedColumnsByModelIds(modelIds);\n        const modelRelations = await ctx.relationRepository.findRelationInfoBy({\n            columnIds: modelColumns.map((column)=>column.id)\n        });\n        const views = await ctx.viewRepository.findAllBy({\n            projectId: project.id\n        });\n        const builder = new _mdl_mdlBuilder__WEBPACK_IMPORTED_MODULE_3__.MDLBuilder({\n            project,\n            models,\n            columns: modelColumns,\n            nestedColumns: modelNestedColumns,\n            relations: modelRelations,\n            views,\n            relatedModels: models,\n            relatedColumns: modelColumns,\n            relatedRelations: modelRelations\n        });\n        const manifest = builder.build();\n        return this.buildDiagram(models, modelColumns, modelNestedColumns, modelRelations, views, manifest);\n    }\n    buildDiagram(models, modelColumns, modelNestedColumns, relations, views, manifest) {\n        const diagramModels = models.map((model)=>{\n            const transformedModel = this.transformModel(model);\n            const allColumns = modelColumns.filter((column)=>column.modelId === model.id);\n            const modelMDL = manifest.models.find((modelMDL)=>modelMDL.name === model.referenceName);\n            allColumns.forEach((column)=>{\n                const columnRelations = relations.map((relation)=>[\n                        relation.fromColumnId,\n                        relation.toColumnId\n                    ].includes(column.id) ? relation : null).filter((relation)=>!!relation);\n                if (columnRelations.length > 0) {\n                    columnRelations.forEach((relation)=>{\n                        const transformedRelationField = this.transformModelRelationField({\n                            relation,\n                            currentModel: model,\n                            models\n                        });\n                        transformedModel.relationFields.push(transformedRelationField);\n                    });\n                }\n                if (column.isCalculated) {\n                    transformedModel.calculatedFields.push(this.transformCalculatedField(column, modelMDL.columns));\n                } else {\n                    const nestedColumns = modelNestedColumns.filter((nestedColumn)=>nestedColumn.columnId === column.id);\n                    transformedModel.fields.push(this.transformNormalField(column, nestedColumns));\n                }\n            });\n            return transformedModel;\n        });\n        const diagramViews = views.map(this.transformView);\n        return {\n            models: diagramModels,\n            views: diagramViews\n        };\n    }\n    transformModel(model) {\n        const properties = JSON.parse(model.properties);\n        return {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            modelId: model.id,\n            nodeType: _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.MODEL,\n            displayName: model.displayName,\n            referenceName: model.referenceName,\n            sourceTableName: model.sourceTableName,\n            refSql: model.refSql,\n            refreshTime: model.refreshTime,\n            cached: model.cached,\n            description: properties?.description,\n            fields: [],\n            calculatedFields: [],\n            relationFields: []\n        };\n    }\n    transformNormalField(column, nestedColumns) {\n        const properties = JSON.parse(column.properties);\n        return {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            columnId: column.id,\n            nodeType: column.isCalculated ? _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.CALCULATED_FIELD : _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.FIELD,\n            type: column.type,\n            displayName: column.displayName,\n            referenceName: column.referenceName,\n            description: properties?.description,\n            isPrimaryKey: column.isPk,\n            expression: column.aggregation,\n            nestedFields: nestedColumns.length ? nestedColumns.map((nestedColumn)=>({\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n                    nestedColumnId: nestedColumn.id,\n                    columnPath: nestedColumn.columnPath,\n                    type: nestedColumn.type,\n                    displayName: nestedColumn.displayName,\n                    referenceName: nestedColumn.referenceName,\n                    description: nestedColumn.properties?.description\n                })) : null\n        };\n    }\n    transformCalculatedField(column, columnsMDL) {\n        const properties = JSON.parse(column.properties);\n        const lineage = JSON.parse(column.lineage);\n        const columnMDL = columnsMDL.find(({ name })=>name === column.referenceName);\n        return {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            columnId: column.id,\n            nodeType: _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.CALCULATED_FIELD,\n            aggregation: column.aggregation,\n            lineage,\n            type: column.type,\n            displayName: column.displayName,\n            referenceName: column.referenceName,\n            description: properties?.description,\n            isPrimaryKey: column.isPk,\n            expression: columnMDL.expression\n        };\n    }\n    transformModelRelationField({ relation, currentModel, models }) {\n        const referenceName = currentModel.referenceName === relation.fromModelName ? relation.toModelName : relation.fromModelName;\n        const displayName = models.find((model)=>model.referenceName === referenceName)?.displayName;\n        const properties = relation.properties ? JSON.parse(relation.properties) : null;\n        return {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            relationId: relation.id,\n            nodeType: _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.RELATION,\n            displayName,\n            referenceName,\n            type: relation.joinType,\n            fromModelId: relation.fromModelId,\n            fromModelName: relation.fromModelName,\n            fromModelDisplayName: relation.fromModelDisplayName,\n            fromColumnId: relation.fromColumnId,\n            fromColumnName: relation.fromColumnName,\n            fromColumnDisplayName: relation.fromColumnDisplayName,\n            toModelId: relation.toModelId,\n            toModelName: relation.toModelName,\n            toModelDisplayName: relation.toModelDisplayName,\n            toColumnId: relation.toColumnId,\n            toColumnName: relation.toColumnName,\n            toColumnDisplayName: relation.toColumnDisplayName,\n            description: properties?.description\n        };\n    }\n    transformView(view) {\n        const properties = JSON.parse(view.properties);\n        const fields = (properties?.columns || []).map((column)=>({\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n                nodeType: _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.FIELD,\n                type: column.type,\n                displayName: column.name,\n                referenceName: column.name,\n                description: column?.properties?.description\n            }));\n        return {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            viewId: view.id,\n            nodeType: _server_types__WEBPACK_IMPORTED_MODULE_1__.NodeType.VIEW,\n            statement: view.statement,\n            referenceName: view.name,\n            displayName: properties?.displayName || view.name,\n            fields,\n            description: properties?.description\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers/diagramResolver.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers/learningResolver.ts":
/*!*********************************************************!*\
  !*** ./src/apollo/server/resolvers/learningResolver.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LearningResolver: () => (/* binding */ LearningResolver)\n/* harmony export */ });\n/* harmony import */ var _server_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/uniq */ \"lodash/uniq\");\n/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_uniq__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst config = (0,_server_config__WEBPACK_IMPORTED_MODULE_0__.getConfig)();\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"LearingResolver\");\nlogger.level = \"debug\";\nclass LearningResolver {\n    constructor(){\n        this.getLearningRecord = this.getLearningRecord.bind(this);\n        this.saveLearningRecord = this.saveLearningRecord.bind(this);\n    }\n    async getLearningRecord(_root, _args, ctx) {\n        const result = await ctx.learningRepository.findAll();\n        return {\n            paths: result[0]?.paths || []\n        };\n    }\n    async saveLearningRecord(_root, args, ctx) {\n        const { path } = args.data;\n        const result = await ctx.learningRepository.findAll();\n        if (!result.length) {\n            return await ctx.learningRepository.createOne({\n                userId: config?.userUUID,\n                paths: [\n                    path\n                ]\n            });\n        }\n        const [record] = result;\n        return await ctx.learningRepository.updateOne(record.id, {\n            userId: config?.userUUID,\n            paths: lodash_uniq__WEBPACK_IMPORTED_MODULE_2___default()([\n                ...record.paths,\n                path\n            ])\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXNvbHZlcnMvbGVhcm5pbmdSZXNvbHZlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUMyQztBQUVEO0FBQ1o7QUFFOUIsTUFBTUcsU0FBU0gseURBQVNBO0FBRXhCLE1BQU1JLFNBQVNILHdEQUFTQSxDQUFDO0FBQ3pCRyxPQUFPQyxLQUFLLEdBQUc7QUFFUixNQUFNQztJQUNYQyxhQUFjO1FBQ1osSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxJQUFJLENBQUNBLGlCQUFpQixDQUFDQyxJQUFJLENBQUMsSUFBSTtRQUN6RCxJQUFJLENBQUNDLGtCQUFrQixHQUFHLElBQUksQ0FBQ0Esa0JBQWtCLENBQUNELElBQUksQ0FBQyxJQUFJO0lBQzdEO0lBRUEsTUFBYUQsa0JBQ1hHLEtBQVUsRUFDVkMsS0FBVSxFQUNWQyxHQUFhLEVBQ0M7UUFDZCxNQUFNQyxTQUFTLE1BQU1ELElBQUlFLGtCQUFrQixDQUFDQyxPQUFPO1FBQ25ELE9BQU87WUFBRUMsT0FBT0gsTUFBTSxDQUFDLEVBQUUsRUFBRUcsU0FBUyxFQUFFO1FBQUM7SUFDekM7SUFFQSxNQUFhUCxtQkFDWEMsS0FBVSxFQUNWTyxJQUFTLEVBQ1RMLEdBQWEsRUFDQztRQUNkLE1BQU0sRUFBRU0sSUFBSSxFQUFFLEdBQUdELEtBQUtFLElBQUk7UUFDMUIsTUFBTU4sU0FBUyxNQUFNRCxJQUFJRSxrQkFBa0IsQ0FBQ0MsT0FBTztRQUVuRCxJQUFJLENBQUNGLE9BQU9PLE1BQU0sRUFBRTtZQUNsQixPQUFPLE1BQU1SLElBQUlFLGtCQUFrQixDQUFDTyxTQUFTLENBQUM7Z0JBQzVDQyxRQUFRcEIsUUFBUXFCO2dCQUNoQlAsT0FBTztvQkFBQ0U7aUJBQUs7WUFDZjtRQUNGO1FBRUEsTUFBTSxDQUFDTSxPQUFPLEdBQUdYO1FBQ2pCLE9BQU8sTUFBTUQsSUFBSUUsa0JBQWtCLENBQUNXLFNBQVMsQ0FBQ0QsT0FBT0UsRUFBRSxFQUFFO1lBQ3ZESixRQUFRcEIsUUFBUXFCO1lBQ2hCUCxPQUFPZixrREFBSUEsQ0FBQzttQkFBSXVCLE9BQU9SLEtBQUs7Z0JBQUVFO2FBQUs7UUFDckM7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3Jlc29sdmVycy9sZWFybmluZ1Jlc29sdmVyLnRzP2IzYWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbnRleHQgfSBmcm9tICdAc2VydmVyL3R5cGVzJztcbmltcG9ydCB7IGdldENvbmZpZyB9IGZyb20gJ0BzZXJ2ZXIvY29uZmlnJztcblxuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnQHNlcnZlci91dGlscyc7XG5pbXBvcnQgeyB1bmlxIH0gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignTGVhcmluZ1Jlc29sdmVyJyk7XG5sb2dnZXIubGV2ZWwgPSAnZGVidWcnO1xuXG5leHBvcnQgY2xhc3MgTGVhcm5pbmdSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZ2V0TGVhcm5pbmdSZWNvcmQgPSB0aGlzLmdldExlYXJuaW5nUmVjb3JkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYXZlTGVhcm5pbmdSZWNvcmQgPSB0aGlzLnNhdmVMZWFybmluZ1JlY29yZC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldExlYXJuaW5nUmVjb3JkKFxuICAgIF9yb290OiBhbnksXG4gICAgX2FyZ3M6IGFueSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGN0eC5sZWFybmluZ1JlcG9zaXRvcnkuZmluZEFsbCgpO1xuICAgIHJldHVybiB7IHBhdGhzOiByZXN1bHRbMF0/LnBhdGhzIHx8IFtdIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2F2ZUxlYXJuaW5nUmVjb3JkKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczogYW55LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyBwYXRoIH0gPSBhcmdzLmRhdGE7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY3R4LmxlYXJuaW5nUmVwb3NpdG9yeS5maW5kQWxsKCk7XG5cbiAgICBpZiAoIXJlc3VsdC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBhd2FpdCBjdHgubGVhcm5pbmdSZXBvc2l0b3J5LmNyZWF0ZU9uZSh7XG4gICAgICAgIHVzZXJJZDogY29uZmlnPy51c2VyVVVJRCxcbiAgICAgICAgcGF0aHM6IFtwYXRoXSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IFtyZWNvcmRdID0gcmVzdWx0O1xuICAgIHJldHVybiBhd2FpdCBjdHgubGVhcm5pbmdSZXBvc2l0b3J5LnVwZGF0ZU9uZShyZWNvcmQuaWQsIHtcbiAgICAgIHVzZXJJZDogY29uZmlnPy51c2VyVVVJRCxcbiAgICAgIHBhdGhzOiB1bmlxKFsuLi5yZWNvcmQucGF0aHMsIHBhdGhdKSxcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImdldENvbmZpZyIsImdldExvZ2dlciIsInVuaXEiLCJjb25maWciLCJsb2dnZXIiLCJsZXZlbCIsIkxlYXJuaW5nUmVzb2x2ZXIiLCJjb25zdHJ1Y3RvciIsImdldExlYXJuaW5nUmVjb3JkIiwiYmluZCIsInNhdmVMZWFybmluZ1JlY29yZCIsIl9yb290IiwiX2FyZ3MiLCJjdHgiLCJyZXN1bHQiLCJsZWFybmluZ1JlcG9zaXRvcnkiLCJmaW5kQWxsIiwicGF0aHMiLCJhcmdzIiwicGF0aCIsImRhdGEiLCJsZW5ndGgiLCJjcmVhdGVPbmUiLCJ1c2VySWQiLCJ1c2VyVVVJRCIsInJlY29yZCIsInVwZGF0ZU9uZSIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers/learningResolver.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers/modelResolver.ts":
/*!******************************************************!*\
  !*** ./src/apollo/server/resolvers/modelResolver.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelResolver: () => (/* binding */ ModelResolver),\n/* harmony export */   SyncStatusEnum: () => (/* binding */ SyncStatusEnum)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var sql_formatter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sql-formatter */ \"sql-formatter\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isEmpty */ \"lodash/isEmpty\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isNil */ \"lodash/isNil\");\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isNil__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _utils_regex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/regex */ \"(api)/./src/apollo/server/utils/regex.ts\");\n/* harmony import */ var _utils_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/model */ \"(api)/./src/apollo/server/utils/model.ts\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sql_formatter__WEBPACK_IMPORTED_MODULE_2__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__]);\n([sql_formatter__WEBPACK_IMPORTED_MODULE_2__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"ModelResolver\");\nlogger.level = \"debug\";\nvar SyncStatusEnum;\n(function(SyncStatusEnum) {\n    SyncStatusEnum[\"IN_PROGRESS\"] = \"IN_PROGRESS\";\n    SyncStatusEnum[\"SYNCRONIZED\"] = \"SYNCRONIZED\";\n    SyncStatusEnum[\"UNSYNCRONIZED\"] = \"UNSYNCRONIZED\";\n})(SyncStatusEnum || (SyncStatusEnum = {}));\nclass ModelResolver {\n    constructor(){\n        // model & model column\n        this.listModels = this.listModels.bind(this);\n        this.getModel = this.getModel.bind(this);\n        this.createModel = this.createModel.bind(this);\n        this.updateModel = this.updateModel.bind(this);\n        this.deleteModel = this.deleteModel.bind(this);\n        this.updateModelMetadata = this.updateModelMetadata.bind(this);\n        this.deploy = this.deploy.bind(this);\n        this.getMDL = this.getMDL.bind(this);\n        this.checkModelSync = this.checkModelSync.bind(this);\n        // view\n        this.listViews = this.listViews.bind(this);\n        this.getView = this.getView.bind(this);\n        this.validateView = this.validateView.bind(this);\n        this.createView = this.createView.bind(this);\n        this.deleteView = this.deleteView.bind(this);\n        this.updateViewMetadata = this.updateViewMetadata.bind(this);\n        // preview\n        this.previewModelData = this.previewModelData.bind(this);\n        this.previewViewData = this.previewViewData.bind(this);\n        this.previewSql = this.previewSql.bind(this);\n        this.getNativeSql = this.getNativeSql.bind(this);\n        // calculated field\n        this.createCalculatedField = this.createCalculatedField.bind(this);\n        this.validateCalculatedField = this.validateCalculatedField.bind(this);\n        this.updateCalculatedField = this.updateCalculatedField.bind(this);\n        this.deleteCalculatedField = this.deleteCalculatedField.bind(this);\n        // relation\n        this.createRelation = this.createRelation.bind(this);\n        this.updateRelation = this.updateRelation.bind(this);\n        this.deleteRelation = this.deleteRelation.bind(this);\n    }\n    async createRelation(_root, args, ctx) {\n        const { data } = args;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_CREATE_RELATION;\n        try {\n            const relation = await ctx.modelService.createRelation(data);\n            ctx.telemetry.sendEvent(eventName, {\n                data\n            });\n            return relation;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                data: data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async updateRelation(_root, args, ctx) {\n        const { data, where } = args;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_UPDATE_RELATION;\n        try {\n            const relation = await ctx.modelService.updateRelation(data, where.id);\n            ctx.telemetry.sendEvent(eventName, {\n                data\n            });\n            return relation;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                data: data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async deleteRelation(_root, args, ctx) {\n        const relationId = args.where.id;\n        await ctx.modelService.deleteRelation(relationId);\n        return true;\n    }\n    async createCalculatedField(_root, _args, ctx) {\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_CREATE_CF;\n        try {\n            const column = await ctx.modelService.createCalculatedField(_args.data);\n            ctx.telemetry.sendEvent(eventName, {\n                data: _args.data\n            });\n            return column;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                data: _args.data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async validateCalculatedField(_root, args, ctx) {\n        const { name, modelId, columnId } = args.data;\n        return await ctx.modelService.validateCalculatedFieldNaming(name, modelId, columnId);\n    }\n    async updateCalculatedField(_root, _args, ctx) {\n        const { data, where } = _args;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_UPDATE_CF;\n        try {\n            const column = await ctx.modelService.updateCalculatedField(data, where.id);\n            ctx.telemetry.sendEvent(eventName, {\n                data\n            });\n            return column;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                data: data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async deleteCalculatedField(_root, args, ctx) {\n        const columnId = args.where.id;\n        // check column exist and is calculated field\n        const column = await ctx.modelColumnRepository.findOneBy({\n            id: columnId\n        });\n        if (!column || !column.isCalculated) {\n            throw new Error(\"Calculated field not found\");\n        }\n        await ctx.modelColumnRepository.deleteOne(columnId);\n        return true;\n    }\n    async checkModelSync(_root, _args, ctx) {\n        const { id } = await ctx.projectService.getCurrentProject();\n        const { manifest } = await ctx.mdlService.makeCurrentModelMDL();\n        const currentHash = ctx.deployService.createMDLHash(manifest, id);\n        const lastDeploy = await ctx.deployService.getLastDeployment(id);\n        const lastDeployHash = lastDeploy?.hash;\n        const inProgressDeployment = await ctx.deployService.getInProgressDeployment(id);\n        if (inProgressDeployment) {\n            return {\n                status: \"IN_PROGRESS\"\n            };\n        }\n        return currentHash == lastDeployHash ? {\n            status: \"SYNCRONIZED\"\n        } : {\n            status: \"UNSYNCRONIZED\"\n        };\n    }\n    async deploy(_root, args, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { manifest } = await ctx.mdlService.makeCurrentModelMDL();\n        const deployRes = await ctx.deployService.deploy(manifest, project.id, args.force);\n        // only generating for user's data source\n        if (project.sampleDataset === null) {\n            await ctx.projectService.generateProjectRecommendationQuestions();\n        }\n        return deployRes;\n    }\n    async getMDL(_root, args, ctx) {\n        const mdl = await ctx.deployService.getMDLByHash(args.hash);\n        return {\n            hash: args.hash,\n            mdl\n        };\n    }\n    async listModels(_root, _args, ctx) {\n        const { id: projectId } = await ctx.projectService.getCurrentProject();\n        const models = await ctx.modelRepository.findAllBy({\n            projectId\n        });\n        const modelIds = models.map((m)=>m.id);\n        const modelColumnList = await ctx.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const modelNestedColumnList = await ctx.modelNestedColumnRepository.findNestedColumnsByModelIds(modelIds);\n        const result = [];\n        for (const model of models){\n            const modelFields = modelColumnList.filter((c)=>c.modelId === model.id).map((c)=>({\n                    ...c,\n                    properties: JSON.parse(c.properties),\n                    nestedColumns: c.type.includes(\"STRUCT\") ? modelNestedColumnList.filter((nc)=>nc.columnId === c.id) : undefined\n                }));\n            const fields = modelFields.filter((c)=>!c.isCalculated);\n            const calculatedFields = modelFields.filter((c)=>c.isCalculated);\n            result.push({\n                ...model,\n                fields,\n                calculatedFields,\n                properties: {\n                    ...JSON.parse(model.properties)\n                }\n            });\n        }\n        return result;\n    }\n    async getModel(_root, args, ctx) {\n        const modelId = args.where.id;\n        const model = await ctx.modelRepository.findOneBy({\n            id: modelId\n        });\n        if (!model) {\n            throw new Error(\"Model not found\");\n        }\n        const modelColumns = await ctx.modelColumnRepository.findColumnsByModelIds([\n            model.id\n        ]);\n        const modelNestedColumns = await ctx.modelNestedColumnRepository.findAllBy({\n            modelId: model.id\n        });\n        const columns = modelColumns.map((c)=>({\n                ...c,\n                properties: JSON.parse(c.properties),\n                nestedColumns: c.type.includes(\"STRUCT\") ? modelNestedColumns.filter((nc)=>nc.columnId === c.id) : undefined\n            }));\n        const relations = (await ctx.relationRepository.findRelationsBy({\n            columnIds: modelColumns.map((c)=>c.id)\n        })).map((r)=>({\n                ...r,\n                type: r.joinType,\n                properties: r.properties ? JSON.parse(r.properties) : {}\n            }));\n        return {\n            ...model,\n            fields: columns.filter((c)=>!c.isCalculated),\n            calculatedFields: columns.filter((c)=>c.isCalculated),\n            relations,\n            properties: {\n                ...JSON.parse(model.properties)\n            }\n        };\n    }\n    async createModel(_root, args, ctx) {\n        const { sourceTableName, fields, primaryKey } = args.data;\n        try {\n            const model = await this.handleCreateModel(ctx, sourceTableName, fields, primaryKey);\n            ctx.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_CREATE_MODEL, {\n                data: args.data\n            });\n            return model;\n        } catch (error) {\n            ctx.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_CREATE_MODEL, {\n                data: args.data,\n                error\n            }, error.extensions?.service, false);\n            throw error;\n        }\n    }\n    async handleCreateModel(ctx, sourceTableName, fields, primaryKey) {\n        const project = await ctx.projectService.getCurrentProject();\n        const dataSourceTables = await ctx.projectService.getProjectDataSourceTables(project);\n        this.validateTableExist(sourceTableName, dataSourceTables);\n        this.validateColumnsExist(sourceTableName, fields, dataSourceTables);\n        // create model\n        const dataSourceTable = dataSourceTables.find((table)=>table.name === sourceTableName);\n        if (!dataSourceTable) {\n            throw new Error(\"Table not found in the data source\");\n        }\n        const properties = dataSourceTable?.properties;\n        const modelValue = {\n            projectId: project.id,\n            displayName: sourceTableName,\n            referenceName: (0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.replaceInvalidReferenceName)(sourceTableName),\n            sourceTableName: sourceTableName,\n            cached: false,\n            refreshTime: null,\n            properties: properties ? JSON.stringify(properties) : null\n        };\n        const model = await ctx.modelRepository.createOne(modelValue);\n        // create columns\n        const compactColumns = dataSourceTable.columns.filter((c)=>fields.includes(c.name));\n        const columnValues = compactColumns.map((column)=>({\n                modelId: model.id,\n                isCalculated: false,\n                displayName: column.name,\n                referenceName: (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.transformInvalidColumnName)(column.name),\n                sourceColumnName: column.name,\n                type: column.type || \"string\",\n                notNull: column.notNull || false,\n                isPk: primaryKey === column.name,\n                properties: column.properties ? JSON.stringify(column.properties) : null\n            }));\n        const columns = await ctx.modelColumnRepository.createMany(columnValues);\n        // create nested columns\n        const nestedColumnValues = compactColumns.flatMap((compactColumn)=>{\n            const column = columns.find((c)=>c.sourceColumnName === compactColumn.name);\n            if (!column) return [];\n            return (0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.handleNestedColumns)(compactColumn, {\n                modelId: column.modelId,\n                columnId: column.id,\n                sourceColumnName: column.sourceColumnName\n            });\n        });\n        await ctx.modelNestedColumnRepository.createMany(nestedColumnValues);\n        logger.info(`Model created: ${JSON.stringify(model)}`);\n        return model;\n    }\n    async updateModel(_root, args, ctx) {\n        const { fields, primaryKey } = args.data;\n        try {\n            const model = await this.handleUpdateModel(ctx, args, fields, primaryKey);\n            ctx.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_UPDATE_MODEL, {\n                data: args.data\n            });\n            return model;\n        } catch (err) {\n            ctx.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_UPDATE_MODEL, {\n                data: args.data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async handleUpdateModel(ctx, args, fields, primaryKey) {\n        const project = await ctx.projectService.getCurrentProject();\n        const dataSourceTables = await ctx.projectService.getProjectDataSourceTables(project);\n        const model = await ctx.modelRepository.findOneBy({\n            id: args.where.id\n        });\n        const existingColumns = await ctx.modelColumnRepository.findAllBy({\n            modelId: model.id,\n            isCalculated: false\n        });\n        const { sourceTableName } = model;\n        this.validateTableExist(sourceTableName, dataSourceTables);\n        this.validateColumnsExist(sourceTableName, fields, dataSourceTables);\n        const sourceTableColumns = dataSourceTables.find((table)=>table.name === sourceTableName)?.columns;\n        const { toDeleteColumnIds, toCreateColumns, toUpdateColumns } = (0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.findColumnsToUpdate)(fields, existingColumns, sourceTableColumns);\n        await (0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.updateModelPrimaryKey)(ctx.modelColumnRepository, model.id, primaryKey);\n        // delete columns\n        if (toDeleteColumnIds.length) {\n            await ctx.modelColumnRepository.deleteMany(toDeleteColumnIds);\n        }\n        // create columns\n        if (toCreateColumns.length) {\n            const compactColumns = sourceTableColumns.filter((sourceColumn)=>toCreateColumns.includes(sourceColumn.name));\n            const columnValues = compactColumns.map((column)=>{\n                const columnValue = {\n                    modelId: model.id,\n                    isCalculated: false,\n                    displayName: column.name,\n                    sourceColumnName: column.name,\n                    referenceName: (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.transformInvalidColumnName)(column.name),\n                    type: column.type || \"string\",\n                    notNull: column.notNull,\n                    isPk: primaryKey === column.name,\n                    properties: column.properties ? JSON.stringify(column.properties) : null\n                };\n                return columnValue;\n            });\n            const columns = await ctx.modelColumnRepository.createMany(columnValues);\n            // create nested columns\n            const nestedColumnValues = compactColumns.flatMap((compactColumn)=>{\n                const column = columns.find((c)=>c.sourceColumnName === compactColumn.name);\n                return (0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.handleNestedColumns)(compactColumn, {\n                    modelId: column.modelId,\n                    columnId: column.id,\n                    sourceColumnName: column.sourceColumnName\n                });\n            });\n            await ctx.modelNestedColumnRepository.createMany(nestedColumnValues);\n        }\n        // update columns\n        if (toUpdateColumns.length) {\n            for (const { id, sourceColumnName, type } of toUpdateColumns){\n                const column = await ctx.modelColumnRepository.updateOne(id, {\n                    type\n                });\n                // if the struct type is changed, need to re-create nested columns\n                if (type.includes(\"STRUCT\")) {\n                    const sourceColumn = sourceTableColumns.find((sourceColumn)=>sourceColumn.name === sourceColumnName);\n                    await ctx.modelNestedColumnRepository.deleteAllBy({\n                        columnId: column.id\n                    });\n                    await ctx.modelNestedColumnRepository.createMany((0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.handleNestedColumns)(sourceColumn, {\n                        modelId: column.modelId,\n                        columnId: column.id,\n                        sourceColumnName: sourceColumnName\n                    }));\n                }\n            }\n        }\n        logger.info(`Model updated: ${JSON.stringify(model)}`);\n        return model;\n    }\n    // delete model\n    async deleteModel(_root, args, ctx) {\n        const modelId = args.where.id;\n        const model = await ctx.modelRepository.findOneBy({\n            id: modelId\n        });\n        if (!model) {\n            throw new Error(\"Model not found\");\n        }\n        // related columns and relationships will be deleted in cascade\n        await ctx.modelRepository.deleteOne(modelId);\n        return true;\n    }\n    // update model metadata\n    async updateModelMetadata(_root, args, ctx) {\n        const modelId = args.where.id;\n        const data = args.data;\n        // check if model exists\n        const model = await ctx.modelRepository.findOneBy({\n            id: modelId\n        });\n        if (!model) {\n            throw new Error(\"Model not found\");\n        }\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.MODELING_UPDATE_MODEL_METADATA;\n        try {\n            // update model metadata\n            await this.handleUpdateModelMetadata(data, model, ctx, modelId);\n            // todo: considering using update ... from statement to do a batch update\n            // update column metadata\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(data.columns)) {\n                // find the columns that match the user requested columns\n                await this.handleUpdateColumnMetadata(data, ctx);\n            }\n            // update nested column metadata\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(data.nestedColumns)) {\n                await this.handleUpdateNestedColumnMetadata(data, ctx);\n            }\n            // update calculated field metadata\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(data.calculatedFields)) {\n                await this.handleUpdateCFMetadata(data, ctx);\n            }\n            // update relationship metadata\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(data.relationships)) {\n                await this.handleUpdateRelationshipMetadata(data, ctx);\n            }\n            ctx.telemetry.sendEvent(eventName, {\n                data\n            });\n            return true;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                data: data,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async handleUpdateModelMetadata(data, model, ctx, modelId) {\n        const modelMetadata = {};\n        // if displayName is not null, or undefined, update the displayName\n        if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(data.displayName)) {\n            modelMetadata.displayName = this.determineMetadataValue(data.displayName);\n        }\n        // if description is not null, or undefined, update the description in properties\n        if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(data.description)) {\n            const properties = lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(model.properties) ? {} : JSON.parse(model.properties);\n            properties.description = this.determineMetadataValue(data.description);\n            modelMetadata.properties = JSON.stringify(properties);\n        }\n        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(modelMetadata)) {\n            await ctx.modelRepository.updateOne(modelId, modelMetadata);\n        }\n    }\n    async handleUpdateRelationshipMetadata(data, ctx) {\n        const relationshipIds = data.relationships.map((r)=>r.id);\n        const relationships = await ctx.relationRepository.findRelationsByIds(relationshipIds);\n        for (const rel of relationships){\n            const requestedMetadata = data.relationships.find((r)=>r.id === rel.id);\n            const relationMetadata = {};\n            if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.description)) {\n                const properties = rel.properties ? JSON.parse(rel.properties) : {};\n                properties.description = this.determineMetadataValue(requestedMetadata.description);\n                relationMetadata.properties = JSON.stringify(properties);\n            }\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(relationMetadata)) {\n                await ctx.relationRepository.updateOne(rel.id, relationMetadata);\n            }\n        }\n    }\n    async handleUpdateCFMetadata(data, ctx) {\n        const calculatedFieldIds = data.calculatedFields.map((c)=>c.id);\n        const modelColumns = await ctx.modelColumnRepository.findColumnsByIds(calculatedFieldIds);\n        for (const col of modelColumns){\n            const requestedMetadata = data.calculatedFields.find((c)=>c.id === col.id);\n            const columnMetadata = {};\n            // check if description is empty\n            // if description is empty, skip the update\n            // if description is not empty, update the description in properties\n            if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.description)) {\n                const properties = col.properties ? JSON.parse(col.properties) : {};\n                properties.description = this.determineMetadataValue(requestedMetadata.description);\n                columnMetadata.properties = JSON.stringify(properties);\n            }\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(columnMetadata)) {\n                await ctx.modelColumnRepository.updateOne(col.id, columnMetadata);\n            }\n        }\n    }\n    async handleUpdateColumnMetadata(data, ctx) {\n        const columnIds = data.columns.map((c)=>c.id);\n        const modelColumns = await ctx.modelColumnRepository.findColumnsByIds(columnIds);\n        for (const col of modelColumns){\n            const requestedMetadata = data.columns.find((c)=>c.id === col.id);\n            // update metadata\n            const columnMetadata = {};\n            if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.displayName)) {\n                columnMetadata.displayName = this.determineMetadataValue(requestedMetadata.displayName);\n            }\n            if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.description)) {\n                const properties = col.properties ? JSON.parse(col.properties) : {};\n                properties.description = this.determineMetadataValue(requestedMetadata.description);\n                columnMetadata.properties = JSON.stringify(properties);\n            }\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(columnMetadata)) {\n                await ctx.modelColumnRepository.updateOne(col.id, columnMetadata);\n            }\n        }\n    }\n    async handleUpdateNestedColumnMetadata(data, ctx) {\n        const nestedColumnIds = data.nestedColumns.map((nc)=>nc.id);\n        const modelNestedColumns = await ctx.modelNestedColumnRepository.findNestedColumnsByIds(nestedColumnIds);\n        for (const col of modelNestedColumns){\n            const requestedMetadata = data.nestedColumns.find((c)=>c.id === col.id);\n            const nestedColumnMetadata = {};\n            if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.displayName)) {\n                nestedColumnMetadata.displayName = this.determineMetadataValue(requestedMetadata.displayName);\n            }\n            if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.description)) {\n                nestedColumnMetadata.properties = {\n                    ...col.properties,\n                    description: this.determineMetadataValue(requestedMetadata.description)\n                };\n            }\n            if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(nestedColumnMetadata)) {\n                await ctx.modelNestedColumnRepository.updateOne(col.id, nestedColumnMetadata);\n            }\n        }\n    }\n    // list views\n    async listViews(_root, _args, ctx) {\n        const { id } = await ctx.projectService.getCurrentProject();\n        const views = await ctx.viewRepository.findAllBy({\n            projectId: id\n        });\n        return views.map((view)=>({\n                ...view,\n                displayName: view.properties ? JSON.parse(view.properties)?.displayName : view.name\n            }));\n    }\n    async getView(_root, args, ctx) {\n        const viewId = args.where.id;\n        const view = await ctx.viewRepository.findOneBy({\n            id: viewId\n        });\n        if (!view) {\n            throw new Error(\"View not found\");\n        }\n        const displayName = view.properties ? JSON.parse(view.properties)?.displayName : view.name;\n        return {\n            ...view,\n            displayName\n        };\n    }\n    // validate a view name\n    async validateView(_root, args, ctx) {\n        const { name } = args.data;\n        return this.validateViewName(name, ctx);\n    }\n    // create view from sql of a response\n    async createView(_root, args, ctx) {\n        const { name: displayName, responseId } = args.data;\n        // validate view name\n        const validateResult = await this.validateViewName(displayName, ctx);\n        if (!validateResult.valid) {\n            throw new Error(validateResult.message);\n        }\n        // create view\n        const project = await ctx.projectService.getCurrentProject();\n        const { manifest } = await ctx.deployService.getLastDeployment(project.id);\n        // get sql statement of a response\n        const response = await ctx.askingService.getResponse(responseId);\n        if (!response) {\n            throw new Error(`Thread response ${responseId} not found`);\n        }\n        // construct cte sql and format it\n        const statement = (0,sql_formatter__WEBPACK_IMPORTED_MODULE_2__.format)(response.sql);\n        // describe columns\n        const { columns } = await ctx.queryService.describeStatement(statement, {\n            project,\n            limit: 1,\n            modelingOnly: false,\n            manifest\n        });\n        if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(columns)) {\n            throw new Error(\"Failed to describe statement\");\n        }\n        // properties\n        const properties = {\n            displayName,\n            columns,\n            // properties from the thread response\n            responseId,\n            question: response.question\n        };\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_7__.TelemetryEvent.HOME_CREATE_VIEW;\n        const eventProperties = {\n            statement,\n            displayName\n        };\n        // create view\n        try {\n            const name = (0,_utils_regex__WEBPACK_IMPORTED_MODULE_5__.replaceAllowableSyntax)(displayName);\n            const view = await ctx.viewRepository.createOne({\n                projectId: project.id,\n                name,\n                statement,\n                properties: JSON.stringify(properties)\n            });\n            // telemetry\n            ctx.telemetry.sendEvent(eventName, eventProperties);\n            return {\n                ...view,\n                displayName\n            };\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                ...eventProperties,\n                error: err\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    // delete view\n    async deleteView(_root, args, ctx) {\n        const viewId = args.where.id;\n        const view = await ctx.viewRepository.findOneBy({\n            id: viewId\n        });\n        if (!view) {\n            throw new Error(\"View not found\");\n        }\n        await ctx.viewRepository.deleteOne(viewId);\n        return true;\n    }\n    async previewModelData(_root, args, ctx) {\n        const modelId = args.where.id;\n        const model = await ctx.modelRepository.findOneBy({\n            id: modelId\n        });\n        if (!model) {\n            throw new Error(\"Model not found\");\n        }\n        const project = await ctx.projectService.getCurrentProject();\n        const { manifest } = await ctx.mdlService.makeCurrentModelMDL();\n        const modelColumns = await ctx.modelColumnRepository.findColumnsByModelIds([\n            model.id\n        ]);\n        const sql = `select ${(0,_utils_model__WEBPACK_IMPORTED_MODULE_6__.getPreviewColumnsStr)(modelColumns)} from \"${model.referenceName}\"`;\n        const data = await ctx.queryService.preview(sql, {\n            project,\n            modelingOnly: false,\n            manifest\n        });\n        return data;\n    }\n    async previewViewData(_root, args, ctx) {\n        const { id: viewId, limit } = args.where;\n        const view = await ctx.viewRepository.findOneBy({\n            id: viewId\n        });\n        if (!view) {\n            throw new Error(\"View not found\");\n        }\n        const { manifest } = await ctx.mdlService.makeCurrentModelMDL();\n        const project = await ctx.projectService.getCurrentProject();\n        const data = await ctx.queryService.preview(view.statement, {\n            project,\n            limit,\n            manifest,\n            modelingOnly: false\n        });\n        return data;\n    }\n    // Notice: this is used by AI service.\n    // any change to this resolver should be synced with AI service.\n    async previewSql(_root, args, ctx) {\n        const { sql, projectId, limit, dryRun } = args.data;\n        const project = projectId ? await ctx.projectService.getProjectById(projectId) : await ctx.projectService.getCurrentProject();\n        const { manifest } = await ctx.deployService.getLastDeployment(project.id);\n        return await ctx.queryService.preview(sql, {\n            project,\n            limit: limit,\n            modelingOnly: false,\n            manifest,\n            dryRun\n        });\n    }\n    async getNativeSql(_root, args, ctx) {\n        const { responseId } = args;\n        // If using a sample dataset, native SQL is not supported\n        const project = await ctx.projectService.getCurrentProject();\n        if (project.sampleDataset) {\n            throw new Error(`Doesn't support Native SQL`);\n        }\n        const { manifest } = await ctx.mdlService.makeCurrentModelMDL();\n        // get sql statement of a response\n        const response = await ctx.askingService.getResponse(responseId);\n        if (!response) {\n            throw new Error(`Thread response ${responseId} not found`);\n        }\n        // construct cte sql and format it\n        let nativeSql;\n        if (project.type === _types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB) {\n            logger.info(`Getting native sql from wren engine`);\n            nativeSql = await ctx.wrenEngineAdaptor.getNativeSQL(response.sql, {\n                manifest,\n                modelingOnly: false\n            });\n        } else {\n            logger.info(`Getting native sql from ibis server`);\n            nativeSql = await ctx.ibisServerAdaptor.getNativeSql({\n                dataSource: project.type,\n                sql: response.sql,\n                mdl: manifest\n            });\n        }\n        return (0,sql_formatter__WEBPACK_IMPORTED_MODULE_2__.format)(nativeSql);\n    }\n    async updateViewMetadata(_root, args, ctx) {\n        const viewId = args.where.id;\n        const data = args.data;\n        // check if view exists\n        const view = await ctx.viewRepository.findOneBy({\n            id: viewId\n        });\n        if (!view) {\n            throw new Error(\"View not found\");\n        }\n        // update view metadata\n        const properties = JSON.parse(view.properties);\n        let newName = view.name;\n        // if displayName is not null, or undefined, update the displayName\n        if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(data.displayName)) {\n            await this.validateViewName(data.displayName, ctx, viewId);\n            newName = (0,_utils_regex__WEBPACK_IMPORTED_MODULE_5__.replaceAllowableSyntax)(data.displayName);\n            properties.displayName = this.determineMetadataValue(data.displayName);\n        }\n        // if description is not null, or undefined, update the description in properties\n        if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(data.description)) {\n            properties.description = this.determineMetadataValue(data.description);\n        }\n        // view column metadata\n        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(data.columns)) {\n            const viewColumns = properties.columns;\n            for (const col of viewColumns){\n                const requestedMetadata = data.columns.find((c)=>c.referenceName === col.name);\n                if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_4___default()(requestedMetadata.description)) {\n                    col.properties = col.properties || {};\n                    col.properties.description = this.determineMetadataValue(requestedMetadata.description);\n                }\n            }\n            properties.columns = viewColumns;\n        }\n        await ctx.viewRepository.updateOne(viewId, {\n            name: newName,\n            properties: JSON.stringify(properties)\n        });\n        return true;\n    }\n    determineMetadataValue(value) {\n        // if it's empty string, meaning users want to remove the value\n        // so we return null\n        if (value === \"\") {\n            return null;\n        }\n        // otherwise, return the value\n        return value;\n    }\n    // validate view name\n    async validateViewName(viewDisplayName, ctx, selfView) {\n        // check if view name is valid\n        // a-z, A-Z, 0-9, _, - are allowed and cannot start with number\n        const { valid, message } = (0,_utils_regex__WEBPACK_IMPORTED_MODULE_5__.validateDisplayName)(viewDisplayName);\n        if (!valid) {\n            return {\n                valid: false,\n                message\n            };\n        }\n        const referenceName = (0,_utils_regex__WEBPACK_IMPORTED_MODULE_5__.replaceAllowableSyntax)(viewDisplayName);\n        // check if view name is duplicated\n        const { id } = await ctx.projectService.getCurrentProject();\n        const views = await ctx.viewRepository.findAllBy({\n            projectId: id\n        });\n        if (views.find((v)=>v.name === referenceName && v.id !== selfView)) {\n            return {\n                valid: false,\n                message: `Generated view name \"${referenceName}\" is duplicated`\n            };\n        }\n        return {\n            valid: true\n        };\n    }\n    validateTableExist(tableName, dataSourceTables) {\n        if (!dataSourceTables.find((c)=>c.name === tableName)) {\n            throw new Error(`Table ${tableName} not found in the data Source`);\n        }\n    }\n    validateColumnsExist(tableName, fields, dataSourceTables) {\n        const tableColumns = dataSourceTables.find((c)=>c.name === tableName)?.columns;\n        for (const field of fields){\n            if (!tableColumns.find((c)=>c.name === field)) {\n                throw new Error(`Column \"${field}\" not found in table \"${tableName}\" in the data Source`);\n            }\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers/modelResolver.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/resolvers/projectResolver.ts":
/*!********************************************************!*\
  !*** ./src/apollo/server/resolvers/projectResolver.ts ***!
  \********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnboardingStatusEnum: () => (/* binding */ OnboardingStatusEnum),\n/* harmony export */   ProjectResolver: () => (/* binding */ ProjectResolver)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_data__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/data */ \"(api)/./src/apollo/server/data/index.ts\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/snakeCase */ \"lodash/snakeCase\");\n/* harmony import */ var lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _server_managers_dataSourceSchemaDetector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/managers/dataSourceSchemaDetector */ \"(api)/./src/apollo/server/managers/dataSourceSchemaDetector.ts\");\n/* harmony import */ var _dataSource__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dataSource */ \"(api)/./src/apollo/server/dataSource.ts\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__]);\n_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"DataSourceResolver\");\nlogger.level = \"debug\";\nvar OnboardingStatusEnum;\n(function(OnboardingStatusEnum) {\n    OnboardingStatusEnum[\"NOT_STARTED\"] = \"NOT_STARTED\";\n    OnboardingStatusEnum[\"DATASOURCE_SAVED\"] = \"DATASOURCE_SAVED\";\n    OnboardingStatusEnum[\"ONBOARDING_FINISHED\"] = \"ONBOARDING_FINISHED\";\n    OnboardingStatusEnum[\"WITH_SAMPLE_DATASET\"] = \"WITH_SAMPLE_DATASET\";\n})(OnboardingStatusEnum || (OnboardingStatusEnum = {}));\nclass ProjectResolver {\n    constructor(){\n        this.getSettings = this.getSettings.bind(this);\n        this.updateCurrentProject = this.updateCurrentProject.bind(this);\n        this.resetCurrentProject = this.resetCurrentProject.bind(this);\n        this.saveDataSource = this.saveDataSource.bind(this);\n        this.updateDataSource = this.updateDataSource.bind(this);\n        this.listDataSourceTables = this.listDataSourceTables.bind(this);\n        this.saveTables = this.saveTables.bind(this);\n        this.autoGenerateRelation = this.autoGenerateRelation.bind(this);\n        this.saveRelations = this.saveRelations.bind(this);\n        this.getOnboardingStatus = this.getOnboardingStatus.bind(this);\n        this.startSampleDataset = this.startSampleDataset.bind(this);\n        this.triggerDataSourceDetection = this.triggerDataSourceDetection.bind(this);\n        this.getSchemaChange = this.getSchemaChange.bind(this);\n        this.getProjectRecommendationQuestions = this.getProjectRecommendationQuestions.bind(this);\n    }\n    async getSettings(_root, _arg, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const generalConnectionInfo = ctx.projectService.getGeneralConnectionInfo(project);\n        const dataSourceType = project.type;\n        return {\n            productVersion: ctx.config.wrenProductVersion || \"\",\n            dataSource: {\n                type: dataSourceType,\n                properties: {\n                    displayName: project.displayName,\n                    ...generalConnectionInfo\n                },\n                sampleDataset: project.sampleDataset\n            },\n            language: project.language\n        };\n    }\n    async getProjectRecommendationQuestions(_root, _arg, ctx) {\n        return ctx.projectService.getProjectRecommendationQuestions();\n    }\n    async updateCurrentProject(_root, arg, ctx) {\n        const { language } = arg.data;\n        const project = await ctx.projectService.getCurrentProject();\n        await ctx.projectRepository.updateOne(project.id, {\n            language\n        });\n        // only generating for user's data source\n        if (project.sampleDataset === null) {\n            await ctx.projectService.generateProjectRecommendationQuestions();\n        }\n        return true;\n    }\n    async resetCurrentProject(_root, _arg, ctx) {\n        let project;\n        try {\n            project = await ctx.projectService.getCurrentProject();\n        } catch  {\n            // no project found\n            return true;\n        }\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.SETTING_RESET_PROJECT;\n        try {\n            const id = project.id;\n            await ctx.schemaChangeRepository.deleteAllBy({\n                projectId: id\n            });\n            await ctx.deployService.deleteAllByProjectId(id);\n            await ctx.askingService.deleteAllByProjectId(id);\n            await ctx.modelService.deleteAllViewsByProjectId(id);\n            await ctx.modelService.deleteAllModelsByProjectId(id);\n            await ctx.projectService.deleteProject(id);\n            // telemetry\n            ctx.telemetry.sendEvent(eventName, {\n                projectId: id,\n                dataSourceType: project.type\n            });\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                dataSourceType: project.type,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n        return true;\n    }\n    async startSampleDataset(_root, _arg, ctx) {\n        const { name } = _arg.data;\n        const dataset = _server_data__WEBPACK_IMPORTED_MODULE_2__.sampleDatasets[lodash_snakeCase__WEBPACK_IMPORTED_MODULE_3___default()(name)];\n        if (!dataset) {\n            throw new Error(\"Sample dataset not found\");\n        }\n        if (!(name in _server_data__WEBPACK_IMPORTED_MODULE_2__.SampleDatasetName)) {\n            throw new Error(\"Invalid sample dataset name\");\n        }\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.CONNECTION_START_SAMPLE_DATASET;\n        const eventProperties = {\n            datasetName: name\n        };\n        try {\n            // create duckdb datasource\n            const initSql = (0,_server_data__WEBPACK_IMPORTED_MODULE_2__.buildInitSql)(name);\n            const duckdbDatasourceProperties = {\n                initSql,\n                extensions: [],\n                configurations: {}\n            };\n            await this.saveDataSource(_root, {\n                data: {\n                    type: _types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB,\n                    properties: duckdbDatasourceProperties\n                }\n            }, ctx);\n            const project = await ctx.projectService.getCurrentProject();\n            // list all the tables in the data source\n            const tables = await this.listDataSourceTables(_root, _arg, ctx);\n            const tableNames = tables.map((table)=>table.name);\n            // save tables as model and modelColumns\n            await this.overwriteModelsAndColumns(tableNames, ctx, project);\n            await ctx.modelService.updatePrimaryKeys(dataset.tables);\n            await ctx.modelService.batchUpdateModelProperties(dataset.tables);\n            await ctx.modelService.batchUpdateColumnProperties(dataset.tables);\n            // save relations\n            const relations = (0,_server_data__WEBPACK_IMPORTED_MODULE_2__.getRelations)(name);\n            const models = await ctx.modelRepository.findAll();\n            const columns = await ctx.modelColumnRepository.findAll();\n            const mappedRelations = this.buildRelationInput(relations, models, columns);\n            await ctx.modelService.saveRelations(mappedRelations);\n            // mark current project as using sample dataset\n            await ctx.projectRepository.updateOne(project.id, {\n                sampleDataset: name\n            });\n            await this.deploy(ctx);\n            // telemetry\n            ctx.telemetry.sendEvent(eventName, eventProperties);\n            return {\n                name\n            };\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                ...eventProperties,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async getOnboardingStatus(_root, _arg, ctx) {\n        let project;\n        try {\n            project = await ctx.projectRepository.getCurrentProject();\n        } catch (_err) {\n            return {\n                status: \"NOT_STARTED\"\n            };\n        }\n        const { id, sampleDataset } = project;\n        if (sampleDataset) {\n            return {\n                status: \"WITH_SAMPLE_DATASET\"\n            };\n        }\n        const models = await ctx.modelRepository.findAllBy({\n            projectId: id\n        });\n        if (!models.length) {\n            return {\n                status: \"DATASOURCE_SAVED\"\n            };\n        } else {\n            return {\n                status: \"ONBOARDING_FINISHED\"\n            };\n        }\n    }\n    async saveDataSource(_root, args, ctx) {\n        const { type, properties } = args.data;\n        // Currently only can create one project\n        await this.resetCurrentProject(_root, args, ctx);\n        const { displayName, ...connectionInfo } = properties;\n        const project = await ctx.projectService.createProject({\n            displayName,\n            type,\n            connectionInfo\n        });\n        logger.debug(`Project created.`);\n        // init dashboard\n        logger.debug(\"Dashboard init...\");\n        await ctx.dashboardService.initDashboard();\n        logger.debug(\"Dashboard created.\");\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.CONNECTION_SAVE_DATA_SOURCE;\n        const eventProperties = {\n            dataSourceType: type\n        };\n        // try to connect to the data source\n        try {\n            // handle duckdb connection\n            if (type === _types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB) {\n                connectionInfo;\n                await this.buildDuckDbEnvironment(ctx, {\n                    initSql: connectionInfo.initSql,\n                    extensions: connectionInfo.extensions,\n                    configurations: connectionInfo.configurations\n                });\n            } else {\n                // handle other data source\n                await ctx.projectService.getProjectDataSourceTables(project);\n                logger.debug(`Data source tables fetched`);\n            }\n            // telemetry\n            ctx.telemetry.sendEvent(eventName, eventProperties);\n        } catch (err) {\n            logger.error(\"Failed to get project tables\", JSON.stringify(err, null, 2));\n            await ctx.projectRepository.deleteOne(project.id);\n            ctx.telemetry.sendEvent(eventName, {\n                eventProperties,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n        return {\n            type: project.type,\n            properties: {\n                displayName: project.displayName,\n                ...ctx.projectService.getGeneralConnectionInfo(project)\n            }\n        };\n    }\n    async updateDataSource(_root, args, ctx) {\n        const { properties } = args.data;\n        const { displayName, ...connectionInfo } = properties;\n        const project = await ctx.projectService.getCurrentProject();\n        const dataSourceType = project.type;\n        // only new connection info needed to encrypt\n        const toUpdateConnectionInfo = (0,_dataSource__WEBPACK_IMPORTED_MODULE_5__.encryptConnectionInfo)(dataSourceType, connectionInfo);\n        if (dataSourceType === _types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB) {\n            // prepare duckdb environment in wren-engine\n            const { initSql, extensions, configurations } = toUpdateConnectionInfo;\n            await this.buildDuckDbEnvironment(ctx, {\n                initSql,\n                extensions,\n                configurations\n            });\n        } else {\n            const updatedProject = {\n                ...project,\n                displayName,\n                connectionInfo: {\n                    ...project.connectionInfo,\n                    ...toUpdateConnectionInfo\n                }\n            };\n            await ctx.projectService.getProjectDataSourceTables(updatedProject);\n            logger.debug(`Data source tables fetched`);\n        }\n        const updatedProject = await ctx.projectRepository.updateOne(project.id, {\n            displayName,\n            connectionInfo: {\n                ...project.connectionInfo,\n                ...toUpdateConnectionInfo\n            }\n        });\n        return {\n            type: updatedProject.type,\n            properties: {\n                displayName: updatedProject.displayName,\n                ...ctx.projectService.getGeneralConnectionInfo(updatedProject)\n            }\n        };\n    }\n    async listDataSourceTables(_root, _arg, ctx) {\n        return await ctx.projectService.getProjectDataSourceTables();\n    }\n    async saveTables(_root, arg, ctx) {\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.CONNECTION_SAVE_TABLES;\n        // get current project\n        const project = await ctx.projectService.getCurrentProject();\n        try {\n            // delete existing models and columns\n            const { models, columns } = await this.overwriteModelsAndColumns(arg.data.tables, ctx, project);\n            // telemetry\n            ctx.telemetry.sendEvent(eventName, {\n                dataSourceType: project.type,\n                tablesCount: models.length,\n                columnsCount: columns.length\n            });\n            // async deploy to wren-engine and ai service\n            this.deploy(ctx);\n            return {\n                models: models,\n                columns\n            };\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                dataSourceType: project.type,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async autoGenerateRelation(_root, _arg, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        // get models and columns\n        const models = await ctx.modelRepository.findAllBy({\n            projectId: project.id\n        });\n        const modelIds = models.map((m)=>m.id);\n        const columns = await ctx.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const constraints = await ctx.projectService.getProjectSuggestedConstraint(project);\n        // generate relation\n        const relations = [];\n        for (const constraint of constraints){\n            const { constraintTable, constraintColumn, constraintedTable, constraintedColumn } = constraint;\n            // validate tables and columns exists in our models and model columns\n            const fromModel = models.find((m)=>m.sourceTableName === constraintTable);\n            const toModel = models.find((m)=>m.sourceTableName === constraintedTable);\n            if (!fromModel || !toModel) {\n                continue;\n            }\n            const fromColumn = columns.find((c)=>c.modelId === fromModel.id && c.sourceColumnName === constraintColumn);\n            const toColumn = columns.find((c)=>c.modelId === toModel.id && c.sourceColumnName === constraintedColumn);\n            if (!fromColumn || !toColumn) {\n                continue;\n            }\n            // create relation\n            const relation = {\n                // upper case the first letter of the sourceTableName\n                name: constraint.constraintName,\n                fromModelId: fromModel.id,\n                fromModelReferenceName: fromModel.referenceName,\n                fromColumnId: fromColumn.id,\n                fromColumnReferenceName: fromColumn.referenceName,\n                toModelId: toModel.id,\n                toModelReferenceName: toModel.referenceName,\n                toColumnId: toColumn.id,\n                toColumnReferenceName: toColumn.referenceName,\n                // TODO: add join type\n                type: _types__WEBPACK_IMPORTED_MODULE_0__.RelationType.ONE_TO_MANY\n            };\n            relations.push(relation);\n        }\n        // group by model\n        return models.map(({ id, displayName, referenceName })=>({\n                id,\n                displayName,\n                referenceName,\n                relations: relations.filter((relation)=>relation.fromModelId === id && // exclude self-referential relationship\n                    relation.toModelId !== relation.fromModelId)\n            }));\n    }\n    async saveRelations(_root, arg, ctx) {\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.CONNECTION_SAVE_RELATION;\n        try {\n            const savedRelations = await ctx.modelService.saveRelations(arg.data.relations);\n            // async deploy\n            this.deploy(ctx);\n            ctx.telemetry.sendEvent(eventName, {\n                relationCount: savedRelations.length\n            });\n            return savedRelations;\n        } catch (err) {\n            ctx.telemetry.sendEvent(eventName, {\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async getSchemaChange(_root, _arg, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const lastSchemaChange = await ctx.schemaChangeRepository.findLastSchemaChange(project.id);\n        if (!lastSchemaChange) {\n            return {\n                deletedTables: null,\n                deletedColumns: null,\n                modifiedColumns: null,\n                lastSchemaChangeTime: null\n            };\n        }\n        const models = await ctx.modelRepository.findAllBy({\n            projectId: project.id\n        });\n        const modelIds = models.map((model)=>model.id);\n        const modelColumns = await ctx.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const modelRelationships = await ctx.relationRepository.findRelationInfoBy({\n            modelIds\n        });\n        const schemaDetector = new _server_managers_dataSourceSchemaDetector__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n            ctx,\n            projectId: project.id\n        });\n        const resolves = lastSchemaChange.resolve;\n        const unresolvedChanges = Object.keys(resolves).reduce((result, key)=>{\n            const isResolved = resolves[key];\n            const changes = lastSchemaChange.change[key];\n            // return if resolved or no changes\n            if (isResolved || !changes) return result;\n            // Mapping with affected models and columns and affected calculated fields and relationships data into schema change\n            const affecteds = schemaDetector.getAffectedResources(changes, {\n                models,\n                modelColumns,\n                modelRelationships\n            });\n            const affectedChanges = affecteds.length ? affecteds : null;\n            return {\n                ...result,\n                [key]: affectedChanges\n            };\n        }, {});\n        return {\n            ...unresolvedChanges,\n            lastSchemaChangeTime: lastSchemaChange.createdAt\n        };\n    }\n    async triggerDataSourceDetection(_root, _arg, ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const schemaDetector = new _server_managers_dataSourceSchemaDetector__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n            ctx,\n            projectId: project.id\n        });\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.MODELING_DETECT_SCHEMA_CHANGE;\n        try {\n            const hasSchemaChange = await schemaDetector.detectSchemaChange();\n            ctx.telemetry.sendEvent(eventName, {\n                hasSchemaChange\n            });\n            return hasSchemaChange;\n        } catch (error) {\n            ctx.telemetry.sendEvent(eventName, {\n                error\n            }, error.extensions?.service, false);\n            throw error;\n        }\n    }\n    async resolveSchemaChange(_root, arg, ctx) {\n        const { type } = arg.where;\n        const project = await ctx.projectService.getCurrentProject();\n        const schemaDetector = new _server_managers_dataSourceSchemaDetector__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n            ctx,\n            projectId: project.id\n        });\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_6__.TelemetryEvent.MODELING_RESOLVE_SCHEMA_CHANGE;\n        try {\n            await schemaDetector.resolveSchemaChange(type);\n            ctx.telemetry.sendEvent(eventName, {\n                type\n            });\n        } catch (error) {\n            ctx.telemetry.sendEvent(eventName, {\n                type,\n                error\n            }, error.extensions?.service, false);\n            throw error;\n        }\n        return true;\n    }\n    async deploy(ctx) {\n        const project = await ctx.projectService.getCurrentProject();\n        const { manifest } = await ctx.mdlService.makeCurrentModelMDL();\n        const deployRes = await ctx.deployService.deploy(manifest, project.id);\n        // only generating for user's data source\n        if (project.sampleDataset === null) {\n            await ctx.projectService.generateProjectRecommendationQuestions();\n        }\n        return deployRes;\n    }\n    buildRelationInput(relations, models, columns) {\n        const relationInput = relations.map((relation)=>{\n            const { fromModelName, fromColumnName, toModelName, toColumnName, type } = relation;\n            const fromModelId = models.find((model)=>model.sourceTableName === fromModelName)?.id;\n            const toModelId = models.find((model)=>model.sourceTableName === toModelName)?.id;\n            if (!fromModelId || !toModelId) {\n                throw new Error(`Model not found, fromModelName \"${fromModelName}\" to toModelName: \"${toModelName}\"`);\n            }\n            const fromColumnId = columns.find((column)=>column.referenceName === fromColumnName && column.modelId === fromModelId)?.id;\n            const toColumnId = columns.find((column)=>column.referenceName === toColumnName && column.modelId === toModelId)?.id;\n            if (!fromColumnId || !toColumnId) {\n                throw new Error(`Column not found fromColumnName: ${fromColumnName} toColumnName: ${toColumnName}`);\n            }\n            return {\n                fromModelId,\n                fromColumnId,\n                toModelId,\n                toColumnId,\n                type,\n                description: relation.description\n            };\n        });\n        return relationInput;\n    }\n    async overwriteModelsAndColumns(tables, ctx, project) {\n        // delete existing models and columns\n        await ctx.modelService.deleteAllModelsByProjectId(project.id);\n        const compactTables = await ctx.projectService.getProjectDataSourceTables(project);\n        const selectedTables = compactTables.filter((table)=>tables.includes(table.name));\n        // create models\n        const modelValues = selectedTables.map((table)=>{\n            const properties = table?.properties;\n            // compactTable contain schema and catalog, these information are for building tableReference in mdl\n            const model = {\n                projectId: project.id,\n                displayName: table.name,\n                referenceName: (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.replaceInvalidReferenceName)(table.name),\n                sourceTableName: table.name,\n                cached: false,\n                refreshTime: null,\n                properties: properties ? JSON.stringify(properties) : null\n            };\n            return model;\n        });\n        const models = await ctx.modelRepository.createMany(modelValues);\n        // create columns\n        const columnValues = selectedTables.flatMap((table)=>{\n            const compactColumns = table.columns;\n            const primaryKey = table.primaryKey;\n            const model = models.find((m)=>m.sourceTableName === table.name);\n            return compactColumns.map((column)=>({\n                    modelId: model.id,\n                    isCalculated: false,\n                    displayName: column.name,\n                    referenceName: (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.transformInvalidColumnName)(column.name),\n                    sourceColumnName: column.name,\n                    type: column.type || \"string\",\n                    notNull: column.notNull || false,\n                    isPk: primaryKey === column.name,\n                    properties: column.properties ? JSON.stringify(column.properties) : null\n                }));\n        });\n        const columns = await ctx.modelColumnRepository.createMany(columnValues);\n        // create nested columns\n        const compactColumns = selectedTables.flatMap((table)=>table.columns);\n        const nestedColumnValues = compactColumns.flatMap((compactColumn)=>{\n            const column = columns.find((c)=>c.sourceColumnName === compactColumn.name);\n            return (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.handleNestedColumns)(compactColumn, {\n                modelId: column.modelId,\n                columnId: column.id,\n                sourceColumnName: column.sourceColumnName\n            });\n        });\n        await ctx.modelNestedColumnRepository.createMany(nestedColumnValues);\n        return {\n            models,\n            columns\n        };\n    }\n    concatInitSql(initSql, extensions) {\n        const installExtensions = extensions.map((ext)=>`INSTALL ${ext};`).join(\"\\n\");\n        return (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.trim)(`${installExtensions}\\n${initSql}`);\n    }\n    async buildDuckDbEnvironment(ctx, options) {\n        const { initSql, extensions, configurations } = options;\n        const initSqlWithExtensions = this.concatInitSql(initSql, extensions);\n        await ctx.wrenEngineAdaptor.prepareDuckDB({\n            sessionProps: configurations,\n            initSql: initSqlWithExtensions\n        });\n        // check can list dataset table\n        await ctx.wrenEngineAdaptor.listTables();\n        // patch wren-engine config\n        const config = {\n            \"wren.datasource.type\": \"duckdb\"\n        };\n        await ctx.wrenEngineAdaptor.patchConfig(config);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9yZXNvbHZlcnMvcHJvamVjdFJlc29sdmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTa0I7QUFPSztBQWFEO0FBQ2E7QUFLZ0I7QUFDRztBQUNFO0FBRXhELE1BQU1lLFNBQVNaLHdEQUFTQSxDQUFDO0FBQ3pCWSxPQUFPQyxLQUFLLEdBQUc7O1VBRUhDOzs7OztHQUFBQSx5QkFBQUE7QUFPTCxNQUFNQztJQUNYQyxhQUFjO1FBQ1osSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSSxDQUFDQSxXQUFXLENBQUNDLElBQUksQ0FBQyxJQUFJO1FBQzdDLElBQUksQ0FBQ0Msb0JBQW9CLEdBQUcsSUFBSSxDQUFDQSxvQkFBb0IsQ0FBQ0QsSUFBSSxDQUFDLElBQUk7UUFDL0QsSUFBSSxDQUFDRSxtQkFBbUIsR0FBRyxJQUFJLENBQUNBLG1CQUFtQixDQUFDRixJQUFJLENBQUMsSUFBSTtRQUM3RCxJQUFJLENBQUNHLGNBQWMsR0FBRyxJQUFJLENBQUNBLGNBQWMsQ0FBQ0gsSUFBSSxDQUFDLElBQUk7UUFDbkQsSUFBSSxDQUFDSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUNBLGdCQUFnQixDQUFDSixJQUFJLENBQUMsSUFBSTtRQUN2RCxJQUFJLENBQUNLLG9CQUFvQixHQUFHLElBQUksQ0FBQ0Esb0JBQW9CLENBQUNMLElBQUksQ0FBQyxJQUFJO1FBQy9ELElBQUksQ0FBQ00sVUFBVSxHQUFHLElBQUksQ0FBQ0EsVUFBVSxDQUFDTixJQUFJLENBQUMsSUFBSTtRQUMzQyxJQUFJLENBQUNPLG9CQUFvQixHQUFHLElBQUksQ0FBQ0Esb0JBQW9CLENBQUNQLElBQUksQ0FBQyxJQUFJO1FBQy9ELElBQUksQ0FBQ1EsYUFBYSxHQUFHLElBQUksQ0FBQ0EsYUFBYSxDQUFDUixJQUFJLENBQUMsSUFBSTtRQUNqRCxJQUFJLENBQUNTLG1CQUFtQixHQUFHLElBQUksQ0FBQ0EsbUJBQW1CLENBQUNULElBQUksQ0FBQyxJQUFJO1FBQzdELElBQUksQ0FBQ1Usa0JBQWtCLEdBQUcsSUFBSSxDQUFDQSxrQkFBa0IsQ0FBQ1YsSUFBSSxDQUFDLElBQUk7UUFDM0QsSUFBSSxDQUFDVywwQkFBMEIsR0FDN0IsSUFBSSxDQUFDQSwwQkFBMEIsQ0FBQ1gsSUFBSSxDQUFDLElBQUk7UUFDM0MsSUFBSSxDQUFDWSxlQUFlLEdBQUcsSUFBSSxDQUFDQSxlQUFlLENBQUNaLElBQUksQ0FBQyxJQUFJO1FBQ3JELElBQUksQ0FBQ2EsaUNBQWlDLEdBQ3BDLElBQUksQ0FBQ0EsaUNBQWlDLENBQUNiLElBQUksQ0FBQyxJQUFJO0lBQ3BEO0lBRUEsTUFBYUQsWUFBWWUsS0FBVSxFQUFFQyxJQUFTLEVBQUVDLEdBQWEsRUFBRTtRQUM3RCxNQUFNQyxVQUFVLE1BQU1ELElBQUlFLGNBQWMsQ0FBQ0MsaUJBQWlCO1FBQzFELE1BQU1DLHdCQUNKSixJQUFJRSxjQUFjLENBQUNHLHdCQUF3QixDQUFDSjtRQUM5QyxNQUFNSyxpQkFBaUJMLFFBQVFNLElBQUk7UUFFbkMsT0FBTztZQUNMQyxnQkFBZ0JSLElBQUlTLE1BQU0sQ0FBQ0Msa0JBQWtCLElBQUk7WUFDakRDLFlBQVk7Z0JBQ1ZKLE1BQU1EO2dCQUNOTSxZQUFZO29CQUNWQyxhQUFhWixRQUFRWSxXQUFXO29CQUNoQyxHQUFHVCxxQkFBcUI7Z0JBQzFCO2dCQUNBVSxlQUFlYixRQUFRYSxhQUFhO1lBQ3RDO1lBQ0FDLFVBQVVkLFFBQVFjLFFBQVE7UUFDNUI7SUFDRjtJQUVBLE1BQWFsQixrQ0FDWEMsS0FBVSxFQUNWQyxJQUFTLEVBQ1RDLEdBQWEsRUFDYjtRQUNBLE9BQU9BLElBQUlFLGNBQWMsQ0FBQ0wsaUNBQWlDO0lBQzdEO0lBRUEsTUFBYVoscUJBQ1hhLEtBQVUsRUFDVmtCLEdBQW1DLEVBQ25DaEIsR0FBYSxFQUNiO1FBQ0EsTUFBTSxFQUFFZSxRQUFRLEVBQUUsR0FBR0MsSUFBSUMsSUFBSTtRQUM3QixNQUFNaEIsVUFBVSxNQUFNRCxJQUFJRSxjQUFjLENBQUNDLGlCQUFpQjtRQUMxRCxNQUFNSCxJQUFJa0IsaUJBQWlCLENBQUNDLFNBQVMsQ0FBQ2xCLFFBQVFtQixFQUFFLEVBQUU7WUFDaERMO1FBQ0Y7UUFFQSx5Q0FBeUM7UUFDekMsSUFBSWQsUUFBUWEsYUFBYSxLQUFLLE1BQU07WUFDbEMsTUFBTWQsSUFBSUUsY0FBYyxDQUFDbUIsc0NBQXNDO1FBQ2pFO1FBQ0EsT0FBTztJQUNUO0lBRUEsTUFBYW5DLG9CQUFvQlksS0FBVSxFQUFFQyxJQUFTLEVBQUVDLEdBQWEsRUFBRTtRQUNyRSxJQUFJQztRQUNKLElBQUk7WUFDRkEsVUFBVSxNQUFNRCxJQUFJRSxjQUFjLENBQUNDLGlCQUFpQjtRQUN0RCxFQUFFLE9BQU07WUFDTixtQkFBbUI7WUFDbkIsT0FBTztRQUNUO1FBQ0EsTUFBTW1CLFlBQVk3QyxnRUFBY0EsQ0FBQzhDLHFCQUFxQjtRQUN0RCxJQUFJO1lBQ0YsTUFBTUgsS0FBS25CLFFBQVFtQixFQUFFO1lBQ3JCLE1BQU1wQixJQUFJd0Isc0JBQXNCLENBQUNDLFdBQVcsQ0FBQztnQkFBRUMsV0FBV047WUFBRztZQUM3RCxNQUFNcEIsSUFBSTJCLGFBQWEsQ0FBQ0Msb0JBQW9CLENBQUNSO1lBQzdDLE1BQU1wQixJQUFJNkIsYUFBYSxDQUFDRCxvQkFBb0IsQ0FBQ1I7WUFDN0MsTUFBTXBCLElBQUk4QixZQUFZLENBQUNDLHlCQUF5QixDQUFDWDtZQUNqRCxNQUFNcEIsSUFBSThCLFlBQVksQ0FBQ0UsMEJBQTBCLENBQUNaO1lBQ2xELE1BQU1wQixJQUFJRSxjQUFjLENBQUMrQixhQUFhLENBQUNiO1lBRXZDLFlBQVk7WUFDWnBCLElBQUlrQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ2IsV0FBVztnQkFDakNJLFdBQVdOO2dCQUNYZCxnQkFBZ0JMLFFBQVFNLElBQUk7WUFDOUI7UUFDRixFQUFFLE9BQU82QixLQUFVO1lBQ2pCcEMsSUFBSWtDLFNBQVMsQ0FBQ0MsU0FBUyxDQUNyQmIsV0FDQTtnQkFBRWhCLGdCQUFnQkwsUUFBUU0sSUFBSTtnQkFBRThCLE9BQU9ELElBQUlFLE9BQU87WUFBQyxHQUNuREYsSUFBSUcsVUFBVSxFQUFFQyxTQUNoQjtZQUVGLE1BQU1KO1FBQ1I7UUFFQSxPQUFPO0lBQ1Q7SUFFQSxNQUFhMUMsbUJBQ1hJLEtBQVUsRUFDVkMsSUFBaUMsRUFDakNDLEdBQWEsRUFDYjtRQUNBLE1BQU0sRUFBRXlDLElBQUksRUFBRSxHQUFHMUMsS0FBS2tCLElBQUk7UUFDMUIsTUFBTXlCLFVBQVVyRSx3REFBYyxDQUFDQyx1REFBU0EsQ0FBQ21FLE1BQU07UUFDL0MsSUFBSSxDQUFDQyxTQUFTO1lBQ1osTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBQ0EsSUFBSSxDQUFFRixDQUFBQSxRQUFRdkUsMkRBQWdCLEdBQUk7WUFDaEMsTUFBTSxJQUFJeUUsTUFBTTtRQUNsQjtRQUNBLE1BQU1yQixZQUFZN0MsZ0VBQWNBLENBQUNtRSwrQkFBK0I7UUFDaEUsTUFBTUMsa0JBQWtCO1lBQ3RCQyxhQUFhTDtRQUNmO1FBQ0EsSUFBSTtZQUNGLDJCQUEyQjtZQUMzQixNQUFNTSxVQUFVNUUsMERBQVlBLENBQUNzRTtZQUM3QixNQUFNTyw2QkFBNkI7Z0JBQ2pDRDtnQkFDQVIsWUFBWSxFQUFFO2dCQUNkVSxnQkFBZ0IsQ0FBQztZQUNuQjtZQUNBLE1BQU0sSUFBSSxDQUFDOUQsY0FBYyxDQUN2QlcsT0FDQTtnQkFDRW1CLE1BQU07b0JBQ0pWLE1BQU01QyxrREFBY0EsQ0FBQ3VGLE1BQU07b0JBQzNCdEMsWUFBWW9DO2dCQUNkO1lBQ0YsR0FDQWhEO1lBRUYsTUFBTUMsVUFBVSxNQUFNRCxJQUFJRSxjQUFjLENBQUNDLGlCQUFpQjtZQUUxRCx5Q0FBeUM7WUFDekMsTUFBTWdELFNBQVMsTUFBTSxJQUFJLENBQUM5RCxvQkFBb0IsQ0FBQ1MsT0FBT0MsTUFBTUM7WUFDNUQsTUFBTW9ELGFBQWFELE9BQU9FLEdBQUcsQ0FBQyxDQUFDQyxRQUFVQSxNQUFNYixJQUFJO1lBRW5ELHdDQUF3QztZQUN4QyxNQUFNLElBQUksQ0FBQ2MseUJBQXlCLENBQUNILFlBQVlwRCxLQUFLQztZQUV0RCxNQUFNRCxJQUFJOEIsWUFBWSxDQUFDMEIsaUJBQWlCLENBQUNkLFFBQVFTLE1BQU07WUFDdkQsTUFBTW5ELElBQUk4QixZQUFZLENBQUMyQiwwQkFBMEIsQ0FBQ2YsUUFBUVMsTUFBTTtZQUNoRSxNQUFNbkQsSUFBSThCLFlBQVksQ0FBQzRCLDJCQUEyQixDQUFDaEIsUUFBUVMsTUFBTTtZQUVqRSxpQkFBaUI7WUFDakIsTUFBTVEsWUFBWXZGLDBEQUFZQSxDQUFDcUU7WUFDL0IsTUFBTW1CLFNBQVMsTUFBTTVELElBQUk2RCxlQUFlLENBQUNDLE9BQU87WUFDaEQsTUFBTUMsVUFBVSxNQUFNL0QsSUFBSWdFLHFCQUFxQixDQUFDRixPQUFPO1lBQ3ZELE1BQU1HLGtCQUFrQixJQUFJLENBQUNDLGtCQUFrQixDQUM3Q1AsV0FDQUMsUUFDQUc7WUFFRixNQUFNL0QsSUFBSThCLFlBQVksQ0FBQ3RDLGFBQWEsQ0FBQ3lFO1lBRXJDLCtDQUErQztZQUMvQyxNQUFNakUsSUFBSWtCLGlCQUFpQixDQUFDQyxTQUFTLENBQUNsQixRQUFRbUIsRUFBRSxFQUFFO2dCQUNoRE4sZUFBZTJCO1lBQ2pCO1lBQ0EsTUFBTSxJQUFJLENBQUMwQixNQUFNLENBQUNuRTtZQUNsQixZQUFZO1lBQ1pBLElBQUlrQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ2IsV0FBV3VCO1lBQ25DLE9BQU87Z0JBQUVKO1lBQUs7UUFDaEIsRUFBRSxPQUFPTCxLQUFVO1lBQ2pCcEMsSUFBSWtDLFNBQVMsQ0FBQ0MsU0FBUyxDQUNyQmIsV0FDQTtnQkFBRSxHQUFHdUIsZUFBZTtnQkFBRVIsT0FBT0QsSUFBSUUsT0FBTztZQUFDLEdBQ3pDRixJQUFJRyxVQUFVLEVBQUVDLFNBQ2hCO1lBRUYsTUFBTUo7UUFDUjtJQUNGO0lBRUEsTUFBYTNDLG9CQUFvQkssS0FBVSxFQUFFQyxJQUFTLEVBQUVDLEdBQWEsRUFBRTtRQUNyRSxJQUFJQztRQUNKLElBQUk7WUFDRkEsVUFBVSxNQUFNRCxJQUFJa0IsaUJBQWlCLENBQUNmLGlCQUFpQjtRQUN6RCxFQUFFLE9BQU9pRSxNQUFXO1lBQ2xCLE9BQU87Z0JBQ0xDLE1BQU07WUFDUjtRQUNGO1FBQ0EsTUFBTSxFQUFFakQsRUFBRSxFQUFFTixhQUFhLEVBQUUsR0FBR2I7UUFDOUIsSUFBSWEsZUFBZTtZQUNqQixPQUFPO2dCQUNMdUQsTUFBTTtZQUNSO1FBQ0Y7UUFDQSxNQUFNVCxTQUFTLE1BQU01RCxJQUFJNkQsZUFBZSxDQUFDUyxTQUFTLENBQUM7WUFBRTVDLFdBQVdOO1FBQUc7UUFDbkUsSUFBSSxDQUFDd0MsT0FBT1csTUFBTSxFQUFFO1lBQ2xCLE9BQU87Z0JBQ0xGLE1BQU07WUFDUjtRQUNGLE9BQU87WUFDTCxPQUFPO2dCQUNMQSxNQUFNO1lBQ1I7UUFDRjtJQUNGO0lBRUEsTUFBYWxGLGVBQ1hXLEtBQVUsRUFDVjBFLElBRUMsRUFDRHhFLEdBQWEsRUFDYjtRQUNBLE1BQU0sRUFBRU8sSUFBSSxFQUFFSyxVQUFVLEVBQUUsR0FBRzRELEtBQUt2RCxJQUFJO1FBQ3RDLHdDQUF3QztRQUN4QyxNQUFNLElBQUksQ0FBQy9CLG1CQUFtQixDQUFDWSxPQUFPMEUsTUFBTXhFO1FBRTVDLE1BQU0sRUFBRWEsV0FBVyxFQUFFLEdBQUc0RCxnQkFBZ0IsR0FBRzdEO1FBQzNDLE1BQU1YLFVBQVUsTUFBTUQsSUFBSUUsY0FBYyxDQUFDd0UsYUFBYSxDQUFDO1lBQ3JEN0Q7WUFDQU47WUFDQWtFO1FBQ0Y7UUFDQS9GLE9BQU9pRyxLQUFLLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztRQUUvQixpQkFBaUI7UUFDakJqRyxPQUFPaUcsS0FBSyxDQUFDO1FBQ2IsTUFBTTNFLElBQUk0RSxnQkFBZ0IsQ0FBQ0MsYUFBYTtRQUN4Q25HLE9BQU9pRyxLQUFLLENBQUM7UUFFYixNQUFNckQsWUFBWTdDLGdFQUFjQSxDQUFDcUcsMkJBQTJCO1FBQzVELE1BQU1qQyxrQkFBa0I7WUFDdEJ2QyxnQkFBZ0JDO1FBQ2xCO1FBRUEsb0NBQW9DO1FBQ3BDLElBQUk7WUFDRiwyQkFBMkI7WUFDM0IsSUFBSUEsU0FBUzVDLGtEQUFjQSxDQUFDdUYsTUFBTSxFQUFFO2dCQUNsQ3VCO2dCQUNBLE1BQU0sSUFBSSxDQUFDTSxzQkFBc0IsQ0FBQy9FLEtBQUs7b0JBQ3JDK0MsU0FBUzBCLGVBQWUxQixPQUFPO29CQUMvQlIsWUFBWWtDLGVBQWVsQyxVQUFVO29CQUNyQ1UsZ0JBQWdCd0IsZUFBZXhCLGNBQWM7Z0JBQy9DO1lBQ0YsT0FBTztnQkFDTCwyQkFBMkI7Z0JBQzNCLE1BQU1qRCxJQUFJRSxjQUFjLENBQUM4RSwwQkFBMEIsQ0FBQy9FO2dCQUNwRHZCLE9BQU9pRyxLQUFLLENBQUMsQ0FBQywwQkFBMEIsQ0FBQztZQUMzQztZQUNBLFlBQVk7WUFDWjNFLElBQUlrQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ2IsV0FBV3VCO1FBQ3JDLEVBQUUsT0FBT1QsS0FBSztZQUNaMUQsT0FBTzJELEtBQUssQ0FDVixnQ0FDQTRDLEtBQUtDLFNBQVMsQ0FBQzlDLEtBQUssTUFBTTtZQUU1QixNQUFNcEMsSUFBSWtCLGlCQUFpQixDQUFDaUUsU0FBUyxDQUFDbEYsUUFBUW1CLEVBQUU7WUFDaERwQixJQUFJa0MsU0FBUyxDQUFDQyxTQUFTLENBQ3JCYixXQUNBO2dCQUFFdUI7Z0JBQWlCUixPQUFPRCxJQUFJRSxPQUFPO1lBQUMsR0FDdENGLElBQUlHLFVBQVUsRUFBRUMsU0FDaEI7WUFFRixNQUFNSjtRQUNSO1FBRUEsT0FBTztZQUNMN0IsTUFBTU4sUUFBUU0sSUFBSTtZQUNsQkssWUFBWTtnQkFDVkMsYUFBYVosUUFBUVksV0FBVztnQkFDaEMsR0FBR2IsSUFBSUUsY0FBYyxDQUFDRyx3QkFBd0IsQ0FBQ0osUUFBUTtZQUN6RDtRQUNGO0lBQ0Y7SUFFQSxNQUFhYixpQkFDWFUsS0FBVSxFQUNWMEUsSUFBMEIsRUFDMUJ4RSxHQUFhLEVBQ2I7UUFDQSxNQUFNLEVBQUVZLFVBQVUsRUFBRSxHQUFHNEQsS0FBS3ZELElBQUk7UUFDaEMsTUFBTSxFQUFFSixXQUFXLEVBQUUsR0FBRzRELGdCQUFnQixHQUFHN0Q7UUFDM0MsTUFBTVgsVUFBVSxNQUFNRCxJQUFJRSxjQUFjLENBQUNDLGlCQUFpQjtRQUMxRCxNQUFNRyxpQkFBaUJMLFFBQVFNLElBQUk7UUFFbkMsNkNBQTZDO1FBQzdDLE1BQU02RSx5QkFBeUI1RyxrRUFBcUJBLENBQ2xEOEIsZ0JBQ0FtRTtRQUdGLElBQUluRSxtQkFBbUIzQyxrREFBY0EsQ0FBQ3VGLE1BQU0sRUFBRTtZQUM1Qyw0Q0FBNEM7WUFDNUMsTUFBTSxFQUFFSCxPQUFPLEVBQUVSLFVBQVUsRUFBRVUsY0FBYyxFQUFFLEdBQzNDbUM7WUFDRixNQUFNLElBQUksQ0FBQ0wsc0JBQXNCLENBQUMvRSxLQUFLO2dCQUNyQytDO2dCQUNBUjtnQkFDQVU7WUFDRjtRQUNGLE9BQU87WUFDTCxNQUFNb0MsaUJBQWlCO2dCQUNyQixHQUFHcEYsT0FBTztnQkFDVlk7Z0JBQ0E0RCxnQkFBZ0I7b0JBQ2QsR0FBR3hFLFFBQVF3RSxjQUFjO29CQUN6QixHQUFHVyxzQkFBc0I7Z0JBQzNCO1lBQ0Y7WUFFQSxNQUFNcEYsSUFBSUUsY0FBYyxDQUFDOEUsMEJBQTBCLENBQUNLO1lBQ3BEM0csT0FBT2lHLEtBQUssQ0FBQyxDQUFDLDBCQUEwQixDQUFDO1FBQzNDO1FBQ0EsTUFBTVUsaUJBQWlCLE1BQU1yRixJQUFJa0IsaUJBQWlCLENBQUNDLFNBQVMsQ0FBQ2xCLFFBQVFtQixFQUFFLEVBQUU7WUFDdkVQO1lBQ0E0RCxnQkFBZ0I7Z0JBQUUsR0FBR3hFLFFBQVF3RSxjQUFjO2dCQUFFLEdBQUdXLHNCQUFzQjtZQUFDO1FBQ3pFO1FBQ0EsT0FBTztZQUNMN0UsTUFBTThFLGVBQWU5RSxJQUFJO1lBQ3pCSyxZQUFZO2dCQUNWQyxhQUFhd0UsZUFBZXhFLFdBQVc7Z0JBQ3ZDLEdBQUdiLElBQUlFLGNBQWMsQ0FBQ0csd0JBQXdCLENBQUNnRixlQUFlO1lBQ2hFO1FBQ0Y7SUFDRjtJQUVBLE1BQWFoRyxxQkFBcUJTLEtBQVUsRUFBRUMsSUFBSSxFQUFFQyxHQUFhLEVBQUU7UUFDakUsT0FBTyxNQUFNQSxJQUFJRSxjQUFjLENBQUM4RSwwQkFBMEI7SUFDNUQ7SUFFQSxNQUFhMUYsV0FDWFEsS0FBVSxFQUNWa0IsR0FFQyxFQUNEaEIsR0FBYSxFQUNiO1FBQ0EsTUFBTXNCLFlBQVk3QyxnRUFBY0EsQ0FBQzZHLHNCQUFzQjtRQUV2RCxzQkFBc0I7UUFDdEIsTUFBTXJGLFVBQVUsTUFBTUQsSUFBSUUsY0FBYyxDQUFDQyxpQkFBaUI7UUFDMUQsSUFBSTtZQUNGLHFDQUFxQztZQUNyQyxNQUFNLEVBQUV5RCxNQUFNLEVBQUVHLE9BQU8sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDUix5QkFBeUIsQ0FDOUR2QyxJQUFJQyxJQUFJLENBQUNrQyxNQUFNLEVBQ2ZuRCxLQUNBQztZQUVGLFlBQVk7WUFDWkQsSUFBSWtDLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDYixXQUFXO2dCQUNqQ2hCLGdCQUFnQkwsUUFBUU0sSUFBSTtnQkFDNUJnRixhQUFhM0IsT0FBT1csTUFBTTtnQkFDMUJpQixjQUFjekIsUUFBUVEsTUFBTTtZQUM5QjtZQUVBLDZDQUE2QztZQUM3QyxJQUFJLENBQUNKLE1BQU0sQ0FBQ25FO1lBQ1osT0FBTztnQkFBRTRELFFBQVFBO2dCQUFRRztZQUFRO1FBQ25DLEVBQUUsT0FBTzNCLEtBQVU7WUFDakJwQyxJQUFJa0MsU0FBUyxDQUFDQyxTQUFTLENBQ3JCYixXQUNBO2dCQUFFaEIsZ0JBQWdCTCxRQUFRTSxJQUFJO2dCQUFFOEIsT0FBT0QsSUFBSUUsT0FBTztZQUFDLEdBQ25ERixJQUFJRyxVQUFVLEVBQUVDLFNBQ2hCO1lBRUYsTUFBTUo7UUFDUjtJQUNGO0lBRUEsTUFBYTdDLHFCQUFxQk8sS0FBVSxFQUFFQyxJQUFTLEVBQUVDLEdBQWEsRUFBRTtRQUN0RSxNQUFNQyxVQUFVLE1BQU1ELElBQUlFLGNBQWMsQ0FBQ0MsaUJBQWlCO1FBRTFELHlCQUF5QjtRQUN6QixNQUFNeUQsU0FBUyxNQUFNNUQsSUFBSTZELGVBQWUsQ0FBQ1MsU0FBUyxDQUFDO1lBQ2pENUMsV0FBV3pCLFFBQVFtQixFQUFFO1FBQ3ZCO1FBQ0EsTUFBTXFFLFdBQVc3QixPQUFPUCxHQUFHLENBQUMsQ0FBQ3FDLElBQU1BLEVBQUV0RSxFQUFFO1FBQ3ZDLE1BQU0yQyxVQUNKLE1BQU0vRCxJQUFJZ0UscUJBQXFCLENBQUMyQixxQkFBcUIsQ0FBQ0Y7UUFDeEQsTUFBTUcsY0FDSixNQUFNNUYsSUFBSUUsY0FBYyxDQUFDMkYsNkJBQTZCLENBQUM1RjtRQUV6RCxvQkFBb0I7UUFDcEIsTUFBTTBELFlBQVksRUFBRTtRQUNwQixLQUFLLE1BQU1tQyxjQUFjRixZQUFhO1lBQ3BDLE1BQU0sRUFDSkcsZUFBZSxFQUNmQyxnQkFBZ0IsRUFDaEJDLGlCQUFpQixFQUNqQkMsa0JBQWtCLEVBQ25CLEdBQUdKO1lBQ0oscUVBQXFFO1lBQ3JFLE1BQU1LLFlBQVl2QyxPQUFPd0MsSUFBSSxDQUMzQixDQUFDVixJQUFNQSxFQUFFVyxlQUFlLEtBQUtOO1lBRS9CLE1BQU1PLFVBQVUxQyxPQUFPd0MsSUFBSSxDQUN6QixDQUFDVixJQUFNQSxFQUFFVyxlQUFlLEtBQUtKO1lBRS9CLElBQUksQ0FBQ0UsYUFBYSxDQUFDRyxTQUFTO2dCQUMxQjtZQUNGO1lBQ0EsTUFBTUMsYUFBYXhDLFFBQVFxQyxJQUFJLENBQzdCLENBQUNJLElBQ0NBLEVBQUVDLE9BQU8sS0FBS04sVUFBVS9FLEVBQUUsSUFBSW9GLEVBQUVFLGdCQUFnQixLQUFLVjtZQUV6RCxNQUFNVyxXQUFXNUMsUUFBUXFDLElBQUksQ0FDM0IsQ0FBQ0ksSUFDQ0EsRUFBRUMsT0FBTyxLQUFLSCxRQUFRbEYsRUFBRSxJQUFJb0YsRUFBRUUsZ0JBQWdCLEtBQUtSO1lBRXZELElBQUksQ0FBQ0ssY0FBYyxDQUFDSSxVQUFVO2dCQUM1QjtZQUNGO1lBQ0Esa0JBQWtCO1lBQ2xCLE1BQU1DLFdBQWlDO2dCQUNyQyxxREFBcUQ7Z0JBQ3JEbkUsTUFBTXFELFdBQVdlLGNBQWM7Z0JBQy9CQyxhQUFhWCxVQUFVL0UsRUFBRTtnQkFDekIyRix3QkFBd0JaLFVBQVVhLGFBQWE7Z0JBQy9DQyxjQUFjVixXQUFXbkYsRUFBRTtnQkFDM0I4Rix5QkFBeUJYLFdBQVdTLGFBQWE7Z0JBQ2pERyxXQUFXYixRQUFRbEYsRUFBRTtnQkFDckJnRyxzQkFBc0JkLFFBQVFVLGFBQWE7Z0JBQzNDSyxZQUFZVixTQUFTdkYsRUFBRTtnQkFDdkJrRyx1QkFBdUJYLFNBQVNLLGFBQWE7Z0JBQzdDLHNCQUFzQjtnQkFDdEJ6RyxNQUFNM0MsZ0RBQVlBLENBQUMySixXQUFXO1lBQ2hDO1lBQ0E1RCxVQUFVNkQsSUFBSSxDQUFDWjtRQUNqQjtRQUNBLGlCQUFpQjtRQUNqQixPQUFPaEQsT0FBT1AsR0FBRyxDQUFDLENBQUMsRUFBRWpDLEVBQUUsRUFBRVAsV0FBVyxFQUFFbUcsYUFBYSxFQUFFLEdBQU07Z0JBQ3pENUY7Z0JBQ0FQO2dCQUNBbUc7Z0JBQ0FyRCxXQUFXQSxVQUFVOEQsTUFBTSxDQUN6QixDQUFDYixXQUNDQSxTQUFTRSxXQUFXLEtBQUsxRixNQUN6Qix3Q0FBd0M7b0JBQ3hDd0YsU0FBU08sU0FBUyxLQUFLUCxTQUFTRSxXQUFXO1lBRWpEO0lBQ0Y7SUFFQSxNQUFhdEgsY0FDWE0sS0FBVSxFQUNWa0IsR0FBNEMsRUFDNUNoQixHQUFhLEVBQ2I7UUFDQSxNQUFNc0IsWUFBWTdDLGdFQUFjQSxDQUFDaUosd0JBQXdCO1FBQ3pELElBQUk7WUFDRixNQUFNQyxpQkFBaUIsTUFBTTNILElBQUk4QixZQUFZLENBQUN0QyxhQUFhLENBQ3pEd0IsSUFBSUMsSUFBSSxDQUFDMEMsU0FBUztZQUVwQixlQUFlO1lBQ2YsSUFBSSxDQUFDUSxNQUFNLENBQUNuRTtZQUNaQSxJQUFJa0MsU0FBUyxDQUFDQyxTQUFTLENBQUNiLFdBQVc7Z0JBQ2pDc0csZUFBZUQsZUFBZXBELE1BQU07WUFDdEM7WUFDQSxPQUFPb0Q7UUFDVCxFQUFFLE9BQU92RixLQUFVO1lBQ2pCcEMsSUFBSWtDLFNBQVMsQ0FBQ0MsU0FBUyxDQUNyQmIsV0FDQTtnQkFBRWUsT0FBT0QsSUFBSUUsT0FBTztZQUFDLEdBQ3JCRixJQUFJRyxVQUFVLEVBQUVDLFNBQ2hCO1lBRUYsTUFBTUo7UUFDUjtJQUNGO0lBRUEsTUFBYXhDLGdCQUFnQkUsS0FBVSxFQUFFQyxJQUFTLEVBQUVDLEdBQWEsRUFBRTtRQUNqRSxNQUFNQyxVQUFVLE1BQU1ELElBQUlFLGNBQWMsQ0FBQ0MsaUJBQWlCO1FBQzFELE1BQU0wSCxtQkFDSixNQUFNN0gsSUFBSXdCLHNCQUFzQixDQUFDc0csb0JBQW9CLENBQUM3SCxRQUFRbUIsRUFBRTtRQUVsRSxJQUFJLENBQUN5RyxrQkFBa0I7WUFDckIsT0FBTztnQkFDTEUsZUFBZTtnQkFDZkMsZ0JBQWdCO2dCQUNoQkMsaUJBQWlCO2dCQUNqQkMsc0JBQXNCO1lBQ3hCO1FBQ0Y7UUFFQSxNQUFNdEUsU0FBUyxNQUFNNUQsSUFBSTZELGVBQWUsQ0FBQ1MsU0FBUyxDQUFDO1lBQ2pENUMsV0FBV3pCLFFBQVFtQixFQUFFO1FBQ3ZCO1FBQ0EsTUFBTXFFLFdBQVc3QixPQUFPUCxHQUFHLENBQUMsQ0FBQzhFLFFBQVVBLE1BQU0vRyxFQUFFO1FBQy9DLE1BQU1nSCxlQUNKLE1BQU1wSSxJQUFJZ0UscUJBQXFCLENBQUMyQixxQkFBcUIsQ0FBQ0Y7UUFFeEQsTUFBTTRDLHFCQUFxQixNQUFNckksSUFBSXNJLGtCQUFrQixDQUFDQyxrQkFBa0IsQ0FBQztZQUN6RTlDO1FBQ0Y7UUFFQSxNQUFNK0MsaUJBQWlCLElBQUlqSyxpRkFBd0JBLENBQUM7WUFDbER5QjtZQUNBMEIsV0FBV3pCLFFBQVFtQixFQUFFO1FBQ3ZCO1FBRUEsTUFBTXFILFdBQVdaLGlCQUFpQmEsT0FBTztRQUN6QyxNQUFNQyxvQkFBb0JDLE9BQU9DLElBQUksQ0FBQ0osVUFBVUssTUFBTSxDQUFDLENBQUNDLFFBQVFDO1lBQzlELE1BQU1DLGFBQWFSLFFBQVEsQ0FBQ08sSUFBSTtZQUNoQyxNQUFNRSxVQUFVckIsaUJBQWlCc0IsTUFBTSxDQUFDSCxJQUFJO1lBQzVDLG1DQUFtQztZQUNuQyxJQUFJQyxjQUFjLENBQUNDLFNBQVMsT0FBT0g7WUFFbkMsb0hBQW9IO1lBQ3BILE1BQU1LLFlBQVlaLGVBQWVhLG9CQUFvQixDQUFDSCxTQUFTO2dCQUM3RHRGO2dCQUNBd0U7Z0JBQ0FDO1lBQ0Y7WUFFQSxNQUFNaUIsa0JBQWtCRixVQUFVN0UsTUFBTSxHQUFHNkUsWUFBWTtZQUN2RCxPQUFPO2dCQUFFLEdBQUdMLE1BQU07Z0JBQUUsQ0FBQ0MsSUFBSSxFQUFFTTtZQUFnQjtRQUM3QyxHQUFHLENBQUM7UUFFSixPQUFPO1lBQ0wsR0FBR1gsaUJBQWlCO1lBQ3BCVCxzQkFBc0JMLGlCQUFpQjBCLFNBQVM7UUFDbEQ7SUFDRjtJQUVBLE1BQWE1SiwyQkFDWEcsS0FBVSxFQUNWQyxJQUFTLEVBQ1RDLEdBQWEsRUFDYjtRQUNBLE1BQU1DLFVBQVUsTUFBTUQsSUFBSUUsY0FBYyxDQUFDQyxpQkFBaUI7UUFDMUQsTUFBTXFJLGlCQUFpQixJQUFJakssaUZBQXdCQSxDQUFDO1lBQ2xEeUI7WUFDQTBCLFdBQVd6QixRQUFRbUIsRUFBRTtRQUN2QjtRQUNBLE1BQU1FLFlBQVk3QyxnRUFBY0EsQ0FBQytLLDZCQUE2QjtRQUM5RCxJQUFJO1lBQ0YsTUFBTUMsa0JBQWtCLE1BQU1qQixlQUFla0Isa0JBQWtCO1lBQy9EMUosSUFBSWtDLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDYixXQUFXO2dCQUFFbUk7WUFBZ0I7WUFDckQsT0FBT0E7UUFDVCxFQUFFLE9BQU9wSCxPQUFZO1lBQ25CckMsSUFBSWtDLFNBQVMsQ0FBQ0MsU0FBUyxDQUNyQmIsV0FDQTtnQkFBRWU7WUFBTSxHQUNSQSxNQUFNRSxVQUFVLEVBQUVDLFNBQ2xCO1lBRUYsTUFBTUg7UUFDUjtJQUNGO0lBRUEsTUFBYXNILG9CQUNYN0osS0FBVSxFQUNWa0IsR0FBMEMsRUFDMUNoQixHQUFhLEVBQ2I7UUFDQSxNQUFNLEVBQUVPLElBQUksRUFBRSxHQUFHUyxJQUFJNEksS0FBSztRQUMxQixNQUFNM0osVUFBVSxNQUFNRCxJQUFJRSxjQUFjLENBQUNDLGlCQUFpQjtRQUMxRCxNQUFNcUksaUJBQWlCLElBQUlqSyxpRkFBd0JBLENBQUM7WUFDbER5QjtZQUNBMEIsV0FBV3pCLFFBQVFtQixFQUFFO1FBQ3ZCO1FBQ0EsTUFBTUUsWUFBWTdDLGdFQUFjQSxDQUFDb0wsOEJBQThCO1FBQy9ELElBQUk7WUFDRixNQUFNckIsZUFBZW1CLG1CQUFtQixDQUFDcEo7WUFDekNQLElBQUlrQyxTQUFTLENBQUNDLFNBQVMsQ0FBQ2IsV0FBVztnQkFBRWY7WUFBSztRQUM1QyxFQUFFLE9BQU84QixPQUFPO1lBQ2RyQyxJQUFJa0MsU0FBUyxDQUFDQyxTQUFTLENBQ3JCYixXQUNBO2dCQUFFZjtnQkFBTThCO1lBQU0sR0FDZEEsTUFBTUUsVUFBVSxFQUFFQyxTQUNsQjtZQUVGLE1BQU1IO1FBQ1I7UUFDQSxPQUFPO0lBQ1Q7SUFFQSxNQUFjOEIsT0FBT25FLEdBQWEsRUFBRTtRQUNsQyxNQUFNQyxVQUFVLE1BQU1ELElBQUlFLGNBQWMsQ0FBQ0MsaUJBQWlCO1FBQzFELE1BQU0sRUFBRTJKLFFBQVEsRUFBRSxHQUFHLE1BQU05SixJQUFJK0osVUFBVSxDQUFDQyxtQkFBbUI7UUFDN0QsTUFBTUMsWUFBWSxNQUFNakssSUFBSTJCLGFBQWEsQ0FBQ3dDLE1BQU0sQ0FBQzJGLFVBQVU3SixRQUFRbUIsRUFBRTtRQUVyRSx5Q0FBeUM7UUFDekMsSUFBSW5CLFFBQVFhLGFBQWEsS0FBSyxNQUFNO1lBQ2xDLE1BQU1kLElBQUlFLGNBQWMsQ0FBQ21CLHNDQUFzQztRQUNqRTtRQUNBLE9BQU80STtJQUNUO0lBRVEvRixtQkFDTlAsU0FBc0MsRUFDdENDLE1BQWUsRUFDZkcsT0FBc0IsRUFDdEI7UUFDQSxNQUFNbUcsZ0JBQWdCdkcsVUFBVU4sR0FBRyxDQUFDLENBQUN1RDtZQUNuQyxNQUFNLEVBQUV1RCxhQUFhLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxZQUFZLEVBQUUvSixJQUFJLEVBQUUsR0FDdEVxRztZQUNGLE1BQU1FLGNBQWNsRCxPQUFPd0MsSUFBSSxDQUM3QixDQUFDK0IsUUFBVUEsTUFBTTlCLGVBQWUsS0FBSzhELGdCQUNwQy9JO1lBQ0gsTUFBTStGLFlBQVl2RCxPQUFPd0MsSUFBSSxDQUMzQixDQUFDK0IsUUFBVUEsTUFBTTlCLGVBQWUsS0FBS2dFLGNBQ3BDako7WUFDSCxJQUFJLENBQUMwRixlQUFlLENBQUNLLFdBQVc7Z0JBQzlCLE1BQU0sSUFBSXhFLE1BQ1IsQ0FBQyxnQ0FBZ0MsRUFBRXdILGNBQWMsbUJBQW1CLEVBQUVFLFlBQVksQ0FBQyxDQUFDO1lBRXhGO1lBRUEsTUFBTXBELGVBQWVsRCxRQUFRcUMsSUFBSSxDQUMvQixDQUFDbUUsU0FDQ0EsT0FBT3ZELGFBQWEsS0FBS29ELGtCQUN6QkcsT0FBTzlELE9BQU8sS0FBS0ssY0FDcEIxRjtZQUNILE1BQU1pRyxhQUFhdEQsUUFBUXFDLElBQUksQ0FDN0IsQ0FBQ21FLFNBQ0NBLE9BQU92RCxhQUFhLEtBQUtzRCxnQkFBZ0JDLE9BQU85RCxPQUFPLEtBQUtVLFlBQzdEL0Y7WUFDSCxJQUFJLENBQUM2RixnQkFBZ0IsQ0FBQ0ksWUFBWTtnQkFDaEMsTUFBTSxJQUFJMUUsTUFDUixDQUFDLGlDQUFpQyxFQUFFeUgsZUFBZSxlQUFlLEVBQUVFLGFBQWEsQ0FBQztZQUV0RjtZQUNBLE9BQU87Z0JBQ0x4RDtnQkFDQUc7Z0JBQ0FFO2dCQUNBRTtnQkFDQTlHO2dCQUNBaUssYUFBYTVELFNBQVM0RCxXQUFXO1lBQ25DO1FBQ0Y7UUFDQSxPQUFPTjtJQUNUO0lBRUEsTUFBYzNHLDBCQUNaSixNQUFnQixFQUNoQm5ELEdBQWEsRUFDYkMsT0FBZ0IsRUFDaEI7UUFDQSxxQ0FBcUM7UUFDckMsTUFBTUQsSUFBSThCLFlBQVksQ0FBQ0UsMEJBQTBCLENBQUMvQixRQUFRbUIsRUFBRTtRQUU1RCxNQUFNcUosZ0JBQ0osTUFBTXpLLElBQUlFLGNBQWMsQ0FBQzhFLDBCQUEwQixDQUFDL0U7UUFFdEQsTUFBTXlLLGlCQUFpQkQsY0FBY2hELE1BQU0sQ0FBQyxDQUFDbkUsUUFDM0NILE9BQU93SCxRQUFRLENBQUNySCxNQUFNYixJQUFJO1FBRzVCLGdCQUFnQjtRQUNoQixNQUFNbUksY0FBY0YsZUFBZXJILEdBQUcsQ0FBQyxDQUFDQztZQUN0QyxNQUFNMUMsYUFBYTBDLE9BQU8xQztZQUMxQixvR0FBb0c7WUFDcEcsTUFBTXVILFFBQVE7Z0JBQ1p6RyxXQUFXekIsUUFBUW1CLEVBQUU7Z0JBQ3JCUCxhQUFheUMsTUFBTWIsSUFBSTtnQkFDdkJ1RSxlQUFlakosMEVBQTJCQSxDQUFDdUYsTUFBTWIsSUFBSTtnQkFDckQ0RCxpQkFBaUIvQyxNQUFNYixJQUFJO2dCQUMzQm9JLFFBQVE7Z0JBQ1JDLGFBQWE7Z0JBQ2JsSyxZQUFZQSxhQUFhcUUsS0FBS0MsU0FBUyxDQUFDdEUsY0FBYztZQUN4RDtZQUNBLE9BQU91SDtRQUNUO1FBQ0EsTUFBTXZFLFNBQVMsTUFBTTVELElBQUk2RCxlQUFlLENBQUNrSCxVQUFVLENBQUNIO1FBRXBELGlCQUFpQjtRQUNqQixNQUFNSSxlQUFlTixlQUFlTyxPQUFPLENBQUMsQ0FBQzNIO1lBQzNDLE1BQU00SCxpQkFBaUI1SCxNQUFNUyxPQUFPO1lBQ3BDLE1BQU1vSCxhQUFhN0gsTUFBTTZILFVBQVU7WUFDbkMsTUFBTWhELFFBQVF2RSxPQUFPd0MsSUFBSSxDQUFDLENBQUNWLElBQU1BLEVBQUVXLGVBQWUsS0FBSy9DLE1BQU1iLElBQUk7WUFDakUsT0FBT3lJLGVBQWU3SCxHQUFHLENBQ3ZCLENBQUNrSCxTQUNFO29CQUNDOUQsU0FBUzBCLE1BQU0vRyxFQUFFO29CQUNqQmdLLGNBQWM7b0JBQ2R2SyxhQUFhMEosT0FBTzlILElBQUk7b0JBQ3hCdUUsZUFBZWhKLHlFQUEwQkEsQ0FBQ3VNLE9BQU85SCxJQUFJO29CQUNyRGlFLGtCQUFrQjZELE9BQU85SCxJQUFJO29CQUM3QmxDLE1BQU1nSyxPQUFPaEssSUFBSSxJQUFJO29CQUNyQjhLLFNBQVNkLE9BQU9jLE9BQU8sSUFBSTtvQkFDM0JDLE1BQU1ILGVBQWVaLE9BQU85SCxJQUFJO29CQUNoQzdCLFlBQVkySixPQUFPM0osVUFBVSxHQUN6QnFFLEtBQUtDLFNBQVMsQ0FBQ3FGLE9BQU8zSixVQUFVLElBQ2hDO2dCQUNOO1FBRU47UUFDQSxNQUFNbUQsVUFBVSxNQUFNL0QsSUFBSWdFLHFCQUFxQixDQUFDK0csVUFBVSxDQUFDQztRQUUzRCx3QkFBd0I7UUFDeEIsTUFBTUUsaUJBQWlCUixlQUFlTyxPQUFPLENBQUMsQ0FBQzNILFFBQVVBLE1BQU1TLE9BQU87UUFDdEUsTUFBTXdILHFCQUFxQkwsZUFBZUQsT0FBTyxDQUFDLENBQUNPO1lBQ2pELE1BQU1qQixTQUFTeEcsUUFBUXFDLElBQUksQ0FDekIsQ0FBQ0ksSUFBTUEsRUFBRUUsZ0JBQWdCLEtBQUs4RSxjQUFjL0ksSUFBSTtZQUVsRCxPQUFPeEUsa0VBQW1CQSxDQUFDdU4sZUFBZTtnQkFDeEMvRSxTQUFTOEQsT0FBTzlELE9BQU87Z0JBQ3ZCZ0YsVUFBVWxCLE9BQU9uSixFQUFFO2dCQUNuQnNGLGtCQUFrQjZELE9BQU83RCxnQkFBZ0I7WUFDM0M7UUFDRjtRQUNBLE1BQU0xRyxJQUFJMEwsMkJBQTJCLENBQUNYLFVBQVUsQ0FBQ1E7UUFFakQsT0FBTztZQUFFM0g7WUFBUUc7UUFBUTtJQUMzQjtJQUVRNEgsY0FBYzVJLE9BQWUsRUFBRVIsVUFBb0IsRUFBRTtRQUMzRCxNQUFNcUosb0JBQW9CckosV0FDdkJjLEdBQUcsQ0FBQyxDQUFDd0ksTUFBUSxDQUFDLFFBQVEsRUFBRUEsSUFBSSxDQUFDLENBQUMsRUFDOUJDLElBQUksQ0FBQztRQUNSLE9BQU9qTyxtREFBSUEsQ0FBQyxDQUFDLEVBQUUrTixrQkFBa0IsRUFBRSxFQUFFN0ksUUFBUSxDQUFDO0lBQ2hEO0lBRUEsTUFBY2dDLHVCQUNaL0UsR0FBYSxFQUNiK0wsT0FJQyxFQUNjO1FBQ2YsTUFBTSxFQUFFaEosT0FBTyxFQUFFUixVQUFVLEVBQUVVLGNBQWMsRUFBRSxHQUFHOEk7UUFDaEQsTUFBTUMsd0JBQXdCLElBQUksQ0FBQ0wsYUFBYSxDQUFDNUksU0FBU1I7UUFDMUQsTUFBTXZDLElBQUlpTSxpQkFBaUIsQ0FBQ0MsYUFBYSxDQUFDO1lBQ3hDQyxjQUFjbEo7WUFDZEYsU0FBU2lKO1FBQ1g7UUFFQSwrQkFBK0I7UUFDL0IsTUFBTWhNLElBQUlpTSxpQkFBaUIsQ0FBQ0csVUFBVTtRQUV0QywyQkFBMkI7UUFDM0IsTUFBTTNMLFNBQVM7WUFDYix3QkFBd0I7UUFDMUI7UUFDQSxNQUFNVCxJQUFJaU0saUJBQWlCLENBQUNJLFdBQVcsQ0FBQzVMO0lBQzFDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvcmVzb2x2ZXJzL3Byb2plY3RSZXNvbHZlci50cz84NzNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFuYWx5c2lzUmVsYXRpb25JbmZvLFxuICBEYXRhU291cmNlLFxuICBEYXRhU291cmNlTmFtZSxcbiAgRGF0YVNvdXJjZVByb3BlcnRpZXMsXG4gIElDb250ZXh0LFxuICBSZWxhdGlvbkRhdGEsXG4gIFJlbGF0aW9uVHlwZSxcbiAgU2FtcGxlRGF0YXNldERhdGEsXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7XG4gIHRyaW0sXG4gIGdldExvZ2dlcixcbiAgcmVwbGFjZUludmFsaWRSZWZlcmVuY2VOYW1lLFxuICB0cmFuc2Zvcm1JbnZhbGlkQ29sdW1uTmFtZSxcbiAgaGFuZGxlTmVzdGVkQ29sdW1ucyxcbn0gZnJvbSAnQHNlcnZlci91dGlscyc7XG5pbXBvcnQge1xuICBEVUNLREJfQ09OTkVDVElPTl9JTkZPLFxuICBNb2RlbCxcbiAgTW9kZWxDb2x1bW4sXG4gIFByb2plY3QsXG59IGZyb20gJy4uL3JlcG9zaXRvcmllcyc7XG5pbXBvcnQge1xuICBTYW1wbGVEYXRhc2V0TmFtZSxcbiAgU2FtcGxlRGF0YXNldFJlbGF0aW9uc2hpcCxcbiAgYnVpbGRJbml0U3FsLFxuICBnZXRSZWxhdGlvbnMsXG4gIHNhbXBsZURhdGFzZXRzLFxufSBmcm9tICdAc2VydmVyL2RhdGEnO1xuaW1wb3J0IHsgc25ha2VDYXNlIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IENvbXBhY3RUYWJsZSwgUHJvamVjdERhdGEgfSBmcm9tICcuLi9zZXJ2aWNlcyc7XG5pbXBvcnQgeyBEdWNrREJQcmVwYXJlT3B0aW9ucyB9IGZyb20gJ0BzZXJ2ZXIvYWRhcHRvcnMvd3JlbkVuZ2luZUFkYXB0b3InO1xuaW1wb3J0IERhdGFTb3VyY2VTY2hlbWFEZXRlY3Rvciwge1xuICBTY2hlbWFDaGFuZ2VUeXBlLFxufSBmcm9tICdAc2VydmVyL21hbmFnZXJzL2RhdGFTb3VyY2VTY2hlbWFEZXRlY3Rvcic7XG5pbXBvcnQgeyBlbmNyeXB0Q29ubmVjdGlvbkluZm8gfSBmcm9tICcuLi9kYXRhU291cmNlJztcbmltcG9ydCB7IFRlbGVtZXRyeUV2ZW50IH0gZnJvbSAnLi4vdGVsZW1ldHJ5L3RlbGVtZXRyeSc7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignRGF0YVNvdXJjZVJlc29sdmVyJyk7XG5sb2dnZXIubGV2ZWwgPSAnZGVidWcnO1xuXG5leHBvcnQgZW51bSBPbmJvYXJkaW5nU3RhdHVzRW51bSB7XG4gIE5PVF9TVEFSVEVEID0gJ05PVF9TVEFSVEVEJyxcbiAgREFUQVNPVVJDRV9TQVZFRCA9ICdEQVRBU09VUkNFX1NBVkVEJyxcbiAgT05CT0FSRElOR19GSU5JU0hFRCA9ICdPTkJPQVJESU5HX0ZJTklTSEVEJyxcbiAgV0lUSF9TQU1QTEVfREFUQVNFVCA9ICdXSVRIX1NBTVBMRV9EQVRBU0VUJyxcbn1cblxuZXhwb3J0IGNsYXNzIFByb2plY3RSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZ2V0U2V0dGluZ3MgPSB0aGlzLmdldFNldHRpbmdzLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVDdXJyZW50UHJvamVjdCA9IHRoaXMudXBkYXRlQ3VycmVudFByb2plY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlc2V0Q3VycmVudFByb2plY3QgPSB0aGlzLnJlc2V0Q3VycmVudFByb2plY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhdmVEYXRhU291cmNlID0gdGhpcy5zYXZlRGF0YVNvdXJjZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMudXBkYXRlRGF0YVNvdXJjZSA9IHRoaXMudXBkYXRlRGF0YVNvdXJjZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubGlzdERhdGFTb3VyY2VUYWJsZXMgPSB0aGlzLmxpc3REYXRhU291cmNlVGFibGVzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYXZlVGFibGVzID0gdGhpcy5zYXZlVGFibGVzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hdXRvR2VuZXJhdGVSZWxhdGlvbiA9IHRoaXMuYXV0b0dlbmVyYXRlUmVsYXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhdmVSZWxhdGlvbnMgPSB0aGlzLnNhdmVSZWxhdGlvbnMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmdldE9uYm9hcmRpbmdTdGF0dXMgPSB0aGlzLmdldE9uYm9hcmRpbmdTdGF0dXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXJ0U2FtcGxlRGF0YXNldCA9IHRoaXMuc3RhcnRTYW1wbGVEYXRhc2V0LmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmlnZ2VyRGF0YVNvdXJjZURldGVjdGlvbiA9XG4gICAgICB0aGlzLnRyaWdnZXJEYXRhU291cmNlRGV0ZWN0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRTY2hlbWFDaGFuZ2UgPSB0aGlzLmdldFNjaGVtYUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0UHJvamVjdFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zID1cbiAgICAgIHRoaXMuZ2V0UHJvamVjdFJlY29tbWVuZGF0aW9uUXVlc3Rpb25zLmJpbmQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0U2V0dGluZ3MoX3Jvb3Q6IGFueSwgX2FyZzogYW55LCBjdHg6IElDb250ZXh0KSB7XG4gICAgY29uc3QgcHJvamVjdCA9IGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZXRDdXJyZW50UHJvamVjdCgpO1xuICAgIGNvbnN0IGdlbmVyYWxDb25uZWN0aW9uSW5mbyA9XG4gICAgICBjdHgucHJvamVjdFNlcnZpY2UuZ2V0R2VuZXJhbENvbm5lY3Rpb25JbmZvKHByb2plY3QpO1xuICAgIGNvbnN0IGRhdGFTb3VyY2VUeXBlID0gcHJvamVjdC50eXBlO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2R1Y3RWZXJzaW9uOiBjdHguY29uZmlnLndyZW5Qcm9kdWN0VmVyc2lvbiB8fCAnJyxcbiAgICAgIGRhdGFTb3VyY2U6IHtcbiAgICAgICAgdHlwZTogZGF0YVNvdXJjZVR5cGUsXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBkaXNwbGF5TmFtZTogcHJvamVjdC5kaXNwbGF5TmFtZSxcbiAgICAgICAgICAuLi5nZW5lcmFsQ29ubmVjdGlvbkluZm8sXG4gICAgICAgIH0gYXMgRGF0YVNvdXJjZVByb3BlcnRpZXMsXG4gICAgICAgIHNhbXBsZURhdGFzZXQ6IHByb2plY3Quc2FtcGxlRGF0YXNldCxcbiAgICAgIH0sXG4gICAgICBsYW5ndWFnZTogcHJvamVjdC5sYW5ndWFnZSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFByb2plY3RSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucyhcbiAgICBfcm9vdDogYW55LFxuICAgIF9hcmc6IGFueSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApIHtcbiAgICByZXR1cm4gY3R4LnByb2plY3RTZXJ2aWNlLmdldFByb2plY3RSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucygpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZUN1cnJlbnRQcm9qZWN0KFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnOiB7IGRhdGE6IHsgbGFuZ3VhZ2U6IHN0cmluZyB9IH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKSB7XG4gICAgY29uc3QgeyBsYW5ndWFnZSB9ID0gYXJnLmRhdGE7XG4gICAgY29uc3QgcHJvamVjdCA9IGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZXRDdXJyZW50UHJvamVjdCgpO1xuICAgIGF3YWl0IGN0eC5wcm9qZWN0UmVwb3NpdG9yeS51cGRhdGVPbmUocHJvamVjdC5pZCwge1xuICAgICAgbGFuZ3VhZ2UsXG4gICAgfSk7XG5cbiAgICAvLyBvbmx5IGdlbmVyYXRpbmcgZm9yIHVzZXIncyBkYXRhIHNvdXJjZVxuICAgIGlmIChwcm9qZWN0LnNhbXBsZURhdGFzZXQgPT09IG51bGwpIHtcbiAgICAgIGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZW5lcmF0ZVByb2plY3RSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucygpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZXNldEN1cnJlbnRQcm9qZWN0KF9yb290OiBhbnksIF9hcmc6IGFueSwgY3R4OiBJQ29udGV4dCkge1xuICAgIGxldCBwcm9qZWN0O1xuICAgIHRyeSB7XG4gICAgICBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBubyBwcm9qZWN0IGZvdW5kXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZXZlbnROYW1lID0gVGVsZW1ldHJ5RXZlbnQuU0VUVElOR19SRVNFVF9QUk9KRUNUO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBpZCA9IHByb2plY3QuaWQ7XG4gICAgICBhd2FpdCBjdHguc2NoZW1hQ2hhbmdlUmVwb3NpdG9yeS5kZWxldGVBbGxCeSh7IHByb2plY3RJZDogaWQgfSk7XG4gICAgICBhd2FpdCBjdHguZGVwbG95U2VydmljZS5kZWxldGVBbGxCeVByb2plY3RJZChpZCk7XG4gICAgICBhd2FpdCBjdHguYXNraW5nU2VydmljZS5kZWxldGVBbGxCeVByb2plY3RJZChpZCk7XG4gICAgICBhd2FpdCBjdHgubW9kZWxTZXJ2aWNlLmRlbGV0ZUFsbFZpZXdzQnlQcm9qZWN0SWQoaWQpO1xuICAgICAgYXdhaXQgY3R4Lm1vZGVsU2VydmljZS5kZWxldGVBbGxNb2RlbHNCeVByb2plY3RJZChpZCk7XG4gICAgICBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZGVsZXRlUHJvamVjdChpZCk7XG5cbiAgICAgIC8vIHRlbGVtZXRyeVxuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIHByb2plY3RJZDogaWQsXG4gICAgICAgIGRhdGFTb3VyY2VUeXBlOiBwcm9qZWN0LnR5cGUsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgeyBkYXRhU291cmNlVHlwZTogcHJvamVjdC50eXBlLCBlcnJvcjogZXJyLm1lc3NhZ2UgfSxcbiAgICAgICAgZXJyLmV4dGVuc2lvbnM/LnNlcnZpY2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzdGFydFNhbXBsZURhdGFzZXQoXG4gICAgX3Jvb3Q6IGFueSxcbiAgICBfYXJnOiB7IGRhdGE6IFNhbXBsZURhdGFzZXREYXRhIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKSB7XG4gICAgY29uc3QgeyBuYW1lIH0gPSBfYXJnLmRhdGE7XG4gICAgY29uc3QgZGF0YXNldCA9IHNhbXBsZURhdGFzZXRzW3NuYWtlQ2FzZShuYW1lKV07XG4gICAgaWYgKCFkYXRhc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhbXBsZSBkYXRhc2V0IG5vdCBmb3VuZCcpO1xuICAgIH1cbiAgICBpZiAoIShuYW1lIGluIFNhbXBsZURhdGFzZXROYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNhbXBsZSBkYXRhc2V0IG5hbWUnKTtcbiAgICB9XG4gICAgY29uc3QgZXZlbnROYW1lID0gVGVsZW1ldHJ5RXZlbnQuQ09OTkVDVElPTl9TVEFSVF9TQU1QTEVfREFUQVNFVDtcbiAgICBjb25zdCBldmVudFByb3BlcnRpZXMgPSB7XG4gICAgICBkYXRhc2V0TmFtZTogbmFtZSxcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAvLyBjcmVhdGUgZHVja2RiIGRhdGFzb3VyY2VcbiAgICAgIGNvbnN0IGluaXRTcWwgPSBidWlsZEluaXRTcWwobmFtZSBhcyBTYW1wbGVEYXRhc2V0TmFtZSk7XG4gICAgICBjb25zdCBkdWNrZGJEYXRhc291cmNlUHJvcGVydGllcyA9IHtcbiAgICAgICAgaW5pdFNxbCxcbiAgICAgICAgZXh0ZW5zaW9uczogW10sXG4gICAgICAgIGNvbmZpZ3VyYXRpb25zOiB7fSxcbiAgICAgIH07XG4gICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhU291cmNlKFxuICAgICAgICBfcm9vdCxcbiAgICAgICAge1xuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6IERhdGFTb3VyY2VOYW1lLkRVQ0tEQixcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGR1Y2tkYkRhdGFzb3VyY2VQcm9wZXJ0aWVzLFxuICAgICAgICAgIH0gYXMgRGF0YVNvdXJjZSxcbiAgICAgICAgfSxcbiAgICAgICAgY3R4LFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0Q3VycmVudFByb2plY3QoKTtcblxuICAgICAgLy8gbGlzdCBhbGwgdGhlIHRhYmxlcyBpbiB0aGUgZGF0YSBzb3VyY2VcbiAgICAgIGNvbnN0IHRhYmxlcyA9IGF3YWl0IHRoaXMubGlzdERhdGFTb3VyY2VUYWJsZXMoX3Jvb3QsIF9hcmcsIGN0eCk7XG4gICAgICBjb25zdCB0YWJsZU5hbWVzID0gdGFibGVzLm1hcCgodGFibGUpID0+IHRhYmxlLm5hbWUpO1xuXG4gICAgICAvLyBzYXZlIHRhYmxlcyBhcyBtb2RlbCBhbmQgbW9kZWxDb2x1bW5zXG4gICAgICBhd2FpdCB0aGlzLm92ZXJ3cml0ZU1vZGVsc0FuZENvbHVtbnModGFibGVOYW1lcywgY3R4LCBwcm9qZWN0KTtcblxuICAgICAgYXdhaXQgY3R4Lm1vZGVsU2VydmljZS51cGRhdGVQcmltYXJ5S2V5cyhkYXRhc2V0LnRhYmxlcyk7XG4gICAgICBhd2FpdCBjdHgubW9kZWxTZXJ2aWNlLmJhdGNoVXBkYXRlTW9kZWxQcm9wZXJ0aWVzKGRhdGFzZXQudGFibGVzKTtcbiAgICAgIGF3YWl0IGN0eC5tb2RlbFNlcnZpY2UuYmF0Y2hVcGRhdGVDb2x1bW5Qcm9wZXJ0aWVzKGRhdGFzZXQudGFibGVzKTtcblxuICAgICAgLy8gc2F2ZSByZWxhdGlvbnNcbiAgICAgIGNvbnN0IHJlbGF0aW9ucyA9IGdldFJlbGF0aW9ucyhuYW1lIGFzIFNhbXBsZURhdGFzZXROYW1lKTtcbiAgICAgIGNvbnN0IG1vZGVscyA9IGF3YWl0IGN0eC5tb2RlbFJlcG9zaXRvcnkuZmluZEFsbCgpO1xuICAgICAgY29uc3QgY29sdW1ucyA9IGF3YWl0IGN0eC5tb2RlbENvbHVtblJlcG9zaXRvcnkuZmluZEFsbCgpO1xuICAgICAgY29uc3QgbWFwcGVkUmVsYXRpb25zID0gdGhpcy5idWlsZFJlbGF0aW9uSW5wdXQoXG4gICAgICAgIHJlbGF0aW9ucyxcbiAgICAgICAgbW9kZWxzLFxuICAgICAgICBjb2x1bW5zLFxuICAgICAgKTtcbiAgICAgIGF3YWl0IGN0eC5tb2RlbFNlcnZpY2Uuc2F2ZVJlbGF0aW9ucyhtYXBwZWRSZWxhdGlvbnMpO1xuXG4gICAgICAvLyBtYXJrIGN1cnJlbnQgcHJvamVjdCBhcyB1c2luZyBzYW1wbGUgZGF0YXNldFxuICAgICAgYXdhaXQgY3R4LnByb2plY3RSZXBvc2l0b3J5LnVwZGF0ZU9uZShwcm9qZWN0LmlkLCB7XG4gICAgICAgIHNhbXBsZURhdGFzZXQ6IG5hbWUsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMuZGVwbG95KGN0eCk7XG4gICAgICAvLyB0ZWxlbWV0cnlcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KGV2ZW50TmFtZSwgZXZlbnRQcm9wZXJ0aWVzKTtcbiAgICAgIHJldHVybiB7IG5hbWUgfTtcbiAgICB9IGNhdGNoIChlcnI6IGFueSkge1xuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgeyAuLi5ldmVudFByb3BlcnRpZXMsIGVycm9yOiBlcnIubWVzc2FnZSB9LFxuICAgICAgICBlcnIuZXh0ZW5zaW9ucz8uc2VydmljZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICApO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRPbmJvYXJkaW5nU3RhdHVzKF9yb290OiBhbnksIF9hcmc6IGFueSwgY3R4OiBJQ29udGV4dCkge1xuICAgIGxldCBwcm9qZWN0OiBQcm9qZWN0IHwgbnVsbDtcbiAgICB0cnkge1xuICAgICAgcHJvamVjdCA9IGF3YWl0IGN0eC5wcm9qZWN0UmVwb3NpdG9yeS5nZXRDdXJyZW50UHJvamVjdCgpO1xuICAgIH0gY2F0Y2ggKF9lcnI6IGFueSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBPbmJvYXJkaW5nU3RhdHVzRW51bS5OT1RfU1RBUlRFRCxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsgaWQsIHNhbXBsZURhdGFzZXQgfSA9IHByb2plY3Q7XG4gICAgaWYgKHNhbXBsZURhdGFzZXQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogT25ib2FyZGluZ1N0YXR1c0VudW0uV0lUSF9TQU1QTEVfREFUQVNFVCxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IG1vZGVscyA9IGF3YWl0IGN0eC5tb2RlbFJlcG9zaXRvcnkuZmluZEFsbEJ5KHsgcHJvamVjdElkOiBpZCB9KTtcbiAgICBpZiAoIW1vZGVscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogT25ib2FyZGluZ1N0YXR1c0VudW0uREFUQVNPVVJDRV9TQVZFRCxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogT25ib2FyZGluZ1N0YXR1c0VudW0uT05CT0FSRElOR19GSU5JU0hFRCxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNhdmVEYXRhU291cmNlKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnczoge1xuICAgICAgZGF0YTogRGF0YVNvdXJjZTtcbiAgICB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IHsgdHlwZSwgcHJvcGVydGllcyB9ID0gYXJncy5kYXRhO1xuICAgIC8vIEN1cnJlbnRseSBvbmx5IGNhbiBjcmVhdGUgb25lIHByb2plY3RcbiAgICBhd2FpdCB0aGlzLnJlc2V0Q3VycmVudFByb2plY3QoX3Jvb3QsIGFyZ3MsIGN0eCk7XG5cbiAgICBjb25zdCB7IGRpc3BsYXlOYW1lLCAuLi5jb25uZWN0aW9uSW5mbyB9ID0gcHJvcGVydGllcztcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmNyZWF0ZVByb2plY3Qoe1xuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICB0eXBlLFxuICAgICAgY29ubmVjdGlvbkluZm8sXG4gICAgfSBhcyBQcm9qZWN0RGF0YSk7XG4gICAgbG9nZ2VyLmRlYnVnKGBQcm9qZWN0IGNyZWF0ZWQuYCk7XG5cbiAgICAvLyBpbml0IGRhc2hib2FyZFxuICAgIGxvZ2dlci5kZWJ1ZygnRGFzaGJvYXJkIGluaXQuLi4nKTtcbiAgICBhd2FpdCBjdHguZGFzaGJvYXJkU2VydmljZS5pbml0RGFzaGJvYXJkKCk7XG4gICAgbG9nZ2VyLmRlYnVnKCdEYXNoYm9hcmQgY3JlYXRlZC4nKTtcblxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IFRlbGVtZXRyeUV2ZW50LkNPTk5FQ1RJT05fU0FWRV9EQVRBX1NPVVJDRTtcbiAgICBjb25zdCBldmVudFByb3BlcnRpZXMgPSB7XG4gICAgICBkYXRhU291cmNlVHlwZTogdHlwZSxcbiAgICB9O1xuXG4gICAgLy8gdHJ5IHRvIGNvbm5lY3QgdG8gdGhlIGRhdGEgc291cmNlXG4gICAgdHJ5IHtcbiAgICAgIC8vIGhhbmRsZSBkdWNrZGIgY29ubmVjdGlvblxuICAgICAgaWYgKHR5cGUgPT09IERhdGFTb3VyY2VOYW1lLkRVQ0tEQikge1xuICAgICAgICBjb25uZWN0aW9uSW5mbyBhcyBEVUNLREJfQ09OTkVDVElPTl9JTkZPO1xuICAgICAgICBhd2FpdCB0aGlzLmJ1aWxkRHVja0RiRW52aXJvbm1lbnQoY3R4LCB7XG4gICAgICAgICAgaW5pdFNxbDogY29ubmVjdGlvbkluZm8uaW5pdFNxbCxcbiAgICAgICAgICBleHRlbnNpb25zOiBjb25uZWN0aW9uSW5mby5leHRlbnNpb25zLFxuICAgICAgICAgIGNvbmZpZ3VyYXRpb25zOiBjb25uZWN0aW9uSW5mby5jb25maWd1cmF0aW9ucyxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBoYW5kbGUgb3RoZXIgZGF0YSBzb3VyY2VcbiAgICAgICAgYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldFByb2plY3REYXRhU291cmNlVGFibGVzKHByb2plY3QpO1xuICAgICAgICBsb2dnZXIuZGVidWcoYERhdGEgc291cmNlIHRhYmxlcyBmZXRjaGVkYCk7XG4gICAgICB9XG4gICAgICAvLyB0ZWxlbWV0cnlcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KGV2ZW50TmFtZSwgZXZlbnRQcm9wZXJ0aWVzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvcihcbiAgICAgICAgJ0ZhaWxlZCB0byBnZXQgcHJvamVjdCB0YWJsZXMnLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShlcnIsIG51bGwsIDIpLFxuICAgICAgKTtcbiAgICAgIGF3YWl0IGN0eC5wcm9qZWN0UmVwb3NpdG9yeS5kZWxldGVPbmUocHJvamVjdC5pZCk7XG4gICAgICBjdHgudGVsZW1ldHJ5LnNlbmRFdmVudChcbiAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICB7IGV2ZW50UHJvcGVydGllcywgZXJyb3I6IGVyci5tZXNzYWdlIH0sXG4gICAgICAgIGVyci5leHRlbnNpb25zPy5zZXJ2aWNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHByb2plY3QudHlwZSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgZGlzcGxheU5hbWU6IHByb2plY3QuZGlzcGxheU5hbWUsXG4gICAgICAgIC4uLmN0eC5wcm9qZWN0U2VydmljZS5nZXRHZW5lcmFsQ29ubmVjdGlvbkluZm8ocHJvamVjdCksXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlRGF0YVNvdXJjZShcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZ3M6IHsgZGF0YTogRGF0YVNvdXJjZSB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gYXJncy5kYXRhO1xuICAgIGNvbnN0IHsgZGlzcGxheU5hbWUsIC4uLmNvbm5lY3Rpb25JbmZvIH0gPSBwcm9wZXJ0aWVzO1xuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICBjb25zdCBkYXRhU291cmNlVHlwZSA9IHByb2plY3QudHlwZTtcblxuICAgIC8vIG9ubHkgbmV3IGNvbm5lY3Rpb24gaW5mbyBuZWVkZWQgdG8gZW5jcnlwdFxuICAgIGNvbnN0IHRvVXBkYXRlQ29ubmVjdGlvbkluZm8gPSBlbmNyeXB0Q29ubmVjdGlvbkluZm8oXG4gICAgICBkYXRhU291cmNlVHlwZSxcbiAgICAgIGNvbm5lY3Rpb25JbmZvIGFzIGFueSxcbiAgICApO1xuXG4gICAgaWYgKGRhdGFTb3VyY2VUeXBlID09PSBEYXRhU291cmNlTmFtZS5EVUNLREIpIHtcbiAgICAgIC8vIHByZXBhcmUgZHVja2RiIGVudmlyb25tZW50IGluIHdyZW4tZW5naW5lXG4gICAgICBjb25zdCB7IGluaXRTcWwsIGV4dGVuc2lvbnMsIGNvbmZpZ3VyYXRpb25zIH0gPVxuICAgICAgICB0b1VwZGF0ZUNvbm5lY3Rpb25JbmZvIGFzIERVQ0tEQl9DT05ORUNUSU9OX0lORk87XG4gICAgICBhd2FpdCB0aGlzLmJ1aWxkRHVja0RiRW52aXJvbm1lbnQoY3R4LCB7XG4gICAgICAgIGluaXRTcWwsXG4gICAgICAgIGV4dGVuc2lvbnMsXG4gICAgICAgIGNvbmZpZ3VyYXRpb25zLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0ID0ge1xuICAgICAgICAuLi5wcm9qZWN0LFxuICAgICAgICBkaXNwbGF5TmFtZSxcbiAgICAgICAgY29ubmVjdGlvbkluZm86IHtcbiAgICAgICAgICAuLi5wcm9qZWN0LmNvbm5lY3Rpb25JbmZvLFxuICAgICAgICAgIC4uLnRvVXBkYXRlQ29ubmVjdGlvbkluZm8sXG4gICAgICAgIH0sXG4gICAgICB9IGFzIFByb2plY3Q7XG5cbiAgICAgIGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZXRQcm9qZWN0RGF0YVNvdXJjZVRhYmxlcyh1cGRhdGVkUHJvamVjdCk7XG4gICAgICBsb2dnZXIuZGVidWcoYERhdGEgc291cmNlIHRhYmxlcyBmZXRjaGVkYCk7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RSZXBvc2l0b3J5LnVwZGF0ZU9uZShwcm9qZWN0LmlkLCB7XG4gICAgICBkaXNwbGF5TmFtZSxcbiAgICAgIGNvbm5lY3Rpb25JbmZvOiB7IC4uLnByb2plY3QuY29ubmVjdGlvbkluZm8sIC4uLnRvVXBkYXRlQ29ubmVjdGlvbkluZm8gfSxcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogdXBkYXRlZFByb2plY3QudHlwZSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgZGlzcGxheU5hbWU6IHVwZGF0ZWRQcm9qZWN0LmRpc3BsYXlOYW1lLFxuICAgICAgICAuLi5jdHgucHJvamVjdFNlcnZpY2UuZ2V0R2VuZXJhbENvbm5lY3Rpb25JbmZvKHVwZGF0ZWRQcm9qZWN0KSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0RGF0YVNvdXJjZVRhYmxlcyhfcm9vdDogYW55LCBfYXJnLCBjdHg6IElDb250ZXh0KSB7XG4gICAgcmV0dXJuIGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZXRQcm9qZWN0RGF0YVNvdXJjZVRhYmxlcygpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNhdmVUYWJsZXMoXG4gICAgX3Jvb3Q6IGFueSxcbiAgICBhcmc6IHtcbiAgICAgIGRhdGE6IHsgdGFibGVzOiBzdHJpbmdbXSB9O1xuICAgIH0sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgKSB7XG4gICAgY29uc3QgZXZlbnROYW1lID0gVGVsZW1ldHJ5RXZlbnQuQ09OTkVDVElPTl9TQVZFX1RBQkxFUztcblxuICAgIC8vIGdldCBjdXJyZW50IHByb2plY3RcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGRlbGV0ZSBleGlzdGluZyBtb2RlbHMgYW5kIGNvbHVtbnNcbiAgICAgIGNvbnN0IHsgbW9kZWxzLCBjb2x1bW5zIH0gPSBhd2FpdCB0aGlzLm92ZXJ3cml0ZU1vZGVsc0FuZENvbHVtbnMoXG4gICAgICAgIGFyZy5kYXRhLnRhYmxlcyxcbiAgICAgICAgY3R4LFxuICAgICAgICBwcm9qZWN0LFxuICAgICAgKTtcbiAgICAgIC8vIHRlbGVtZXRyeVxuICAgICAgY3R4LnRlbGVtZXRyeS5zZW5kRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRhdGFTb3VyY2VUeXBlOiBwcm9qZWN0LnR5cGUsXG4gICAgICAgIHRhYmxlc0NvdW50OiBtb2RlbHMubGVuZ3RoLFxuICAgICAgICBjb2x1bW5zQ291bnQ6IGNvbHVtbnMubGVuZ3RoLFxuICAgICAgfSk7XG5cbiAgICAgIC8vIGFzeW5jIGRlcGxveSB0byB3cmVuLWVuZ2luZSBhbmQgYWkgc2VydmljZVxuICAgICAgdGhpcy5kZXBsb3koY3R4KTtcbiAgICAgIHJldHVybiB7IG1vZGVsczogbW9kZWxzLCBjb2x1bW5zIH07XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHsgZGF0YVNvdXJjZVR5cGU6IHByb2plY3QudHlwZSwgZXJyb3I6IGVyci5tZXNzYWdlIH0sXG4gICAgICAgIGVyci5leHRlbnNpb25zPy5zZXJ2aWNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGF1dG9HZW5lcmF0ZVJlbGF0aW9uKF9yb290OiBhbnksIF9hcmc6IGFueSwgY3R4OiBJQ29udGV4dCkge1xuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0Q3VycmVudFByb2plY3QoKTtcblxuICAgIC8vIGdldCBtb2RlbHMgYW5kIGNvbHVtbnNcbiAgICBjb25zdCBtb2RlbHMgPSBhd2FpdCBjdHgubW9kZWxSZXBvc2l0b3J5LmZpbmRBbGxCeSh7XG4gICAgICBwcm9qZWN0SWQ6IHByb2plY3QuaWQsXG4gICAgfSk7XG4gICAgY29uc3QgbW9kZWxJZHMgPSBtb2RlbHMubWFwKChtKSA9PiBtLmlkKTtcbiAgICBjb25zdCBjb2x1bW5zID1cbiAgICAgIGF3YWl0IGN0eC5tb2RlbENvbHVtblJlcG9zaXRvcnkuZmluZENvbHVtbnNCeU1vZGVsSWRzKG1vZGVsSWRzKTtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9XG4gICAgICBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0UHJvamVjdFN1Z2dlc3RlZENvbnN0cmFpbnQocHJvamVjdCk7XG5cbiAgICAvLyBnZW5lcmF0ZSByZWxhdGlvblxuICAgIGNvbnN0IHJlbGF0aW9ucyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29uc3RyYWludCBvZiBjb25zdHJhaW50cykge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjb25zdHJhaW50VGFibGUsXG4gICAgICAgIGNvbnN0cmFpbnRDb2x1bW4sXG4gICAgICAgIGNvbnN0cmFpbnRlZFRhYmxlLFxuICAgICAgICBjb25zdHJhaW50ZWRDb2x1bW4sXG4gICAgICB9ID0gY29uc3RyYWludDtcbiAgICAgIC8vIHZhbGlkYXRlIHRhYmxlcyBhbmQgY29sdW1ucyBleGlzdHMgaW4gb3VyIG1vZGVscyBhbmQgbW9kZWwgY29sdW1uc1xuICAgICAgY29uc3QgZnJvbU1vZGVsID0gbW9kZWxzLmZpbmQoXG4gICAgICAgIChtKSA9PiBtLnNvdXJjZVRhYmxlTmFtZSA9PT0gY29uc3RyYWludFRhYmxlLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHRvTW9kZWwgPSBtb2RlbHMuZmluZChcbiAgICAgICAgKG0pID0+IG0uc291cmNlVGFibGVOYW1lID09PSBjb25zdHJhaW50ZWRUYWJsZSxcbiAgICAgICk7XG4gICAgICBpZiAoIWZyb21Nb2RlbCB8fCAhdG9Nb2RlbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZyb21Db2x1bW4gPSBjb2x1bW5zLmZpbmQoXG4gICAgICAgIChjKSA9PlxuICAgICAgICAgIGMubW9kZWxJZCA9PT0gZnJvbU1vZGVsLmlkICYmIGMuc291cmNlQ29sdW1uTmFtZSA9PT0gY29uc3RyYWludENvbHVtbixcbiAgICAgICk7XG4gICAgICBjb25zdCB0b0NvbHVtbiA9IGNvbHVtbnMuZmluZChcbiAgICAgICAgKGMpID0+XG4gICAgICAgICAgYy5tb2RlbElkID09PSB0b01vZGVsLmlkICYmIGMuc291cmNlQ29sdW1uTmFtZSA9PT0gY29uc3RyYWludGVkQ29sdW1uLFxuICAgICAgKTtcbiAgICAgIGlmICghZnJvbUNvbHVtbiB8fCAhdG9Db2x1bW4pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyBjcmVhdGUgcmVsYXRpb25cbiAgICAgIGNvbnN0IHJlbGF0aW9uOiBBbmFseXNpc1JlbGF0aW9uSW5mbyA9IHtcbiAgICAgICAgLy8gdXBwZXIgY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIHRoZSBzb3VyY2VUYWJsZU5hbWVcbiAgICAgICAgbmFtZTogY29uc3RyYWludC5jb25zdHJhaW50TmFtZSxcbiAgICAgICAgZnJvbU1vZGVsSWQ6IGZyb21Nb2RlbC5pZCxcbiAgICAgICAgZnJvbU1vZGVsUmVmZXJlbmNlTmFtZTogZnJvbU1vZGVsLnJlZmVyZW5jZU5hbWUsXG4gICAgICAgIGZyb21Db2x1bW5JZDogZnJvbUNvbHVtbi5pZCxcbiAgICAgICAgZnJvbUNvbHVtblJlZmVyZW5jZU5hbWU6IGZyb21Db2x1bW4ucmVmZXJlbmNlTmFtZSxcbiAgICAgICAgdG9Nb2RlbElkOiB0b01vZGVsLmlkLFxuICAgICAgICB0b01vZGVsUmVmZXJlbmNlTmFtZTogdG9Nb2RlbC5yZWZlcmVuY2VOYW1lLFxuICAgICAgICB0b0NvbHVtbklkOiB0b0NvbHVtbi5pZCxcbiAgICAgICAgdG9Db2x1bW5SZWZlcmVuY2VOYW1lOiB0b0NvbHVtbi5yZWZlcmVuY2VOYW1lLFxuICAgICAgICAvLyBUT0RPOiBhZGQgam9pbiB0eXBlXG4gICAgICAgIHR5cGU6IFJlbGF0aW9uVHlwZS5PTkVfVE9fTUFOWSxcbiAgICAgIH07XG4gICAgICByZWxhdGlvbnMucHVzaChyZWxhdGlvbik7XG4gICAgfVxuICAgIC8vIGdyb3VwIGJ5IG1vZGVsXG4gICAgcmV0dXJuIG1vZGVscy5tYXAoKHsgaWQsIGRpc3BsYXlOYW1lLCByZWZlcmVuY2VOYW1lIH0pID0+ICh7XG4gICAgICBpZCxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgcmVmZXJlbmNlTmFtZSxcbiAgICAgIHJlbGF0aW9uczogcmVsYXRpb25zLmZpbHRlcihcbiAgICAgICAgKHJlbGF0aW9uKSA9PlxuICAgICAgICAgIHJlbGF0aW9uLmZyb21Nb2RlbElkID09PSBpZCAmJlxuICAgICAgICAgIC8vIGV4Y2x1ZGUgc2VsZi1yZWZlcmVudGlhbCByZWxhdGlvbnNoaXBcbiAgICAgICAgICByZWxhdGlvbi50b01vZGVsSWQgIT09IHJlbGF0aW9uLmZyb21Nb2RlbElkLFxuICAgICAgKSxcbiAgICB9KSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2F2ZVJlbGF0aW9ucyhcbiAgICBfcm9vdDogYW55LFxuICAgIGFyZzogeyBkYXRhOiB7IHJlbGF0aW9uczogUmVsYXRpb25EYXRhW10gfSB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IFRlbGVtZXRyeUV2ZW50LkNPTk5FQ1RJT05fU0FWRV9SRUxBVElPTjtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2F2ZWRSZWxhdGlvbnMgPSBhd2FpdCBjdHgubW9kZWxTZXJ2aWNlLnNhdmVSZWxhdGlvbnMoXG4gICAgICAgIGFyZy5kYXRhLnJlbGF0aW9ucyxcbiAgICAgICk7XG4gICAgICAvLyBhc3luYyBkZXBsb3lcbiAgICAgIHRoaXMuZGVwbG95KGN0eCk7XG4gICAgICBjdHgudGVsZW1ldHJ5LnNlbmRFdmVudChldmVudE5hbWUsIHtcbiAgICAgICAgcmVsYXRpb25Db3VudDogc2F2ZWRSZWxhdGlvbnMubGVuZ3RoLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc2F2ZWRSZWxhdGlvbnM7XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIHsgZXJyb3I6IGVyci5tZXNzYWdlIH0sXG4gICAgICAgIGVyci5leHRlbnNpb25zPy5zZXJ2aWNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFNjaGVtYUNoYW5nZShfcm9vdDogYW55LCBfYXJnOiBhbnksIGN0eDogSUNvbnRleHQpIHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgY29uc3QgbGFzdFNjaGVtYUNoYW5nZSA9XG4gICAgICBhd2FpdCBjdHguc2NoZW1hQ2hhbmdlUmVwb3NpdG9yeS5maW5kTGFzdFNjaGVtYUNoYW5nZShwcm9qZWN0LmlkKTtcblxuICAgIGlmICghbGFzdFNjaGVtYUNoYW5nZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVsZXRlZFRhYmxlczogbnVsbCxcbiAgICAgICAgZGVsZXRlZENvbHVtbnM6IG51bGwsXG4gICAgICAgIG1vZGlmaWVkQ29sdW1uczogbnVsbCxcbiAgICAgICAgbGFzdFNjaGVtYUNoYW5nZVRpbWU6IG51bGwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IG1vZGVscyA9IGF3YWl0IGN0eC5tb2RlbFJlcG9zaXRvcnkuZmluZEFsbEJ5KHtcbiAgICAgIHByb2plY3RJZDogcHJvamVjdC5pZCxcbiAgICB9KTtcbiAgICBjb25zdCBtb2RlbElkcyA9IG1vZGVscy5tYXAoKG1vZGVsKSA9PiBtb2RlbC5pZCk7XG4gICAgY29uc3QgbW9kZWxDb2x1bW5zID1cbiAgICAgIGF3YWl0IGN0eC5tb2RlbENvbHVtblJlcG9zaXRvcnkuZmluZENvbHVtbnNCeU1vZGVsSWRzKG1vZGVsSWRzKTtcblxuICAgIGNvbnN0IG1vZGVsUmVsYXRpb25zaGlwcyA9IGF3YWl0IGN0eC5yZWxhdGlvblJlcG9zaXRvcnkuZmluZFJlbGF0aW9uSW5mb0J5KHtcbiAgICAgIG1vZGVsSWRzLFxuICAgIH0pO1xuXG4gICAgY29uc3Qgc2NoZW1hRGV0ZWN0b3IgPSBuZXcgRGF0YVNvdXJjZVNjaGVtYURldGVjdG9yKHtcbiAgICAgIGN0eCxcbiAgICAgIHByb2plY3RJZDogcHJvamVjdC5pZCxcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc29sdmVzID0gbGFzdFNjaGVtYUNoYW5nZS5yZXNvbHZlO1xuICAgIGNvbnN0IHVucmVzb2x2ZWRDaGFuZ2VzID0gT2JqZWN0LmtleXMocmVzb2x2ZXMpLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcbiAgICAgIGNvbnN0IGlzUmVzb2x2ZWQgPSByZXNvbHZlc1trZXldO1xuICAgICAgY29uc3QgY2hhbmdlcyA9IGxhc3RTY2hlbWFDaGFuZ2UuY2hhbmdlW2tleV07XG4gICAgICAvLyByZXR1cm4gaWYgcmVzb2x2ZWQgb3Igbm8gY2hhbmdlc1xuICAgICAgaWYgKGlzUmVzb2x2ZWQgfHwgIWNoYW5nZXMpIHJldHVybiByZXN1bHQ7XG5cbiAgICAgIC8vIE1hcHBpbmcgd2l0aCBhZmZlY3RlZCBtb2RlbHMgYW5kIGNvbHVtbnMgYW5kIGFmZmVjdGVkIGNhbGN1bGF0ZWQgZmllbGRzIGFuZCByZWxhdGlvbnNoaXBzIGRhdGEgaW50byBzY2hlbWEgY2hhbmdlXG4gICAgICBjb25zdCBhZmZlY3RlZHMgPSBzY2hlbWFEZXRlY3Rvci5nZXRBZmZlY3RlZFJlc291cmNlcyhjaGFuZ2VzLCB7XG4gICAgICAgIG1vZGVscyxcbiAgICAgICAgbW9kZWxDb2x1bW5zLFxuICAgICAgICBtb2RlbFJlbGF0aW9uc2hpcHMsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgYWZmZWN0ZWRDaGFuZ2VzID0gYWZmZWN0ZWRzLmxlbmd0aCA/IGFmZmVjdGVkcyA6IG51bGw7XG4gICAgICByZXR1cm4geyAuLi5yZXN1bHQsIFtrZXldOiBhZmZlY3RlZENoYW5nZXMgfTtcbiAgICB9LCB7fSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4udW5yZXNvbHZlZENoYW5nZXMsXG4gICAgICBsYXN0U2NoZW1hQ2hhbmdlVGltZTogbGFzdFNjaGVtYUNoYW5nZS5jcmVhdGVkQXQsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB0cmlnZ2VyRGF0YVNvdXJjZURldGVjdGlvbihcbiAgICBfcm9vdDogYW55LFxuICAgIF9hcmc6IGFueSxcbiAgICBjdHg6IElDb250ZXh0LFxuICApIHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgY29uc3Qgc2NoZW1hRGV0ZWN0b3IgPSBuZXcgRGF0YVNvdXJjZVNjaGVtYURldGVjdG9yKHtcbiAgICAgIGN0eCxcbiAgICAgIHByb2plY3RJZDogcHJvamVjdC5pZCxcbiAgICB9KTtcbiAgICBjb25zdCBldmVudE5hbWUgPSBUZWxlbWV0cnlFdmVudC5NT0RFTElOR19ERVRFQ1RfU0NIRU1BX0NIQU5HRTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaGFzU2NoZW1hQ2hhbmdlID0gYXdhaXQgc2NoZW1hRGV0ZWN0b3IuZGV0ZWN0U2NoZW1hQ2hhbmdlKCk7XG4gICAgICBjdHgudGVsZW1ldHJ5LnNlbmRFdmVudChldmVudE5hbWUsIHsgaGFzU2NoZW1hQ2hhbmdlIH0pO1xuICAgICAgcmV0dXJuIGhhc1NjaGVtYUNoYW5nZTtcbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjdHgudGVsZW1ldHJ5LnNlbmRFdmVudChcbiAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICB7IGVycm9yIH0sXG4gICAgICAgIGVycm9yLmV4dGVuc2lvbnM/LnNlcnZpY2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZXNvbHZlU2NoZW1hQ2hhbmdlKFxuICAgIF9yb290OiBhbnksXG4gICAgYXJnOiB7IHdoZXJlOiB7IHR5cGU6IFNjaGVtYUNoYW5nZVR5cGUgfSB9LFxuICAgIGN0eDogSUNvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IHsgdHlwZSB9ID0gYXJnLndoZXJlO1xuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjdHgucHJvamVjdFNlcnZpY2UuZ2V0Q3VycmVudFByb2plY3QoKTtcbiAgICBjb25zdCBzY2hlbWFEZXRlY3RvciA9IG5ldyBEYXRhU291cmNlU2NoZW1hRGV0ZWN0b3Ioe1xuICAgICAgY3R4LFxuICAgICAgcHJvamVjdElkOiBwcm9qZWN0LmlkLFxuICAgIH0pO1xuICAgIGNvbnN0IGV2ZW50TmFtZSA9IFRlbGVtZXRyeUV2ZW50Lk1PREVMSU5HX1JFU09MVkVfU0NIRU1BX0NIQU5HRTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc2NoZW1hRGV0ZWN0b3IucmVzb2x2ZVNjaGVtYUNoYW5nZSh0eXBlKTtcbiAgICAgIGN0eC50ZWxlbWV0cnkuc2VuZEV2ZW50KGV2ZW50TmFtZSwgeyB0eXBlIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjdHgudGVsZW1ldHJ5LnNlbmRFdmVudChcbiAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICB7IHR5cGUsIGVycm9yIH0sXG4gICAgICAgIGVycm9yLmV4dGVuc2lvbnM/LnNlcnZpY2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZGVwbG95KGN0eDogSUNvbnRleHQpIHtcbiAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY3R4LnByb2plY3RTZXJ2aWNlLmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgY29uc3QgeyBtYW5pZmVzdCB9ID0gYXdhaXQgY3R4Lm1kbFNlcnZpY2UubWFrZUN1cnJlbnRNb2RlbE1ETCgpO1xuICAgIGNvbnN0IGRlcGxveVJlcyA9IGF3YWl0IGN0eC5kZXBsb3lTZXJ2aWNlLmRlcGxveShtYW5pZmVzdCwgcHJvamVjdC5pZCk7XG5cbiAgICAvLyBvbmx5IGdlbmVyYXRpbmcgZm9yIHVzZXIncyBkYXRhIHNvdXJjZVxuICAgIGlmIChwcm9qZWN0LnNhbXBsZURhdGFzZXQgPT09IG51bGwpIHtcbiAgICAgIGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZW5lcmF0ZVByb2plY3RSZWNvbW1lbmRhdGlvblF1ZXN0aW9ucygpO1xuICAgIH1cbiAgICByZXR1cm4gZGVwbG95UmVzO1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFJlbGF0aW9uSW5wdXQoXG4gICAgcmVsYXRpb25zOiBTYW1wbGVEYXRhc2V0UmVsYXRpb25zaGlwW10sXG4gICAgbW9kZWxzOiBNb2RlbFtdLFxuICAgIGNvbHVtbnM6IE1vZGVsQ29sdW1uW10sXG4gICkge1xuICAgIGNvbnN0IHJlbGF0aW9uSW5wdXQgPSByZWxhdGlvbnMubWFwKChyZWxhdGlvbikgPT4ge1xuICAgICAgY29uc3QgeyBmcm9tTW9kZWxOYW1lLCBmcm9tQ29sdW1uTmFtZSwgdG9Nb2RlbE5hbWUsIHRvQ29sdW1uTmFtZSwgdHlwZSB9ID1cbiAgICAgICAgcmVsYXRpb247XG4gICAgICBjb25zdCBmcm9tTW9kZWxJZCA9IG1vZGVscy5maW5kKFxuICAgICAgICAobW9kZWwpID0+IG1vZGVsLnNvdXJjZVRhYmxlTmFtZSA9PT0gZnJvbU1vZGVsTmFtZSxcbiAgICAgICk/LmlkO1xuICAgICAgY29uc3QgdG9Nb2RlbElkID0gbW9kZWxzLmZpbmQoXG4gICAgICAgIChtb2RlbCkgPT4gbW9kZWwuc291cmNlVGFibGVOYW1lID09PSB0b01vZGVsTmFtZSxcbiAgICAgICk/LmlkO1xuICAgICAgaWYgKCFmcm9tTW9kZWxJZCB8fCAhdG9Nb2RlbElkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgTW9kZWwgbm90IGZvdW5kLCBmcm9tTW9kZWxOYW1lIFwiJHtmcm9tTW9kZWxOYW1lfVwiIHRvIHRvTW9kZWxOYW1lOiBcIiR7dG9Nb2RlbE5hbWV9XCJgLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmcm9tQ29sdW1uSWQgPSBjb2x1bW5zLmZpbmQoXG4gICAgICAgIChjb2x1bW4pID0+XG4gICAgICAgICAgY29sdW1uLnJlZmVyZW5jZU5hbWUgPT09IGZyb21Db2x1bW5OYW1lICYmXG4gICAgICAgICAgY29sdW1uLm1vZGVsSWQgPT09IGZyb21Nb2RlbElkLFxuICAgICAgKT8uaWQ7XG4gICAgICBjb25zdCB0b0NvbHVtbklkID0gY29sdW1ucy5maW5kKFxuICAgICAgICAoY29sdW1uKSA9PlxuICAgICAgICAgIGNvbHVtbi5yZWZlcmVuY2VOYW1lID09PSB0b0NvbHVtbk5hbWUgJiYgY29sdW1uLm1vZGVsSWQgPT09IHRvTW9kZWxJZCxcbiAgICAgICk/LmlkO1xuICAgICAgaWYgKCFmcm9tQ29sdW1uSWQgfHwgIXRvQ29sdW1uSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb2x1bW4gbm90IGZvdW5kIGZyb21Db2x1bW5OYW1lOiAke2Zyb21Db2x1bW5OYW1lfSB0b0NvbHVtbk5hbWU6ICR7dG9Db2x1bW5OYW1lfWAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmcm9tTW9kZWxJZCxcbiAgICAgICAgZnJvbUNvbHVtbklkLFxuICAgICAgICB0b01vZGVsSWQsXG4gICAgICAgIHRvQ29sdW1uSWQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiByZWxhdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIH0gYXMgUmVsYXRpb25EYXRhO1xuICAgIH0pO1xuICAgIHJldHVybiByZWxhdGlvbklucHV0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBvdmVyd3JpdGVNb2RlbHNBbmRDb2x1bW5zKFxuICAgIHRhYmxlczogc3RyaW5nW10sXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgICBwcm9qZWN0OiBQcm9qZWN0LFxuICApIHtcbiAgICAvLyBkZWxldGUgZXhpc3RpbmcgbW9kZWxzIGFuZCBjb2x1bW5zXG4gICAgYXdhaXQgY3R4Lm1vZGVsU2VydmljZS5kZWxldGVBbGxNb2RlbHNCeVByb2plY3RJZChwcm9qZWN0LmlkKTtcblxuICAgIGNvbnN0IGNvbXBhY3RUYWJsZXM6IENvbXBhY3RUYWJsZVtdID1cbiAgICAgIGF3YWl0IGN0eC5wcm9qZWN0U2VydmljZS5nZXRQcm9qZWN0RGF0YVNvdXJjZVRhYmxlcyhwcm9qZWN0KTtcblxuICAgIGNvbnN0IHNlbGVjdGVkVGFibGVzID0gY29tcGFjdFRhYmxlcy5maWx0ZXIoKHRhYmxlKSA9PlxuICAgICAgdGFibGVzLmluY2x1ZGVzKHRhYmxlLm5hbWUpLFxuICAgICk7XG5cbiAgICAvLyBjcmVhdGUgbW9kZWxzXG4gICAgY29uc3QgbW9kZWxWYWx1ZXMgPSBzZWxlY3RlZFRhYmxlcy5tYXAoKHRhYmxlKSA9PiB7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGFibGU/LnByb3BlcnRpZXM7XG4gICAgICAvLyBjb21wYWN0VGFibGUgY29udGFpbiBzY2hlbWEgYW5kIGNhdGFsb2csIHRoZXNlIGluZm9ybWF0aW9uIGFyZSBmb3IgYnVpbGRpbmcgdGFibGVSZWZlcmVuY2UgaW4gbWRsXG4gICAgICBjb25zdCBtb2RlbCA9IHtcbiAgICAgICAgcHJvamVjdElkOiBwcm9qZWN0LmlkLFxuICAgICAgICBkaXNwbGF5TmFtZTogdGFibGUubmFtZSwgLy8gdXNlIHRhYmxlIG5hbWUgYXMgZGlzcGxheU5hbWUsIHJlZmVyZW5jZU5hbWUgYW5kIHRhYmxlTmFtZVxuICAgICAgICByZWZlcmVuY2VOYW1lOiByZXBsYWNlSW52YWxpZFJlZmVyZW5jZU5hbWUodGFibGUubmFtZSksXG4gICAgICAgIHNvdXJjZVRhYmxlTmFtZTogdGFibGUubmFtZSxcbiAgICAgICAgY2FjaGVkOiBmYWxzZSxcbiAgICAgICAgcmVmcmVzaFRpbWU6IG51bGwsXG4gICAgICAgIHByb3BlcnRpZXM6IHByb3BlcnRpZXMgPyBKU09OLnN0cmluZ2lmeShwcm9wZXJ0aWVzKSA6IG51bGwsXG4gICAgICB9IGFzIFBhcnRpYWw8TW9kZWw+O1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH0pO1xuICAgIGNvbnN0IG1vZGVscyA9IGF3YWl0IGN0eC5tb2RlbFJlcG9zaXRvcnkuY3JlYXRlTWFueShtb2RlbFZhbHVlcyk7XG5cbiAgICAvLyBjcmVhdGUgY29sdW1uc1xuICAgIGNvbnN0IGNvbHVtblZhbHVlcyA9IHNlbGVjdGVkVGFibGVzLmZsYXRNYXAoKHRhYmxlKSA9PiB7XG4gICAgICBjb25zdCBjb21wYWN0Q29sdW1ucyA9IHRhYmxlLmNvbHVtbnM7XG4gICAgICBjb25zdCBwcmltYXJ5S2V5ID0gdGFibGUucHJpbWFyeUtleTtcbiAgICAgIGNvbnN0IG1vZGVsID0gbW9kZWxzLmZpbmQoKG0pID0+IG0uc291cmNlVGFibGVOYW1lID09PSB0YWJsZS5uYW1lKTtcbiAgICAgIHJldHVybiBjb21wYWN0Q29sdW1ucy5tYXAoXG4gICAgICAgIChjb2x1bW4pID0+XG4gICAgICAgICAgKHtcbiAgICAgICAgICAgIG1vZGVsSWQ6IG1vZGVsLmlkLFxuICAgICAgICAgICAgaXNDYWxjdWxhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBjb2x1bW4ubmFtZSxcbiAgICAgICAgICAgIHJlZmVyZW5jZU5hbWU6IHRyYW5zZm9ybUludmFsaWRDb2x1bW5OYW1lKGNvbHVtbi5uYW1lKSxcbiAgICAgICAgICAgIHNvdXJjZUNvbHVtbk5hbWU6IGNvbHVtbi5uYW1lLFxuICAgICAgICAgICAgdHlwZTogY29sdW1uLnR5cGUgfHwgJ3N0cmluZycsXG4gICAgICAgICAgICBub3ROdWxsOiBjb2x1bW4ubm90TnVsbCB8fCBmYWxzZSxcbiAgICAgICAgICAgIGlzUGs6IHByaW1hcnlLZXkgPT09IGNvbHVtbi5uYW1lLFxuICAgICAgICAgICAgcHJvcGVydGllczogY29sdW1uLnByb3BlcnRpZXNcbiAgICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShjb2x1bW4ucHJvcGVydGllcylcbiAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgIH0pIGFzIFBhcnRpYWw8TW9kZWxDb2x1bW4+LFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgY3R4Lm1vZGVsQ29sdW1uUmVwb3NpdG9yeS5jcmVhdGVNYW55KGNvbHVtblZhbHVlcyk7XG5cbiAgICAvLyBjcmVhdGUgbmVzdGVkIGNvbHVtbnNcbiAgICBjb25zdCBjb21wYWN0Q29sdW1ucyA9IHNlbGVjdGVkVGFibGVzLmZsYXRNYXAoKHRhYmxlKSA9PiB0YWJsZS5jb2x1bW5zKTtcbiAgICBjb25zdCBuZXN0ZWRDb2x1bW5WYWx1ZXMgPSBjb21wYWN0Q29sdW1ucy5mbGF0TWFwKChjb21wYWN0Q29sdW1uKSA9PiB7XG4gICAgICBjb25zdCBjb2x1bW4gPSBjb2x1bW5zLmZpbmQoXG4gICAgICAgIChjKSA9PiBjLnNvdXJjZUNvbHVtbk5hbWUgPT09IGNvbXBhY3RDb2x1bW4ubmFtZSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gaGFuZGxlTmVzdGVkQ29sdW1ucyhjb21wYWN0Q29sdW1uLCB7XG4gICAgICAgIG1vZGVsSWQ6IGNvbHVtbi5tb2RlbElkLFxuICAgICAgICBjb2x1bW5JZDogY29sdW1uLmlkLFxuICAgICAgICBzb3VyY2VDb2x1bW5OYW1lOiBjb2x1bW4uc291cmNlQ29sdW1uTmFtZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGF3YWl0IGN0eC5tb2RlbE5lc3RlZENvbHVtblJlcG9zaXRvcnkuY3JlYXRlTWFueShuZXN0ZWRDb2x1bW5WYWx1ZXMpO1xuXG4gICAgcmV0dXJuIHsgbW9kZWxzLCBjb2x1bW5zIH07XG4gIH1cblxuICBwcml2YXRlIGNvbmNhdEluaXRTcWwoaW5pdFNxbDogc3RyaW5nLCBleHRlbnNpb25zOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGluc3RhbGxFeHRlbnNpb25zID0gZXh0ZW5zaW9uc1xuICAgICAgLm1hcCgoZXh0KSA9PiBgSU5TVEFMTCAke2V4dH07YClcbiAgICAgIC5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gdHJpbShgJHtpbnN0YWxsRXh0ZW5zaW9uc31cXG4ke2luaXRTcWx9YCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGJ1aWxkRHVja0RiRW52aXJvbm1lbnQoXG4gICAgY3R4OiBJQ29udGV4dCxcbiAgICBvcHRpb25zOiB7XG4gICAgICBpbml0U3FsOiBzdHJpbmc7XG4gICAgICBleHRlbnNpb25zOiBzdHJpbmdbXTtcbiAgICAgIGNvbmZpZ3VyYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICAgIH0sXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgaW5pdFNxbCwgZXh0ZW5zaW9ucywgY29uZmlndXJhdGlvbnMgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaW5pdFNxbFdpdGhFeHRlbnNpb25zID0gdGhpcy5jb25jYXRJbml0U3FsKGluaXRTcWwsIGV4dGVuc2lvbnMpO1xuICAgIGF3YWl0IGN0eC53cmVuRW5naW5lQWRhcHRvci5wcmVwYXJlRHVja0RCKHtcbiAgICAgIHNlc3Npb25Qcm9wczogY29uZmlndXJhdGlvbnMsXG4gICAgICBpbml0U3FsOiBpbml0U3FsV2l0aEV4dGVuc2lvbnMsXG4gICAgfSBhcyBEdWNrREJQcmVwYXJlT3B0aW9ucyk7XG5cbiAgICAvLyBjaGVjayBjYW4gbGlzdCBkYXRhc2V0IHRhYmxlXG4gICAgYXdhaXQgY3R4LndyZW5FbmdpbmVBZGFwdG9yLmxpc3RUYWJsZXMoKTtcblxuICAgIC8vIHBhdGNoIHdyZW4tZW5naW5lIGNvbmZpZ1xuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICd3cmVuLmRhdGFzb3VyY2UudHlwZSc6ICdkdWNrZGInLFxuICAgIH07XG4gICAgYXdhaXQgY3R4LndyZW5FbmdpbmVBZGFwdG9yLnBhdGNoQ29uZmlnKGNvbmZpZyk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJEYXRhU291cmNlTmFtZSIsIlJlbGF0aW9uVHlwZSIsInRyaW0iLCJnZXRMb2dnZXIiLCJyZXBsYWNlSW52YWxpZFJlZmVyZW5jZU5hbWUiLCJ0cmFuc2Zvcm1JbnZhbGlkQ29sdW1uTmFtZSIsImhhbmRsZU5lc3RlZENvbHVtbnMiLCJTYW1wbGVEYXRhc2V0TmFtZSIsImJ1aWxkSW5pdFNxbCIsImdldFJlbGF0aW9ucyIsInNhbXBsZURhdGFzZXRzIiwic25ha2VDYXNlIiwiRGF0YVNvdXJjZVNjaGVtYURldGVjdG9yIiwiZW5jcnlwdENvbm5lY3Rpb25JbmZvIiwiVGVsZW1ldHJ5RXZlbnQiLCJsb2dnZXIiLCJsZXZlbCIsIk9uYm9hcmRpbmdTdGF0dXNFbnVtIiwiUHJvamVjdFJlc29sdmVyIiwiY29uc3RydWN0b3IiLCJnZXRTZXR0aW5ncyIsImJpbmQiLCJ1cGRhdGVDdXJyZW50UHJvamVjdCIsInJlc2V0Q3VycmVudFByb2plY3QiLCJzYXZlRGF0YVNvdXJjZSIsInVwZGF0ZURhdGFTb3VyY2UiLCJsaXN0RGF0YVNvdXJjZVRhYmxlcyIsInNhdmVUYWJsZXMiLCJhdXRvR2VuZXJhdGVSZWxhdGlvbiIsInNhdmVSZWxhdGlvbnMiLCJnZXRPbmJvYXJkaW5nU3RhdHVzIiwic3RhcnRTYW1wbGVEYXRhc2V0IiwidHJpZ2dlckRhdGFTb3VyY2VEZXRlY3Rpb24iLCJnZXRTY2hlbWFDaGFuZ2UiLCJnZXRQcm9qZWN0UmVjb21tZW5kYXRpb25RdWVzdGlvbnMiLCJfcm9vdCIsIl9hcmciLCJjdHgiLCJwcm9qZWN0IiwicHJvamVjdFNlcnZpY2UiLCJnZXRDdXJyZW50UHJvamVjdCIsImdlbmVyYWxDb25uZWN0aW9uSW5mbyIsImdldEdlbmVyYWxDb25uZWN0aW9uSW5mbyIsImRhdGFTb3VyY2VUeXBlIiwidHlwZSIsInByb2R1Y3RWZXJzaW9uIiwiY29uZmlnIiwid3JlblByb2R1Y3RWZXJzaW9uIiwiZGF0YVNvdXJjZSIsInByb3BlcnRpZXMiLCJkaXNwbGF5TmFtZSIsInNhbXBsZURhdGFzZXQiLCJsYW5ndWFnZSIsImFyZyIsImRhdGEiLCJwcm9qZWN0UmVwb3NpdG9yeSIsInVwZGF0ZU9uZSIsImlkIiwiZ2VuZXJhdGVQcm9qZWN0UmVjb21tZW5kYXRpb25RdWVzdGlvbnMiLCJldmVudE5hbWUiLCJTRVRUSU5HX1JFU0VUX1BST0pFQ1QiLCJzY2hlbWFDaGFuZ2VSZXBvc2l0b3J5IiwiZGVsZXRlQWxsQnkiLCJwcm9qZWN0SWQiLCJkZXBsb3lTZXJ2aWNlIiwiZGVsZXRlQWxsQnlQcm9qZWN0SWQiLCJhc2tpbmdTZXJ2aWNlIiwibW9kZWxTZXJ2aWNlIiwiZGVsZXRlQWxsVmlld3NCeVByb2plY3RJZCIsImRlbGV0ZUFsbE1vZGVsc0J5UHJvamVjdElkIiwiZGVsZXRlUHJvamVjdCIsInRlbGVtZXRyeSIsInNlbmRFdmVudCIsImVyciIsImVycm9yIiwibWVzc2FnZSIsImV4dGVuc2lvbnMiLCJzZXJ2aWNlIiwibmFtZSIsImRhdGFzZXQiLCJFcnJvciIsIkNPTk5FQ1RJT05fU1RBUlRfU0FNUExFX0RBVEFTRVQiLCJldmVudFByb3BlcnRpZXMiLCJkYXRhc2V0TmFtZSIsImluaXRTcWwiLCJkdWNrZGJEYXRhc291cmNlUHJvcGVydGllcyIsImNvbmZpZ3VyYXRpb25zIiwiRFVDS0RCIiwidGFibGVzIiwidGFibGVOYW1lcyIsIm1hcCIsInRhYmxlIiwib3ZlcndyaXRlTW9kZWxzQW5kQ29sdW1ucyIsInVwZGF0ZVByaW1hcnlLZXlzIiwiYmF0Y2hVcGRhdGVNb2RlbFByb3BlcnRpZXMiLCJiYXRjaFVwZGF0ZUNvbHVtblByb3BlcnRpZXMiLCJyZWxhdGlvbnMiLCJtb2RlbHMiLCJtb2RlbFJlcG9zaXRvcnkiLCJmaW5kQWxsIiwiY29sdW1ucyIsIm1vZGVsQ29sdW1uUmVwb3NpdG9yeSIsIm1hcHBlZFJlbGF0aW9ucyIsImJ1aWxkUmVsYXRpb25JbnB1dCIsImRlcGxveSIsIl9lcnIiLCJzdGF0dXMiLCJmaW5kQWxsQnkiLCJsZW5ndGgiLCJhcmdzIiwiY29ubmVjdGlvbkluZm8iLCJjcmVhdGVQcm9qZWN0IiwiZGVidWciLCJkYXNoYm9hcmRTZXJ2aWNlIiwiaW5pdERhc2hib2FyZCIsIkNPTk5FQ1RJT05fU0FWRV9EQVRBX1NPVVJDRSIsImJ1aWxkRHVja0RiRW52aXJvbm1lbnQiLCJnZXRQcm9qZWN0RGF0YVNvdXJjZVRhYmxlcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWxldGVPbmUiLCJ0b1VwZGF0ZUNvbm5lY3Rpb25JbmZvIiwidXBkYXRlZFByb2plY3QiLCJDT05ORUNUSU9OX1NBVkVfVEFCTEVTIiwidGFibGVzQ291bnQiLCJjb2x1bW5zQ291bnQiLCJtb2RlbElkcyIsIm0iLCJmaW5kQ29sdW1uc0J5TW9kZWxJZHMiLCJjb25zdHJhaW50cyIsImdldFByb2plY3RTdWdnZXN0ZWRDb25zdHJhaW50IiwiY29uc3RyYWludCIsImNvbnN0cmFpbnRUYWJsZSIsImNvbnN0cmFpbnRDb2x1bW4iLCJjb25zdHJhaW50ZWRUYWJsZSIsImNvbnN0cmFpbnRlZENvbHVtbiIsImZyb21Nb2RlbCIsImZpbmQiLCJzb3VyY2VUYWJsZU5hbWUiLCJ0b01vZGVsIiwiZnJvbUNvbHVtbiIsImMiLCJtb2RlbElkIiwic291cmNlQ29sdW1uTmFtZSIsInRvQ29sdW1uIiwicmVsYXRpb24iLCJjb25zdHJhaW50TmFtZSIsImZyb21Nb2RlbElkIiwiZnJvbU1vZGVsUmVmZXJlbmNlTmFtZSIsInJlZmVyZW5jZU5hbWUiLCJmcm9tQ29sdW1uSWQiLCJmcm9tQ29sdW1uUmVmZXJlbmNlTmFtZSIsInRvTW9kZWxJZCIsInRvTW9kZWxSZWZlcmVuY2VOYW1lIiwidG9Db2x1bW5JZCIsInRvQ29sdW1uUmVmZXJlbmNlTmFtZSIsIk9ORV9UT19NQU5ZIiwicHVzaCIsImZpbHRlciIsIkNPTk5FQ1RJT05fU0FWRV9SRUxBVElPTiIsInNhdmVkUmVsYXRpb25zIiwicmVsYXRpb25Db3VudCIsImxhc3RTY2hlbWFDaGFuZ2UiLCJmaW5kTGFzdFNjaGVtYUNoYW5nZSIsImRlbGV0ZWRUYWJsZXMiLCJkZWxldGVkQ29sdW1ucyIsIm1vZGlmaWVkQ29sdW1ucyIsImxhc3RTY2hlbWFDaGFuZ2VUaW1lIiwibW9kZWwiLCJtb2RlbENvbHVtbnMiLCJtb2RlbFJlbGF0aW9uc2hpcHMiLCJyZWxhdGlvblJlcG9zaXRvcnkiLCJmaW5kUmVsYXRpb25JbmZvQnkiLCJzY2hlbWFEZXRlY3RvciIsInJlc29sdmVzIiwicmVzb2x2ZSIsInVucmVzb2x2ZWRDaGFuZ2VzIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsInJlc3VsdCIsImtleSIsImlzUmVzb2x2ZWQiLCJjaGFuZ2VzIiwiY2hhbmdlIiwiYWZmZWN0ZWRzIiwiZ2V0QWZmZWN0ZWRSZXNvdXJjZXMiLCJhZmZlY3RlZENoYW5nZXMiLCJjcmVhdGVkQXQiLCJNT0RFTElOR19ERVRFQ1RfU0NIRU1BX0NIQU5HRSIsImhhc1NjaGVtYUNoYW5nZSIsImRldGVjdFNjaGVtYUNoYW5nZSIsInJlc29sdmVTY2hlbWFDaGFuZ2UiLCJ3aGVyZSIsIk1PREVMSU5HX1JFU09MVkVfU0NIRU1BX0NIQU5HRSIsIm1hbmlmZXN0IiwibWRsU2VydmljZSIsIm1ha2VDdXJyZW50TW9kZWxNREwiLCJkZXBsb3lSZXMiLCJyZWxhdGlvbklucHV0IiwiZnJvbU1vZGVsTmFtZSIsImZyb21Db2x1bW5OYW1lIiwidG9Nb2RlbE5hbWUiLCJ0b0NvbHVtbk5hbWUiLCJjb2x1bW4iLCJkZXNjcmlwdGlvbiIsImNvbXBhY3RUYWJsZXMiLCJzZWxlY3RlZFRhYmxlcyIsImluY2x1ZGVzIiwibW9kZWxWYWx1ZXMiLCJjYWNoZWQiLCJyZWZyZXNoVGltZSIsImNyZWF0ZU1hbnkiLCJjb2x1bW5WYWx1ZXMiLCJmbGF0TWFwIiwiY29tcGFjdENvbHVtbnMiLCJwcmltYXJ5S2V5IiwiaXNDYWxjdWxhdGVkIiwibm90TnVsbCIsImlzUGsiLCJuZXN0ZWRDb2x1bW5WYWx1ZXMiLCJjb21wYWN0Q29sdW1uIiwiY29sdW1uSWQiLCJtb2RlbE5lc3RlZENvbHVtblJlcG9zaXRvcnkiLCJjb25jYXRJbml0U3FsIiwiaW5zdGFsbEV4dGVuc2lvbnMiLCJleHQiLCJqb2luIiwib3B0aW9ucyIsImluaXRTcWxXaXRoRXh0ZW5zaW9ucyIsIndyZW5FbmdpbmVBZGFwdG9yIiwicHJlcGFyZUR1Y2tEQiIsInNlc3Npb25Qcm9wcyIsImxpc3RUYWJsZXMiLCJwYXRjaENvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/resolvers/projectResolver.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/schema.ts":
/*!*************************************!*\
  !*** ./src/apollo/server/schema.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   typeDefs: () => (/* binding */ typeDefs)\n/* harmony export */ });\n/* harmony import */ var apollo_server_micro__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! apollo-server-micro */ \"apollo-server-micro\");\n/* harmony import */ var apollo_server_micro__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(apollo_server_micro__WEBPACK_IMPORTED_MODULE_0__);\n\nconst typeDefs = (0,apollo_server_micro__WEBPACK_IMPORTED_MODULE_0__.gql)`\n  scalar JSON\n\n  enum DataSourceName {\n    BIG_QUERY\n    DUCKDB\n    POSTGRES\n    MYSQL\n    MSSQL\n    CLICK_HOUSE\n    TRINO\n    SNOWFLAKE\n  }\n\n  enum ExpressionName {\n    ABS\n    AVG\n    COUNT\n    COUNT_IF\n    MAX\n    MIN\n    SUM\n    CBRT\n    CEIL\n    CEILING\n    EXP\n    FLOOR\n    LN\n    LOG10\n    ROUND\n    SIGN\n    LENGTH\n    REVERSE\n  }\n\n  enum SampleDatasetName {\n    HR\n    ECOMMERCE\n    NBA\n    MUSIC\n  }\n\n  enum SyncStatus {\n    IN_PROGRESS\n    SYNCRONIZED\n    UNSYNCRONIZED\n  }\n\n  enum SchemaChangeType {\n    DELETED_TABLES\n    DELETED_COLUMNS\n    MODIFIED_COLUMNS\n  }\n\n  enum ProjectLanguage {\n    EN\n    ES\n    FR\n    ZH_TW\n    ZH_CN\n    DE\n    PT\n    RU\n    JA\n    KO\n  }\n\n  type DataSource {\n    type: DataSourceName!\n    properties: JSON!\n    # Show the name if the data source setup comes from a sample\n    sampleDataset: SampleDatasetName\n  }\n\n  input WhereIdInput {\n    id: Int!\n  }\n\n  input DataSourceInput {\n    type: DataSourceName!\n    properties: JSON!\n  }\n\n  input SampleDatasetInput {\n    name: SampleDatasetName!\n  }\n\n  type CompactTable {\n    name: String!\n    columns: [CompactColumn!]!\n    properties: JSON\n  }\n\n  input MDLModelSubmitInput {\n    name: String!\n    columns: [String!]!\n  }\n\n  enum RelationType {\n    ONE_TO_ONE\n    ONE_TO_MANY\n    MANY_TO_ONE\n  }\n\n  enum OnboardingStatus {\n    NOT_STARTED\n    DATASOURCE_SAVED\n    ONBOARDING_FINISHED\n    WITH_SAMPLE_DATASET\n  }\n\n  enum NodeType {\n    MODEL\n    METRIC\n    VIEW\n    RELATION\n    FIELD\n    CALCULATED_FIELD\n  }\n\n  type Relation {\n    fromModelId: Int!\n    fromModelReferenceName: String!\n    fromColumnId: Int!\n    fromColumnReferenceName: String!\n    toModelId: Int!\n    toModelReferenceName: String!\n    toColumnId: Int!\n    toColumnReferenceName: String!\n    type: RelationType!\n    name: String!\n  }\n\n  type RecommendRelations {\n    id: Int!\n    displayName: String!\n    referenceName: String!\n    relations: [Relation]!\n  }\n\n  input RelationInput {\n    fromModelId: Int!\n    fromColumnId: Int!\n    toModelId: Int!\n    toColumnId: Int!\n    type: RelationType!\n  }\n\n  input UpdateRelationInput {\n    type: RelationType!\n  }\n\n  input SaveRelationInput {\n    relations: [RelationInput]!\n  }\n\n  input SaveTablesInput {\n    tables: [String!]!\n  }\n\n  type CompactColumn {\n    name: String!\n    type: String!\n    properties: JSON\n  }\n\n  input CustomFieldInput {\n    name: String!\n    expression: String!\n  }\n\n  input CalculatedFieldInput {\n    name: String!\n    expression: String!\n    lineage: [Int!]!\n    diagram: JSON\n  }\n\n  input CreateModelInput {\n    sourceTableName: String!\n    fields: [String!]!\n    primaryKey: String\n  }\n\n  input CreateCalculatedFieldInput {\n    modelId: Int!\n    name: String!\n    expression: ExpressionName!\n    lineage: [Int!]!\n  }\n\n  input UpdateCalculatedFieldInput {\n    name: String!\n    expression: ExpressionName!\n    lineage: [Int!]!\n  }\n\n  input UpdateCalculatedFieldWhere {\n    id: Int!\n  }\n\n  input ValidateCalculatedFieldInput {\n    name: String!\n    modelId: Int!\n    columnId: Int\n  }\n\n  type CalculatedFieldValidationResponse {\n    valid: Boolean!\n    message: String\n  }\n\n  input ModelWhereInput {\n    id: Int!\n  }\n\n  input UpdateModelInput {\n    fields: [String!]!\n    primaryKey: String\n  }\n\n  # Metadata related\n  input UpdateNestedColumnMetadataInput {\n    id: Int!\n    displayName: String\n    description: String\n  }\n\n  input UpdateColumnMetadataInput {\n    id: Int!\n    displayName: String\n    description: String\n  }\n\n  input UpdateCalculatedFieldMetadataInput {\n    id: Int!\n    description: String\n  }\n\n  input UpdateRelationshipMetadataInput {\n    id: Int!\n    description: String\n  }\n\n  input UpdateViewColumnMetadataInput {\n    referenceName: String!\n    description: String\n  }\n\n  input UpdateModelMetadataInput {\n    displayName: String # Model display name, i,e, the alias of the model\n    description: String # Model description\n    columns: [UpdateColumnMetadataInput!] # Update column metadata\n    nestedColumns: [UpdateNestedColumnMetadataInput!] # Update nested column metadata\n    calculatedFields: [UpdateCalculatedFieldMetadataInput!] # Update calculated field metadata\n    relationships: [UpdateRelationshipMetadataInput!] # Update relationship metadata\n  }\n\n  input UpdateViewMetadataInput {\n    displayName: String # View display name, i,e, the alias of the view\n    description: String # View description\n    columns: [UpdateViewColumnMetadataInput!]\n  }\n\n  type NestedFieldInfo {\n    id: Int!\n    displayName: String!\n    referenceName: String!\n    sourceColumnName: String!\n    columnPath: [String!]!\n    type: String!\n    properties: JSON!\n  }\n\n  type FieldInfo {\n    id: Int!\n    displayName: String!\n    referenceName: String!\n    sourceColumnName: String!\n    type: String\n    isCalculated: Boolean!\n    notNull: Boolean!\n    expression: String\n    properties: JSON\n    nestedColumns: [NestedFieldInfo!]\n  }\n\n  type ModelInfo {\n    id: Int!\n    displayName: String!\n    referenceName: String!\n    sourceTableName: String!\n    refSql: String\n    primaryKey: String\n    cached: Boolean!\n    refreshTime: String\n    description: String\n    fields: [FieldInfo]!\n    calculatedFields: [FieldInfo]!\n    properties: JSON\n  }\n\n  type DetailedNestedColumn {\n    id: Int!\n    displayName: String!\n    referenceName: String!\n    sourceColumnName: String!\n    columnPath: [String!]!\n    type: String\n    properties: JSON\n  }\n\n  type DetailedColumn {\n    displayName: String!\n    referenceName: String!\n    sourceColumnName: String!\n    type: String\n    isCalculated: Boolean!\n    notNull: Boolean!\n    properties: JSON!\n    nestedColumns: [DetailedNestedColumn!]\n  }\n\n  type DetailedRelation {\n    fromModelId: Int!\n    fromColumnId: Int!\n    toModelId: Int!\n    toColumnId: Int!\n    type: RelationType!\n    name: String!\n    properties: JSON!\n  }\n\n  type DetailedModel {\n    displayName: String!\n    referenceName: String!\n    sourceTableName: String!\n    refSql: String!\n    primaryKey: String\n    cached: Boolean!\n    refreshTime: String\n    description: String\n    fields: [DetailedColumn]\n    calculatedFields: [DetailedColumn]\n    relations: [DetailedRelation]\n    properties: JSON!\n  }\n\n  # View\n  type ViewInfo {\n    id: Int!\n    name: String!\n    statement: String!\n    displayName: String!\n  }\n\n  input ViewWhereUniqueInput {\n    id: Int!\n  }\n\n  input PreviewViewDataInput {\n    id: Int!\n    # It will return default 500 rows if not specified limit\n    # refer: DEFAULT_PREVIEW_LIMIT\n    limit: Int\n  }\n\n  input CreateViewInput {\n    name: String!\n    responseId: Int!\n  }\n\n  input ValidateViewInput {\n    name: String!\n  }\n\n  type ViewValidationResponse {\n    valid: Boolean!\n    message: String\n  }\n\n  # onboarding\n  type OnboardingStatusResponse {\n    status: OnboardingStatus\n  }\n\n  type ModelSyncResponse {\n    status: SyncStatus!\n  }\n\n  type Diagram {\n    models: [DiagramModel]!\n    views: [DiagramView]!\n  }\n\n  type DiagramView {\n    id: String!\n    viewId: Int!\n    nodeType: NodeType!\n    statement: String!\n    displayName: String!\n    referenceName: String!\n    fields: [DiagramViewField]!\n    description: String\n  }\n\n  type DiagramViewField {\n    id: String!\n    displayName: String!\n    referenceName: String!\n    type: String!\n    nodeType: NodeType!\n    description: String\n  }\n\n  type DiagramModel {\n    id: String!\n    modelId: Int!\n    nodeType: NodeType!\n    displayName: String!\n    referenceName: String!\n    sourceTableName: String!\n    refSql: String\n    cached: Boolean!\n    refreshTime: String\n    description: String\n    fields: [DiagramModelField]!\n    calculatedFields: [DiagramModelField]!\n    relationFields: [DiagramModelRelationField]!\n  }\n\n  type DiagramModelNestedField {\n    id: String!\n    nestedColumnId: Int!\n    displayName: String!\n    referenceName: String!\n    columnPath: [String!]!\n    type: String!\n    description: String\n  }\n\n  type DiagramModelField {\n    id: String!\n    columnId: Int!\n    nodeType: NodeType!\n    type: String!\n    displayName: String!\n    referenceName: String!\n    description: String\n    isPrimaryKey: Boolean!\n    expression: String\n    aggregation: String\n    lineage: [Int!]\n    nestedFields: [DiagramModelNestedField!]\n  }\n\n  type DiagramModelRelationField {\n    id: String!\n    relationId: Int!\n    nodeType: NodeType!\n    type: RelationType!\n    displayName: String!\n    referenceName: String!\n    description: String\n    fromModelId: Int!\n    fromModelName: String!\n    fromModelDisplayName: String!\n    fromColumnId: Int!\n    fromColumnName: String!\n    fromColumnDisplayName: String!\n    toModelId: Int!\n    toModelName: String!\n    toModelDisplayName: String!\n    toColumnId: Int!\n    toColumnName: String!\n    toColumnDisplayName: String!\n  }\n\n  input SimpleMeasureInput {\n    name: String!\n    type: String!\n    isCalculated: Boolean!\n    notNull: Boolean!\n    properties: JSON!\n  }\n\n  input DimensionInput {\n    name: String!\n    type: String!\n    isCalculated: Boolean!\n    notNull: Boolean!\n    properties: JSON!\n  }\n\n  input TimeGrainInput {\n    name: String!\n    refColumn: String!\n    dateParts: [String!]!\n  }\n\n  input CreateSimpleMetricInput {\n    name: String!\n    displayName: String!\n    description: String\n    cached: Boolean!\n    refreshTime: String\n    model: String!\n    properties: JSON!\n    measure: [SimpleMeasureInput!]!\n    dimension: [DimensionInput!]!\n    timeGrain: [TimeGrainInput!]!\n  }\n\n  # Task\n  type Task {\n    id: String!\n  }\n\n  # Error\n  type Error {\n    code: String\n    shortMessage: String\n    message: String\n    stacktrace: [String]\n  }\n\n  # Asking Task\n  input AskingTaskInput {\n    question: String!\n    # Used for follow-up questions\n    threadId: Int\n  }\n\n  enum AskingTaskStatus {\n    UNDERSTANDING\n    SEARCHING\n    PLANNING\n    GENERATING\n    CORRECTING\n    FINISHED\n    FAILED\n    STOPPED\n  }\n\n  enum AskingTaskType {\n    GENERAL\n    TEXT_TO_SQL\n    MISLEADING_QUERY\n  }\n\n  enum ChartTaskStatus {\n    FETCHING\n    GENERATING\n    FINISHED\n    FAILED\n    STOPPED\n  }\n\n  enum ChartType {\n    BAR\n    PIE\n    LINE\n    MULTI_LINE\n    AREA\n    GROUPED_BAR\n    STACKED_BAR\n  }\n\n  enum ResultCandidateType {\n    VIEW # View type candidate is provided basd on a saved view\n    LLM # LLM type candidate is created by LLM\n  }\n\n  type ResultCandidate {\n    type: ResultCandidateType!\n    sql: String!\n    view: ViewInfo\n  }\n\n  type AskingTask {\n    status: AskingTaskStatus!\n    type: AskingTaskType\n    error: Error\n    candidates: [ResultCandidate!]!\n    intentReasoning: String\n  }\n\n  input InstantRecommendedQuestionsInput {\n    previousQuestions: [String!]\n  }\n\n  enum RecommendedQuestionsTaskStatus {\n    NOT_STARTED\n    GENERATING\n    FINISHED\n    FAILED\n  }\n\n  type ResultQuestion {\n    question: String!\n    category: String!\n    sql: String!\n  }\n\n  type RecommendedQuestionsTask {\n    status: RecommendedQuestionsTaskStatus!\n    questions: [ResultQuestion!]!\n    error: Error\n  }\n\n  # Thread\n  input CreateThreadInput {\n    question: String\n    sql: String\n    viewId: Int\n  }\n\n  input CreateThreadResponseInput {\n    question: String\n    sql: String\n    viewId: Int\n  }\n\n  input ThreadUniqueWhereInput {\n    id: Int!\n  }\n\n  input UpdateThreadInput {\n    summary: String\n  }\n\n  input AdjustThreadResponseChartInput {\n    chartType: ChartType!\n    xAxis: String\n    yAxis: String\n    xOffset: String\n    color: String\n    theta: String\n  }\n\n  input PreviewDataInput {\n    responseId: Int!\n    # Optional, only used for preview data of a single step\n    stepIndex: Int\n    # It will return default 500 rows if not specified limit\n    # refer: DEFAULT_PREVIEW_LIMIT\n    limit: Int\n  }\n\n  type DetailStep {\n    summary: String!\n    sql: String!\n    cteName: String\n  }\n\n  enum ThreadResponseAnswerStatus {\n    NOT_STARTED\n    FETCHING_DATA\n    PREPROCESSING\n    STREAMING\n    FINISHED\n    FAILED\n    INTERRUPTED\n  }\n\n  type ThreadResponseAnswerDetail {\n    queryId: String\n    status: ThreadResponseAnswerStatus\n    error: Error\n    numRowsUsedInLLM: Int\n    content: String\n  }\n\n  type ThreadResponseBreakdownDetail {\n    queryId: String\n    status: AskingTaskStatus!\n    error: Error\n    description: String\n    steps: [DetailStep!]\n  }\n\n  type ThreadResponseChartDetail {\n    queryId: String\n    status: ChartTaskStatus!\n    error: Error\n    description: String\n    chartType: ChartType\n    chartSchema: JSON\n    adjustment: Boolean\n  }\n\n  type ThreadResponse {\n    id: Int!\n    threadId: Int!\n    question: String!\n    sql: String!\n    view: ViewInfo\n    breakdownDetail: ThreadResponseBreakdownDetail\n    answerDetail: ThreadResponseAnswerDetail\n    chartDetail: ThreadResponseChartDetail\n  }\n\n  # Thread only consists of basic information of a thread\n  type Thread {\n    id: Int!\n    summary: String!\n  }\n\n  # Detailed thread consists of thread and thread responses\n  type DetailedThread {\n    id: Int!\n    responses: [ThreadResponse!]!\n  }\n\n  type SuggestedQuestion {\n    question: String!\n    label: String!\n  }\n  # Ask Questions Responses\n  type SuggestedQuestionResponse {\n    questions: [SuggestedQuestion]!\n  }\n\n  # Settings\n  input UpdateDataSourceInput {\n    properties: JSON!\n  }\n\n  input UpdateCurrentProjectInput {\n    language: ProjectLanguage!\n  }\n\n  type Settings {\n    productVersion: String!\n    dataSource: DataSource!\n    language: ProjectLanguage!\n  }\n\n  type GetMDLResult {\n    hash: String!\n    mdl: String\n  }\n\n  input PreviewSQLDataInput {\n    sql: String!\n    projectId: Int\n    limit: Int\n    dryRun: Boolean\n  }\n\n  # Schema Change\n  type SchemaChange {\n    deletedTables: [DetailedChangeTable!]\n    deletedColumns: [DetailedChangeTable!]\n    modifiedColumns: [DetailedChangeTable!]\n    lastSchemaChangeTime: String\n  }\n\n  type DetailedChangeTable {\n    sourceTableName: String!\n    displayName: String!\n    columns: [DetailedChangeColumn!]!\n    calculatedFields: [DetailedAffectedCalculatedFields!]!\n    relationships: [DetailedAffectedRelationships!]!\n  }\n\n  type DetailedChangeColumn {\n    sourceColumnName: String!\n    displayName: String!\n    type: String!\n  }\n\n  type DetailedAffectedCalculatedFields {\n    displayName: String!\n    referenceName: String!\n    type: String!\n  }\n\n  type DetailedAffectedRelationships {\n    displayName: String!\n    referenceName: String!\n  }\n\n  input ResolveSchemaChangeWhereInput {\n    type: SchemaChangeType!\n  }\n\n  # Learning\n  type LearningRecord {\n    paths: [String!]!\n  }\n\n  input SaveLearningRecordInput {\n    path: String!\n  }\n\n  # Dashboard\n  enum DashboardItemType {\n    BAR\n    PIE\n    LINE\n    MULTI_LINE\n    AREA\n    GROUPED_BAR\n    STACKED_BAR\n    TABLE\n    NUMBER\n  }\n\n  input DashboardItemWhereInput {\n    id: Int!\n  }\n\n  input CreateDashboardItemInput {\n    itemType: DashboardItemType!\n    responseId: Int!\n  }\n\n  input ItemLayoutInput {\n    itemId: Int!\n    x: Int!\n    y: Int!\n    w: Int!\n    h: Int!\n  }\n\n  input UpdateDashboardItemLayoutsInput {\n    layouts: [ItemLayoutInput!]!\n  }\n\n  input DeleteDashboardItemInput {\n    itemId: Int!\n  }\n\n  input PreviewItemSQLInput {\n    itemId: Int!\n    limit: Int\n  }\n\n  type DashboardItemLayout {\n    x: Int!\n    y: Int!\n    w: Int!\n    h: Int!\n  }\n\n  type DashboardItemDetail {\n    sql: String!\n    chartSchema: JSON\n  }\n\n  type DashboardItem {\n    id: Int!\n    dashboardId: Int!\n    type: DashboardItemType!\n    layout: DashboardItemLayout!\n    detail: DashboardItemDetail!\n  }\n\n  # Query and Mutation\n  type Query {\n    # On Boarding Steps\n    listDataSourceTables: [CompactTable!]!\n    autoGenerateRelation: [RecommendRelations!]!\n    onboardingStatus: OnboardingStatusResponse!\n\n    # Modeling Page\n    listModels: [ModelInfo!]!\n    model(where: ModelWhereInput!): DetailedModel!\n    modelSync: ModelSyncResponse!\n    diagram: Diagram!\n    schemaChange: SchemaChange!\n\n    # View\n    listViews: [ViewInfo!]!\n    view(where: ViewWhereUniqueInput!): ViewInfo!\n\n    # Ask\n    askingTask(taskId: String!): AskingTask!\n    suggestedQuestions: SuggestedQuestionResponse!\n    threads: [Thread!]!\n    thread(threadId: Int!): DetailedThread!\n    threadResponse(responseId: Int!): ThreadResponse!\n    nativeSql(responseId: Int!): String!\n\n    # Settings\n    settings: Settings!\n\n    # System\n    getMDL(hash: String!): GetMDLResult!\n\n    # Learning\n    learningRecord: LearningRecord!\n\n    # Recommendation questions\n    getThreadRecommendationQuestions(threadId: Int!): RecommendedQuestionsTask!\n    getProjectRecommendationQuestions: RecommendedQuestionsTask!\n    instantRecommendedQuestions(taskId: String!): RecommendedQuestionsTask!\n\n    # Dashboard\n    dashboardItems: [DashboardItem!]!\n  }\n\n  type Mutation {\n    # On Boarding Steps\n    saveDataSource(data: DataSourceInput!): DataSource!\n    startSampleDataset(data: SampleDatasetInput!): JSON!\n    saveTables(data: SaveTablesInput!): JSON!\n    saveRelations(data: SaveRelationInput!): JSON!\n    deploy(force: Boolean): JSON!\n\n    # Modeling Page\n    createModel(data: CreateModelInput!): JSON!\n    updateModel(where: ModelWhereInput!, data: UpdateModelInput!): JSON!\n    deleteModel(where: ModelWhereInput!): Boolean!\n    previewModelData(where: WhereIdInput!): JSON!\n    triggerDataSourceDetection: Boolean!\n    resolveSchemaChange(where: ResolveSchemaChangeWhereInput!): Boolean!\n\n    # Metadata\n    updateModelMetadata(\n      where: ModelWhereInput!\n      data: UpdateModelMetadataInput!\n    ): Boolean!\n    updateViewMetadata(\n      where: ViewWhereUniqueInput!\n      data: UpdateViewMetadataInput!\n    ): Boolean!\n\n    # Relation\n    createRelation(data: RelationInput!): JSON!\n    updateRelation(data: UpdateRelationInput!, where: WhereIdInput!): JSON!\n    deleteRelation(where: WhereIdInput!): Boolean!\n\n    # Calculated field\n    createCalculatedField(data: CreateCalculatedFieldInput!): JSON!\n    updateCalculatedField(\n      where: UpdateCalculatedFieldWhere!\n      data: UpdateCalculatedFieldInput!\n    ): JSON!\n    deleteCalculatedField(where: UpdateCalculatedFieldWhere): Boolean!\n    validateCalculatedField(\n      data: ValidateCalculatedFieldInput!\n    ): CalculatedFieldValidationResponse!\n\n    # View\n    createView(data: CreateViewInput!): ViewInfo!\n    deleteView(where: ViewWhereUniqueInput!): Boolean!\n    previewViewData(where: PreviewViewDataInput!): JSON!\n    validateView(data: ValidateViewInput!): ViewValidationResponse!\n\n    # Ask\n    createAskingTask(data: AskingTaskInput!): Task!\n    cancelAskingTask(taskId: String!): Boolean!\n\n    # Thread\n    createThread(data: CreateThreadInput!): Thread!\n    updateThread(\n      where: ThreadUniqueWhereInput!\n      data: UpdateThreadInput!\n    ): Thread!\n    deleteThread(where: ThreadUniqueWhereInput!): Boolean!\n\n    # Thread Response\n    createThreadResponse(\n      threadId: Int!\n      data: CreateThreadResponseInput!\n    ): ThreadResponse!\n    previewData(where: PreviewDataInput!): JSON!\n    previewBreakdownData(where: PreviewDataInput!): JSON!\n\n    # Generate Thread Response Breakdown\n    generateThreadResponseBreakdown(responseId: Int!): ThreadResponse!\n\n    # Generate Thread Response Answer\n    generateThreadResponseAnswer(responseId: Int!): ThreadResponse!\n\n    # Generate Thread Response Chart\n    generateThreadResponseChart(responseId: Int!): ThreadResponse!\n\n    # Adjust Thread Response Chart\n    adjustThreadResponseChart(\n      responseId: Int!\n      data: AdjustThreadResponseChartInput!\n    ): ThreadResponse!\n\n    # Settings\n    resetCurrentProject: Boolean!\n    updateCurrentProject(data: UpdateCurrentProjectInput!): Boolean!\n    updateDataSource(data: UpdateDataSourceInput!): DataSource!\n\n    # preview\n    previewSql(data: PreviewSQLDataInput): JSON!\n\n    # Learning\n    saveLearningRecord(data: SaveLearningRecordInput!): LearningRecord!\n\n    # Recommendation questions\n    generateThreadRecommendationQuestions(threadId: Int!): Boolean!\n    generateProjectRecommendationQuestions: Boolean!\n    createInstantRecommendedQuestions(\n      data: InstantRecommendedQuestionsInput!\n    ): Task!\n\n    # Dashboard\n    updateDashboardItemLayouts(\n      data: UpdateDashboardItemLayoutsInput!\n    ): [DashboardItem!]!\n    createDashboardItem(data: CreateDashboardItemInput!): DashboardItem!\n    deleteDashboardItem(where: DashboardItemWhereInput!): Boolean!\n    previewItemSQL(data: PreviewItemSQLInput!): JSON!\n  }\n`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/schema.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/askingService.ts":
/*!*****************************************************!*\
  !*** ./src/apollo/server/services/askingService.ts ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AskingService: () => (/* binding */ AskingService),\n/* harmony export */   RecommendQuestionResultStatus: () => (/* binding */ RecommendQuestionResultStatus),\n/* harmony export */   ThreadResponseAnswerStatus: () => (/* binding */ ThreadResponseAnswerStatus),\n/* harmony export */   constructCteSql: () => (/* binding */ constructCteSql)\n/* harmony export */ });\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEmpty */ \"lodash/isEmpty\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isNil */ \"lodash/isNil\");\n/* harmony import */ var lodash_isNil__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isNil__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var sql_formatter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sql-formatter */ \"sql-formatter\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\n/* harmony import */ var _backgrounds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../backgrounds */ \"(api)/./src/apollo/server/backgrounds/index.ts\");\n/* harmony import */ var _server_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @server/config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _backgrounds_textBasedAnswerBackgroundTracker__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../backgrounds/textBasedAnswerBackgroundTracker */ \"(api)/./src/apollo/server/backgrounds/textBasedAnswerBackgroundTracker.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([sql_formatter__WEBPACK_IMPORTED_MODULE_4__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__, _backgrounds__WEBPACK_IMPORTED_MODULE_6__, _backgrounds_textBasedAnswerBackgroundTracker__WEBPACK_IMPORTED_MODULE_8__]);\n([sql_formatter__WEBPACK_IMPORTED_MODULE_4__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__, _backgrounds__WEBPACK_IMPORTED_MODULE_6__, _backgrounds_textBasedAnswerBackgroundTracker__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\nconst config = (0,_server_config__WEBPACK_IMPORTED_MODULE_7__.getConfig)();\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"AskingService\");\nlogger.level = \"debug\";\nvar RecommendQuestionResultStatus;\n(function(RecommendQuestionResultStatus) {\n    RecommendQuestionResultStatus[\"NOT_STARTED\"] = \"NOT_STARTED\";\n    RecommendQuestionResultStatus[\"GENERATING\"] = \"GENERATING\";\n    RecommendQuestionResultStatus[\"FINISHED\"] = \"FINISHED\";\n    RecommendQuestionResultStatus[\"FAILED\"] = \"FAILED\";\n})(RecommendQuestionResultStatus || (RecommendQuestionResultStatus = {}));\nvar ThreadResponseAnswerStatus;\n(function(ThreadResponseAnswerStatus) {\n    ThreadResponseAnswerStatus[\"NOT_STARTED\"] = \"NOT_STARTED\";\n    ThreadResponseAnswerStatus[\"FETCHING_DATA\"] = \"FETCHING_DATA\";\n    ThreadResponseAnswerStatus[\"PREPROCESSING\"] = \"PREPROCESSING\";\n    ThreadResponseAnswerStatus[\"STREAMING\"] = \"STREAMING\";\n    ThreadResponseAnswerStatus[\"FINISHED\"] = \"FINISHED\";\n    ThreadResponseAnswerStatus[\"FAILED\"] = \"FAILED\";\n    ThreadResponseAnswerStatus[\"INTERRUPTED\"] = \"INTERRUPTED\";\n})(ThreadResponseAnswerStatus || (ThreadResponseAnswerStatus = {}));\n/**\n * utility function to check if the status is finalized\n */ const isFinalized = (status)=>{\n    return status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.FAILED || status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.FINISHED || status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.STOPPED;\n};\n/**\n * Given a list of steps, construct the SQL statement with CTEs\n * If stepIndex is provided, only construct the SQL from top to that step\n * @param steps\n * @param stepIndex\n * @returns string\n */ const constructCteSql = (steps, stepIndex)=>{\n    // validate stepIndex\n    if (!lodash_isNil__WEBPACK_IMPORTED_MODULE_3___default()(stepIndex) && (stepIndex < 0 || stepIndex >= steps.length)) {\n        throw new Error(`Invalid stepIndex: ${stepIndex}`);\n    }\n    const slicedSteps = lodash_isNil__WEBPACK_IMPORTED_MODULE_3___default()(stepIndex) ? steps : steps.slice(0, stepIndex + 1);\n    // if there's only one step, return the sql directly\n    if (slicedSteps.length === 1) {\n        return `-- ${slicedSteps[0].summary}\\n${slicedSteps[0].sql}`;\n    }\n    let sql = \"WITH \";\n    slicedSteps.forEach((step, index)=>{\n        if (index === slicedSteps.length - 1) {\n            // if it's the last step, remove the trailing comma.\n            // no need to wrap with WITH\n            sql += `\\n-- ${step.summary}\\n`;\n            sql += `${step.sql}`;\n        } else if (index === slicedSteps.length - 2) {\n            // if it's the last two steps, remove the trailing comma.\n            // wrap with CTE\n            sql += `${step.cteName} AS`;\n            sql += `\\n-- ${step.summary}\\n`;\n            sql += `(${step.sql})`;\n        } else {\n            // if it's not the last step, wrap with CTE\n            sql += `${step.cteName} AS`;\n            sql += `\\n-- ${step.summary}\\n`;\n            sql += `(${step.sql}),`;\n        }\n    });\n    return sql;\n};\n/**\n * Background tracker to track the status of the asking breakdown task\n */ class BreakdownBackgroundTracker {\n    constructor({ telemetry, wrenAIAdaptor, threadResponseRepository }){\n        // tasks is a kv pair of task id and thread response\n        this.tasks = {};\n        this.runningJobs = new Set();\n        this.telemetry = telemetry;\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.threadResponseRepository = threadResponseRepository;\n        this.intervalTime = 1000;\n        this.start();\n    }\n    start() {\n        logger.info(\"Background tracker started\");\n        setInterval(()=>{\n            const jobs = Object.values(this.tasks).map((threadResponse)=>async ()=>{\n                    // check if same job is running\n                    if (this.runningJobs.has(threadResponse.id)) {\n                        return;\n                    }\n                    // mark the job as running\n                    this.runningJobs.add(threadResponse.id);\n                    // get the answer detail\n                    const breakdownDetail = threadResponse.breakdownDetail;\n                    // get the latest result from AI service\n                    const result = await this.wrenAIAdaptor.getAskDetailResult(breakdownDetail.queryId);\n                    // check if status change\n                    if (breakdownDetail.status === result.status) {\n                        // mark the job as finished\n                        logger.debug(`Job ${threadResponse.id} status not changed, finished`);\n                        this.runningJobs.delete(threadResponse.id);\n                        return;\n                    }\n                    // update database\n                    const updatedBreakdownDetail = {\n                        queryId: breakdownDetail.queryId,\n                        status: result?.status,\n                        error: result?.error,\n                        description: result?.response?.description,\n                        steps: result?.response?.steps\n                    };\n                    logger.debug(`Job ${threadResponse.id} status changed, updating`);\n                    await this.threadResponseRepository.updateOne(threadResponse.id, {\n                        breakdownDetail: updatedBreakdownDetail\n                    });\n                    // remove the task from tracker if it is finalized\n                    if (isFinalized(result.status)) {\n                        const eventProperties = {\n                            question: threadResponse.question,\n                            error: result.error\n                        };\n                        if (result.status === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.FINISHED) {\n                            this.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.TelemetryEvent.HOME_ANSWER_BREAKDOWN, eventProperties);\n                        } else {\n                            this.telemetry.sendEvent(_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.TelemetryEvent.HOME_ANSWER_BREAKDOWN, eventProperties, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.WrenService.AI, false);\n                        }\n                        logger.debug(`Job ${threadResponse.id} is finalized, removing`);\n                        delete this.tasks[threadResponse.id];\n                    }\n                    // mark the job as finished\n                    this.runningJobs.delete(threadResponse.id);\n                });\n            // run the jobs\n            Promise.allSettled(jobs.map((job)=>job())).then((results)=>{\n                // show reason of rejection\n                results.forEach((result, index)=>{\n                    if (result.status === \"rejected\") {\n                        logger.error(`Job ${index} failed: ${result.reason}`);\n                    }\n                });\n            });\n        }, this.intervalTime);\n    }\n    addTask(threadResponse) {\n        this.tasks[threadResponse.id] = threadResponse;\n    }\n    getTasks() {\n        return this.tasks;\n    }\n}\nclass AskingService {\n    constructor({ telemetry, wrenAIAdaptor, deployService, projectService, viewRepository, threadRepository, threadResponseRepository, queryService, mdlService }){\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.deployService = deployService;\n        this.projectService = projectService;\n        this.viewRepository = viewRepository;\n        this.threadRepository = threadRepository;\n        this.threadResponseRepository = threadResponseRepository;\n        this.telemetry = telemetry;\n        this.queryService = queryService;\n        this.breakdownBackgroundTracker = new BreakdownBackgroundTracker({\n            telemetry,\n            wrenAIAdaptor,\n            threadResponseRepository\n        });\n        this.textBasedAnswerBackgroundTracker = new _backgrounds_textBasedAnswerBackgroundTracker__WEBPACK_IMPORTED_MODULE_8__.TextBasedAnswerBackgroundTracker({\n            wrenAIAdaptor,\n            threadResponseRepository,\n            projectService,\n            deployService,\n            queryService\n        });\n        this.chartBackgroundTracker = new _backgrounds__WEBPACK_IMPORTED_MODULE_6__.ChartBackgroundTracker({\n            telemetry,\n            wrenAIAdaptor,\n            threadResponseRepository\n        });\n        this.chartAdjustmentBackgroundTracker = new _backgrounds__WEBPACK_IMPORTED_MODULE_6__.ChartAdjustmentBackgroundTracker({\n            telemetry,\n            wrenAIAdaptor,\n            threadResponseRepository\n        });\n        this.threadRecommendQuestionBackgroundTracker = new _backgrounds__WEBPACK_IMPORTED_MODULE_6__.ThreadRecommendQuestionBackgroundTracker({\n            telemetry,\n            wrenAIAdaptor,\n            threadRepository\n        });\n        this.mdlService = mdlService;\n    }\n    async getThreadRecommendationQuestions(threadId) {\n        const thread = await this.threadRepository.findOneBy({\n            id: threadId\n        });\n        if (!thread) {\n            throw new Error(`Thread ${threadId} not found`);\n        }\n        // handle not started\n        const res = {\n            status: \"NOT_STARTED\",\n            questions: [],\n            error: null\n        };\n        if (thread.queryId && thread.questionsStatus) {\n            res.status = RecommendQuestionResultStatus[thread.questionsStatus] ? RecommendQuestionResultStatus[thread.questionsStatus] : res.status;\n            res.questions = thread.questions || [];\n            res.error = thread.questionsError;\n        }\n        return res;\n    }\n    async generateThreadRecommendationQuestions(threadId) {\n        const thread = await this.threadRepository.findOneBy({\n            id: threadId\n        });\n        if (!thread) {\n            throw new Error(`Thread ${threadId} not found`);\n        }\n        if (this.threadRecommendQuestionBackgroundTracker.isExist(thread)) {\n            logger.debug(`thread \"${threadId}\" recommended questions are generating, skip the current request`);\n            return;\n        }\n        const project = await this.projectService.getCurrentProject();\n        const { manifest } = await this.mdlService.makeCurrentModelMDL();\n        const threadResponses = await this.threadResponseRepository.findAllBy({\n            threadId\n        });\n        // descending order and get the latest 5\n        const slicedThreadResponses = threadResponses.sort((a, b)=>b.id - a.id).slice(0, 5);\n        const questions = slicedThreadResponses.map(({ question })=>question);\n        const recommendQuestionData = {\n            manifest,\n            previousQuestions: questions,\n            ...this.getThreadRecommendationQuestionsConfig(project)\n        };\n        const result = await this.wrenAIAdaptor.generateRecommendationQuestions(recommendQuestionData);\n        // reset thread recommended questions\n        const updatedThread = await this.threadRepository.updateOne(threadId, {\n            queryId: result.queryId,\n            questionsStatus: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.RecommendationQuestionStatus.GENERATING,\n            questions: [],\n            questionsError: null\n        });\n        this.threadRecommendQuestionBackgroundTracker.addTask(updatedThread);\n        return;\n    }\n    async initialize() {\n        // list thread responses from database\n        // filter status not finalized and put them into background tracker\n        const threadResponses = await this.threadResponseRepository.findAll();\n        const unfininshedBreakdownThreadResponses = threadResponses.filter((threadResponse)=>threadResponse?.breakdownDetail?.status && !isFinalized(threadResponse?.breakdownDetail?.status));\n        logger.info(`Initialization: adding unfininshed breakdown thread responses (total: ${unfininshedBreakdownThreadResponses.length}) to background tracker`);\n        for (const threadResponse of unfininshedBreakdownThreadResponses){\n            this.breakdownBackgroundTracker.addTask(threadResponse);\n        }\n    }\n    /**\n   * Asking task.\n   */ async createAskingTask(input, payload) {\n        const { threadId, language } = payload;\n        const deployId = await this.getDeployId();\n        // if it's a follow-up question, then the input will have a threadId\n        // then use the threadId to get the sql and get the steps of last thread response\n        // construct it into AskHistory and pass to ask\n        const history = threadId ? await this.getHistory(threadId) : null;\n        const response = await this.wrenAIAdaptor.ask({\n            query: input.question,\n            history,\n            deployId,\n            configurations: {\n                language\n            }\n        });\n        return {\n            id: response.queryId\n        };\n    }\n    async cancelAskingTask(taskId) {\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.TelemetryEvent.HOME_CANCEL_ASK;\n        try {\n            await this.wrenAIAdaptor.cancelAsk(taskId);\n            this.telemetry.sendEvent(eventName, {});\n        } catch (err) {\n            this.telemetry.sendEvent(eventName, {}, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async getAskingTask(taskId) {\n        return this.wrenAIAdaptor.getAskResult(taskId);\n    }\n    /**\n   * Asking detail task.\n   * The process of creating a thread is as follows:\n   * If input contains a viewId, simply create a thread from saved properties of the view.\n   * Otherwise, create a task on AI service to generate the detail.\n   * 1. create a task on AI service to generate the detail\n   * 2. create a thread and the first thread response with question and sql\n   */ async createThread(input) {\n        // if input contains a viewId, simply create a thread from saved properties of the view\n        if (input.viewId) {\n            return this.createThreadFromView(input);\n        }\n        // 1. create a thread and the first thread response\n        const { id } = await this.projectService.getCurrentProject();\n        const thread = await this.threadRepository.createOne({\n            projectId: id,\n            summary: input.question\n        });\n        await this.threadResponseRepository.createOne({\n            threadId: thread.id,\n            question: input.question,\n            sql: input.sql\n        });\n        // return the task id\n        return thread;\n    }\n    async listThreads() {\n        const { id } = await this.projectService.getCurrentProject();\n        return await this.threadRepository.listAllTimeDescOrder(id);\n    }\n    async updateThread(threadId, input) {\n        // if input is empty, throw error\n        if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_2___default()(input)) {\n            throw new Error(\"Update thread input is empty\");\n        }\n        return this.threadRepository.updateOne(threadId, {\n            summary: input.summary\n        });\n    }\n    async deleteThread(threadId) {\n        await this.threadRepository.deleteOne(threadId);\n    }\n    async createThreadResponse(input, threadId) {\n        const thread = await this.threadRepository.findOneBy({\n            id: threadId\n        });\n        if (!thread) {\n            throw new Error(`Thread ${threadId} not found`);\n        }\n        // if input contains a viewId, simply create a thread from saved properties of the view\n        if (input.viewId) {\n            const view = await this.viewRepository.findOneBy({\n                id: input.viewId\n            });\n            if (!view) {\n                throw new Error(`View ${input.viewId} not found`);\n            }\n            const res = await this.createThreadResponseFromView(input.question, view.statement, view, thread);\n            return res;\n        }\n        const threadResponse = await this.threadResponseRepository.createOne({\n            threadId: thread.id,\n            question: input.question,\n            sql: input.sql\n        });\n        return threadResponse;\n    }\n    async generateThreadResponseBreakdown(threadResponseId, configurations) {\n        const { language } = configurations;\n        const threadResponse = await this.threadResponseRepository.findOneBy({\n            id: threadResponseId\n        });\n        if (!threadResponse) {\n            throw new Error(`Thread response ${threadResponseId} not found`);\n        }\n        // 1. create a task on AI service to generate the detail\n        const response = await this.wrenAIAdaptor.generateAskDetail({\n            query: threadResponse.question,\n            sql: threadResponse.sql,\n            configurations: {\n                language\n            }\n        });\n        // 2. update the thread response with breakdown detail\n        const updatedThreadResponse = await this.threadResponseRepository.updateOne(threadResponse.id, {\n            breakdownDetail: {\n                queryId: response.queryId,\n                status: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.AskResultStatus.UNDERSTANDING\n            }\n        });\n        // 3. put the task into background tracker\n        this.breakdownBackgroundTracker.addTask(updatedThreadResponse);\n        // return the task id\n        return updatedThreadResponse;\n    }\n    async generateThreadResponseAnswer(threadResponseId) {\n        const threadResponse = await this.threadResponseRepository.findOneBy({\n            id: threadResponseId\n        });\n        if (!threadResponse) {\n            throw new Error(`Thread response ${threadResponseId} not found`);\n        }\n        // update with initial status\n        const updatedThreadResponse = await this.threadResponseRepository.updateOne(threadResponse.id, {\n            answerDetail: {\n                status: \"NOT_STARTED\"\n            }\n        });\n        // put the task into background tracker\n        this.textBasedAnswerBackgroundTracker.addTask(updatedThreadResponse);\n        return updatedThreadResponse;\n    }\n    async generateThreadResponseChart(threadResponseId, configurations) {\n        const threadResponse = await this.threadResponseRepository.findOneBy({\n            id: threadResponseId\n        });\n        if (!threadResponse) {\n            throw new Error(`Thread response ${threadResponseId} not found`);\n        }\n        // 1. create a task on AI service to generate the chart\n        const response = await this.wrenAIAdaptor.generateChart({\n            query: threadResponse.question,\n            sql: threadResponse.sql,\n            configurations\n        });\n        // 2. update the thread response with chart detail\n        const updatedThreadResponse = await this.threadResponseRepository.updateOne(threadResponse.id, {\n            chartDetail: {\n                queryId: response.queryId,\n                status: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.FETCHING\n            }\n        });\n        // 3. put the task into background tracker\n        this.chartBackgroundTracker.addTask(updatedThreadResponse);\n        return updatedThreadResponse;\n    }\n    async adjustThreadResponseChart(threadResponseId, input, configurations) {\n        const threadResponse = await this.threadResponseRepository.findOneBy({\n            id: threadResponseId\n        });\n        if (!threadResponse) {\n            throw new Error(`Thread response ${threadResponseId} not found`);\n        }\n        // 1. create a task on AI service to adjust the chart\n        const response = await this.wrenAIAdaptor.adjustChart({\n            query: threadResponse.question,\n            sql: threadResponse.sql,\n            adjustmentOption: input,\n            chartSchema: threadResponse.chartDetail?.chartSchema,\n            configurations\n        });\n        // 2. update the thread response with chart detail\n        const updatedThreadResponse = await this.threadResponseRepository.updateOne(threadResponse.id, {\n            chartDetail: {\n                queryId: response.queryId,\n                status: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.ChartStatus.FETCHING,\n                adjustment: true\n            }\n        });\n        // 3. put the task into background tracker\n        this.chartAdjustmentBackgroundTracker.addTask(updatedThreadResponse);\n        return updatedThreadResponse;\n    }\n    async getResponsesWithThread(threadId) {\n        return this.threadResponseRepository.getResponsesWithThread(threadId);\n    }\n    async getResponse(responseId) {\n        return this.threadResponseRepository.findOneBy({\n            id: responseId\n        });\n    }\n    async previewData(responseId, limit) {\n        const response = await this.getResponse(responseId);\n        if (!response) {\n            throw new Error(`Thread response ${responseId} not found`);\n        }\n        const project = await this.projectService.getCurrentProject();\n        const deployment = await this.deployService.getLastDeployment(project.id);\n        const mdl = deployment.manifest;\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.TelemetryEvent.HOME_PREVIEW_ANSWER;\n        try {\n            const data = await this.queryService.preview(response.sql, {\n                project,\n                manifest: mdl,\n                limit\n            });\n            this.telemetry.sendEvent(eventName, {\n                sql: response.sql\n            });\n            return data;\n        } catch (err) {\n            this.telemetry.sendEvent(eventName, {\n                sql: response.sql,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    /**\n   * this function is used to preview the data of a thread response\n   * get the target thread response and get the steps\n   * construct the CTEs and get the data\n   * @param responseId: the id of the thread response\n   * @param stepIndex: the step in the response detail\n   * @returns Promise<QueryResponse>\n   */ async previewBreakdownData(responseId, stepIndex, limit) {\n        const response = await this.getResponse(responseId);\n        if (!response) {\n            throw new Error(`Thread response ${responseId} not found`);\n        }\n        const project = await this.projectService.getCurrentProject();\n        const deployment = await this.deployService.getLastDeployment(project.id);\n        const mdl = deployment.manifest;\n        const steps = response?.breakdownDetail?.steps;\n        const sql = (0,sql_formatter__WEBPACK_IMPORTED_MODULE_4__.format)(constructCteSql(steps, stepIndex));\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.TelemetryEvent.HOME_PREVIEW_ANSWER;\n        try {\n            const data = await this.queryService.preview(sql, {\n                project,\n                manifest: mdl,\n                limit\n            });\n            this.telemetry.sendEvent(eventName, {\n                sql\n            });\n            return data;\n        } catch (err) {\n            this.telemetry.sendEvent(eventName, {\n                sql,\n                error: err.message\n            }, err.extensions?.service, false);\n            throw err;\n        }\n    }\n    async createInstantRecommendedQuestions(input) {\n        const project = await this.projectService.getCurrentProject();\n        const { manifest } = await this.deployService.getLastDeployment(project.id);\n        const response = await this.wrenAIAdaptor.generateRecommendationQuestions({\n            manifest,\n            previousQuestions: input.previousQuestions,\n            ...this.getThreadRecommendationQuestionsConfig(project)\n        });\n        return {\n            id: response.queryId\n        };\n    }\n    async getInstantRecommendedQuestions(queryId) {\n        const response = await this.wrenAIAdaptor.getRecommendationQuestionsResult(queryId);\n        return response;\n    }\n    async deleteAllByProjectId(projectId) {\n        // delete all threads\n        await this.threadRepository.deleteAllBy({\n            projectId\n        });\n    }\n    async changeThreadResponseAnswerDetailStatus(responseId, status, content) {\n        const response = await this.threadResponseRepository.findOneBy({\n            id: responseId\n        });\n        if (!response) {\n            throw new Error(`Thread response ${responseId} not found`);\n        }\n        if (response.answerDetail?.status === status) {\n            return;\n        }\n        const updatedResponse = await this.threadResponseRepository.updateOne(responseId, {\n            answerDetail: {\n                ...response.answerDetail,\n                status,\n                content\n            }\n        });\n        return updatedResponse;\n    }\n    async getDeployId() {\n        const { id } = await this.projectService.getCurrentProject();\n        const lastDeploy = await this.deployService.getLastDeployment(id);\n        return lastDeploy.hash;\n    }\n    /**\n   * Get the thread with threadId & latest thread response of a thread\n   * transform the response into AskHistory\n   * @param threadId\n   * @returns Promise<AskHistory>\n   */ async getHistory(threadId) {\n        const responses = await this.threadResponseRepository.getResponsesWithThread(threadId, 1);\n        if (!responses.length) {\n            return null;\n        }\n        const latestResponse = responses[0];\n        // steps is only available in breakdown detail\n        // if we haven't generated the breakdown detail, fallback to use the question & sql\n        const steps = latestResponse.breakdownDetail?.steps || [\n            {\n                summary: latestResponse.question,\n                cteName: \"\",\n                sql: latestResponse.sql\n            }\n        ];\n        return {\n            sql: latestResponse.sql,\n            steps\n        };\n    }\n    async createThreadFromView(input) {\n        const view = await this.viewRepository.findOneBy({\n            id: input.viewId\n        });\n        if (!view) {\n            throw new Error(`View ${input.viewId} not found`);\n        }\n        const { id } = await this.projectService.getCurrentProject();\n        const thread = await this.threadRepository.createOne({\n            projectId: id,\n            summary: input.question\n        });\n        await this.createThreadResponseFromView(input.question, view.statement, view, thread);\n        return thread;\n    }\n    async createThreadResponseFromView(question, sql, view, thread) {\n        return this.threadResponseRepository.createOne({\n            threadId: thread.id,\n            viewId: view.id,\n            question,\n            sql\n        });\n    }\n    getThreadRecommendationQuestionsConfig(project) {\n        return {\n            maxCategories: config.threadRecommendationQuestionMaxCategories,\n            maxQuestions: config.threadRecommendationQuestionsMaxQuestions,\n            configuration: {\n                language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAILanguage.EN\n            }\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/askingService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/dashboardService.ts":
/*!********************************************************!*\
  !*** ./src/apollo/server/services/dashboardService.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DashboardService: () => (/* binding */ DashboardService)\n/* harmony export */ });\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_0__.getLogger)(\"DashboardService\");\nlogger.level = \"debug\";\nclass DashboardService {\n    constructor({ projectService, dashboardItemRepository, dashboardRepository }){\n        this.projectService = projectService;\n        this.dashboardItemRepository = dashboardItemRepository;\n        this.dashboardRepository = dashboardRepository;\n    }\n    async initDashboard() {\n        const project = await this.projectService.getCurrentProject();\n        const existingDashboard = await this.dashboardRepository.findOneBy({\n            projectId: project.id\n        });\n        if (existingDashboard) return existingDashboard;\n        // only support one dashboard for oss\n        return await this.dashboardRepository.createOne({\n            name: \"Dashboard\",\n            projectId: project.id\n        });\n    }\n    async getCurrentDashboard() {\n        const project = await this.projectService.getCurrentProject();\n        const dashboard = await this.dashboardRepository.findOneBy({\n            projectId: project.id\n        });\n        if (!dashboard) {\n            throw new Error(\"Dashboard not found.\");\n        }\n        return dashboard;\n    }\n    async getDashboardItem(dashboardItemId) {\n        const item = await this.dashboardItemRepository.findOneBy({\n            id: dashboardItemId\n        });\n        if (!item) {\n            throw new Error(\"Dashboard item not found.\");\n        }\n        return item;\n    }\n    async getDashboardItems(dashboardId) {\n        return await this.dashboardItemRepository.findAllBy({\n            dashboardId\n        });\n    }\n    async createDashboardItem(input) {\n        const layout = await this.calculateNewLayout(input.dashboardId);\n        return await this.dashboardItemRepository.createOne({\n            dashboardId: input.dashboardId,\n            type: input.type,\n            detail: {\n                sql: input.sql,\n                chartSchema: input.chartSchema\n            },\n            layout\n        });\n    }\n    async updateDashboardItemLayouts(layouts) {\n        const updatedItems = [];\n        const isValidLayouts = layouts.every((layout)=>layout.itemId && layout.x >= 0 && layout.y >= 0 && layout.w > 0 && layout.h > 0);\n        if (!isValidLayouts) {\n            throw new Error(\"Invalid layouts boundaries.\");\n        }\n        await Promise.all(layouts.map(async (layout)=>{\n            const updatedItem = await this.dashboardItemRepository.updateOne(layout.itemId, {\n                layout: {\n                    x: layout.x,\n                    y: layout.y,\n                    w: layout.w,\n                    h: layout.h\n                }\n            });\n            updatedItems.push(updatedItem);\n        }));\n        return updatedItems;\n    }\n    async deleteDashboardItem(dashboardItemId) {\n        await this.dashboardItemRepository.deleteOne(dashboardItemId);\n        return true;\n    }\n    async calculateNewLayout(dashboardId) {\n        const dashboardItems = await this.dashboardItemRepository.findAllBy({\n            dashboardId\n        });\n        const allLayouts = dashboardItems.map((item)=>item.layout);\n        if (allLayouts.length === 0) return {\n            x: 0,\n            y: 0,\n            w: 3,\n            h: 2\n        };\n        const columnCount = 6;\n        const halfLayoutX = columnCount / 2;\n        // the current max y is the current row\n        const maxY = Math.max(...allLayouts.map((layout)=>layout.y));\n        const latestLayout = allLayouts.filter((layout)=>layout.y === maxY);\n        const isNextRow = latestLayout.reduce((acc, layout)=>acc + layout.x + layout.w, 0) > halfLayoutX;\n        const x = isNextRow ? 0 : halfLayoutX;\n        const y = isNextRow ? maxY + 2 : maxY;\n        return {\n            x,\n            y,\n            w: 3,\n            h: 2\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/dashboardService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/deployService.ts":
/*!*****************************************************!*\
  !*** ./src/apollo/server/services/deployService.ts ***!
  \*****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeployService: () => (/* binding */ DeployService)\n/* harmony export */ });\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../repositories/deployLogRepository */ \"(api)/./src/apollo/server/repositories/deployLogRepository.ts\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(node_crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_4__]);\n_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_3__.getLogger)(\"DeployService\");\nlogger.level = \"debug\";\nclass DeployService {\n    constructor({ wrenAIAdaptor, deployLogRepository, telemetry }){\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.deployLogRepository = deployLogRepository;\n        this.telemetry = telemetry;\n    }\n    async getLastDeployment(projectId) {\n        const lastDeploy = await this.deployLogRepository.findLastProjectDeployLog(projectId);\n        if (!lastDeploy) {\n            return null;\n        }\n        return lastDeploy;\n    }\n    async getInProgressDeployment(projectId) {\n        return await this.deployLogRepository.findInProgressProjectDeployLog(projectId);\n    }\n    async deploy(manifest, projectId, force = false) {\n        const eventName = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_4__.TelemetryEvent.MODELING_DEPLOY_MDL;\n        try {\n            // generate hash of manifest\n            const hash = this.createMDLHash(manifest, projectId);\n            logger.debug(`Deploying model, hash: ${hash}`);\n            if (!force) {\n                // check if the model current deployment\n                const lastDeploy = await this.deployLogRepository.findLastProjectDeployLog(projectId);\n                if (lastDeploy && lastDeploy.hash === hash) {\n                    logger.log(`Model has been deployed, hash: ${hash}`);\n                    return {\n                        status: _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__.DeployStatusEnum.SUCCESS\n                    };\n                }\n            }\n            const deployData = {\n                manifest,\n                hash,\n                projectId,\n                status: _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__.DeployStatusEnum.IN_PROGRESS\n            };\n            const deploy = await this.deployLogRepository.createOne(deployData);\n            // deploy to AI-service\n            const { status: aiStatus, error: aiError } = await this.wrenAIAdaptor.deploy({\n                manifest,\n                hash\n            });\n            // update deploy status\n            const status = aiStatus === _server_models_adaptor__WEBPACK_IMPORTED_MODULE_0__.WrenAIDeployStatusEnum.SUCCESS ? _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__.DeployStatusEnum.SUCCESS : _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__.DeployStatusEnum.FAILED;\n            await this.deployLogRepository.updateOne(deploy.id, {\n                status,\n                error: aiError\n            });\n            // telemetry\n            if (status === _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__.DeployStatusEnum.SUCCESS) {\n                this.telemetry.sendEvent(eventName);\n            } else {\n                this.telemetry.sendEvent(eventName, {\n                    mdl: manifest,\n                    error: aiError\n                }, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_4__.WrenService.AI, false);\n            }\n            return {\n                status,\n                error: aiError\n            };\n        } catch (err) {\n            logger.error(`Error deploying model: ${err.message}`);\n            this.telemetry.sendEvent(eventName, {\n                mdl: manifest,\n                error: err.message\n            }, err.extensions?.service, false);\n            return {\n                status: _repositories_deployLogRepository__WEBPACK_IMPORTED_MODULE_1__.DeployStatusEnum.FAILED,\n                error: err.message\n            };\n        }\n    }\n    createMDLHash(manifest, projectId) {\n        const manifestStr = JSON.stringify(manifest);\n        const content = `${projectId} ${manifestStr}`;\n        const hash = (0,node_crypto__WEBPACK_IMPORTED_MODULE_2__.createHash)(\"sha1\").update(content).digest(\"hex\");\n        return hash;\n    }\n    async getMDLByHash(hash) {\n        const deploy = await this.deployLogRepository.findOneBy({\n            hash\n        });\n        if (!deploy) {\n            return null;\n        }\n        // return base64 encoded manifest\n        return Buffer.from(JSON.stringify(deploy.manifest)).toString(\"base64\");\n    }\n    async deleteAllByProjectId(projectId) {\n        // delete all deploy logs\n        await this.deployLogRepository.deleteAllBy({\n            projectId\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/deployService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/index.ts":
/*!*********************************************!*\
  !*** ./src/apollo/server/services/index.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _askingService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./askingService */ \"(api)/./src/apollo/server/services/askingService.ts\");\n/* harmony import */ var _deployService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deployService */ \"(api)/./src/apollo/server/services/deployService.ts\");\n/* harmony import */ var _mdlService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mdlService */ \"(api)/./src/apollo/server/services/mdlService.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _mdlService__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _mdlService__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _modelService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modelService */ \"(api)/./src/apollo/server/services/modelService.ts\");\n/* harmony import */ var _projectService__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./projectService */ \"(api)/./src/apollo/server/services/projectService.ts\");\n/* harmony import */ var _queryService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./queryService */ \"(api)/./src/apollo/server/services/queryService.ts\");\n/* harmony import */ var _metadataService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./metadataService */ \"(api)/./src/apollo/server/services/metadataService.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _metadataService__WEBPACK_IMPORTED_MODULE_6__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _metadataService__WEBPACK_IMPORTED_MODULE_6__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _dashboardService__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dashboardService */ \"(api)/./src/apollo/server/services/dashboardService.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _dashboardService__WEBPACK_IMPORTED_MODULE_7__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _dashboardService__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_askingService__WEBPACK_IMPORTED_MODULE_0__, _deployService__WEBPACK_IMPORTED_MODULE_1__, _modelService__WEBPACK_IMPORTED_MODULE_3__, _projectService__WEBPACK_IMPORTED_MODULE_4__, _queryService__WEBPACK_IMPORTED_MODULE_5__]);\n([_askingService__WEBPACK_IMPORTED_MODULE_0__, _deployService__WEBPACK_IMPORTED_MODULE_1__, _modelService__WEBPACK_IMPORTED_MODULE_3__, _projectService__WEBPACK_IMPORTED_MODULE_4__, _queryService__WEBPACK_IMPORTED_MODULE_5__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _askingService__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _askingService__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _deployService__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _deployService__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _modelService__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _modelService__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _projectService__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _projectService__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _queryService__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _queryService__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9zZXJ2aWNlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0M7QUFDQTtBQUNIO0FBQ0U7QUFDRTtBQUNGO0FBQ0c7QUFDQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9zZXJ2aWNlcy9pbmRleC50cz8wMGRmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXNraW5nU2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL2RlcGxveVNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9tZGxTZXJ2aWNlJztcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWxTZXJ2aWNlJztcbmV4cG9ydCAqIGZyb20gJy4vcHJvamVjdFNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9xdWVyeVNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9tZXRhZGF0YVNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9kYXNoYm9hcmRTZXJ2aWNlJztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/mdlService.ts":
/*!**************************************************!*\
  !*** ./src/apollo/server/services/mdlService.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MDLService: () => (/* binding */ MDLService)\n/* harmony export */ });\n/* harmony import */ var _mdl_mdlBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../mdl/mdlBuilder */ \"(api)/./src/apollo/server/mdl/mdlBuilder.ts\");\n\nclass MDLService {\n    constructor({ projectRepository, modelRepository, modelColumnRepository, modelNestedColumnRepository, relationRepository, viewRepository }){\n        this.projectRepository = projectRepository;\n        this.modelRepository = modelRepository;\n        this.modelColumnRepository = modelColumnRepository;\n        this.modelNestedColumnRepository = modelNestedColumnRepository;\n        this.relationRepository = relationRepository;\n        this.viewRepository = viewRepository;\n    }\n    async makeCurrentModelMDL() {\n        const project = await this.projectRepository.getCurrentProject();\n        const projectId = project.id;\n        const models = await this.modelRepository.findAllBy({\n            projectId\n        });\n        const modelIds = models.map((m)=>m.id);\n        const columns = await this.modelColumnRepository.findColumnsByModelIds(modelIds);\n        const modelNestedColumns = await this.modelNestedColumnRepository.findNestedColumnsByModelIds(modelIds);\n        const relations = await this.relationRepository.findRelationInfoBy({\n            projectId\n        });\n        const views = await this.viewRepository.findAllBy({\n            projectId\n        });\n        const relatedModels = models;\n        const relatedColumns = columns;\n        const relatedRelations = relations;\n        const mdlBuilder = new _mdl_mdlBuilder__WEBPACK_IMPORTED_MODULE_0__.MDLBuilder({\n            project,\n            models,\n            columns,\n            nestedColumns: modelNestedColumns,\n            relations,\n            views,\n            relatedModels,\n            relatedColumns,\n            relatedRelations\n        });\n        return {\n            manifest: mdlBuilder.build(),\n            mdlBuilder\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9zZXJ2aWNlcy9tZGxTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStDO0FBbUJ4QyxNQUFNQztJQVFYQyxZQUFZLEVBQ1ZDLGlCQUFpQixFQUNqQkMsZUFBZSxFQUNmQyxxQkFBcUIsRUFDckJDLDJCQUEyQixFQUMzQkMsa0JBQWtCLEVBQ2xCQyxjQUFjLEVBUWYsQ0FBRTtRQUNELElBQUksQ0FBQ0wsaUJBQWlCLEdBQUdBO1FBQ3pCLElBQUksQ0FBQ0MsZUFBZSxHQUFHQTtRQUN2QixJQUFJLENBQUNDLHFCQUFxQixHQUFHQTtRQUM3QixJQUFJLENBQUNDLDJCQUEyQixHQUFHQTtRQUNuQyxJQUFJLENBQUNDLGtCQUFrQixHQUFHQTtRQUMxQixJQUFJLENBQUNDLGNBQWMsR0FBR0E7SUFDeEI7SUFFQSxNQUFhQyxzQkFBc0I7UUFDakMsTUFBTUMsVUFBVSxNQUFNLElBQUksQ0FBQ1AsaUJBQWlCLENBQUNRLGlCQUFpQjtRQUM5RCxNQUFNQyxZQUFZRixRQUFRRyxFQUFFO1FBQzVCLE1BQU1DLFNBQVMsTUFBTSxJQUFJLENBQUNWLGVBQWUsQ0FBQ1csU0FBUyxDQUFDO1lBQUVIO1FBQVU7UUFDaEUsTUFBTUksV0FBV0YsT0FBT0csR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVMLEVBQUU7UUFDdkMsTUFBTU0sVUFDSixNQUFNLElBQUksQ0FBQ2QscUJBQXFCLENBQUNlLHFCQUFxQixDQUFDSjtRQUN6RCxNQUFNSyxxQkFDSixNQUFNLElBQUksQ0FBQ2YsMkJBQTJCLENBQUNnQiwyQkFBMkIsQ0FDaEVOO1FBRUosTUFBTU8sWUFBWSxNQUFNLElBQUksQ0FBQ2hCLGtCQUFrQixDQUFDaUIsa0JBQWtCLENBQUM7WUFDakVaO1FBQ0Y7UUFDQSxNQUFNYSxRQUFRLE1BQU0sSUFBSSxDQUFDakIsY0FBYyxDQUFDTyxTQUFTLENBQUM7WUFBRUg7UUFBVTtRQUM5RCxNQUFNYyxnQkFBZ0JaO1FBQ3RCLE1BQU1hLGlCQUFpQlI7UUFDdkIsTUFBTVMsbUJBQW1CTDtRQUN6QixNQUFNTSxhQUFhLElBQUk3Qix1REFBVUEsQ0FBQztZQUNoQ1U7WUFDQUk7WUFDQUs7WUFDQVcsZUFBZVQ7WUFDZkU7WUFDQUU7WUFDQUM7WUFDQUM7WUFDQUM7UUFDRjtRQUNBLE9BQU87WUFBRUcsVUFBVUYsV0FBV0csS0FBSztZQUFJSDtRQUFXO0lBQ3BEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvc2VydmljZXMvbWRsU2VydmljZS50cz9lNjk4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1ETEJ1aWxkZXIgfSBmcm9tICcuLi9tZGwvbWRsQnVpbGRlcic7XG5pbXBvcnQge1xuICBJTW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5LFxuICBJTW9kZWxDb2x1bW5SZXBvc2l0b3J5LFxuICBJTW9kZWxSZXBvc2l0b3J5LFxuICBJUHJvamVjdFJlcG9zaXRvcnksXG4gIElSZWxhdGlvblJlcG9zaXRvcnksXG4gIElWaWV3UmVwb3NpdG9yeSxcbn0gZnJvbSAnLi4vcmVwb3NpdG9yaWVzJztcbmltcG9ydCB7IE1hbmlmZXN0IH0gZnJvbSAnLi4vbWRsL3R5cGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1ha2VDdXJyZW50TW9kZWxNRExSZXN1bHQge1xuICBtYW5pZmVzdDogTWFuaWZlc3Q7XG4gIG1kbEJ1aWxkZXI6IE1ETEJ1aWxkZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIElNRExTZXJ2aWNlIHtcbiAgbWFrZUN1cnJlbnRNb2RlbE1ETCgpOiBQcm9taXNlPE1ha2VDdXJyZW50TW9kZWxNRExSZXN1bHQ+O1xufVxuXG5leHBvcnQgY2xhc3MgTURMU2VydmljZSBpbXBsZW1lbnRzIElNRExTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBwcm9qZWN0UmVwb3NpdG9yeTogSVByb2plY3RSZXBvc2l0b3J5O1xuICBwcml2YXRlIG1vZGVsUmVwb3NpdG9yeTogSU1vZGVsUmVwb3NpdG9yeTtcbiAgcHJpdmF0ZSBtb2RlbENvbHVtblJlcG9zaXRvcnk6IElNb2RlbENvbHVtblJlcG9zaXRvcnk7XG4gIHByaXZhdGUgbW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5OiBJTW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5O1xuICBwcml2YXRlIHJlbGF0aW9uUmVwb3NpdG9yeTogSVJlbGF0aW9uUmVwb3NpdG9yeTtcbiAgcHJpdmF0ZSB2aWV3UmVwb3NpdG9yeTogSVZpZXdSZXBvc2l0b3J5O1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBwcm9qZWN0UmVwb3NpdG9yeSxcbiAgICBtb2RlbFJlcG9zaXRvcnksXG4gICAgbW9kZWxDb2x1bW5SZXBvc2l0b3J5LFxuICAgIG1vZGVsTmVzdGVkQ29sdW1uUmVwb3NpdG9yeSxcbiAgICByZWxhdGlvblJlcG9zaXRvcnksXG4gICAgdmlld1JlcG9zaXRvcnksXG4gIH06IHtcbiAgICBwcm9qZWN0UmVwb3NpdG9yeTogSVByb2plY3RSZXBvc2l0b3J5O1xuICAgIG1vZGVsUmVwb3NpdG9yeTogSU1vZGVsUmVwb3NpdG9yeTtcbiAgICBtb2RlbENvbHVtblJlcG9zaXRvcnk6IElNb2RlbENvbHVtblJlcG9zaXRvcnk7XG4gICAgbW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5OiBJTW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5O1xuICAgIHJlbGF0aW9uUmVwb3NpdG9yeTogSVJlbGF0aW9uUmVwb3NpdG9yeTtcbiAgICB2aWV3UmVwb3NpdG9yeTogSVZpZXdSZXBvc2l0b3J5O1xuICB9KSB7XG4gICAgdGhpcy5wcm9qZWN0UmVwb3NpdG9yeSA9IHByb2plY3RSZXBvc2l0b3J5O1xuICAgIHRoaXMubW9kZWxSZXBvc2l0b3J5ID0gbW9kZWxSZXBvc2l0b3J5O1xuICAgIHRoaXMubW9kZWxDb2x1bW5SZXBvc2l0b3J5ID0gbW9kZWxDb2x1bW5SZXBvc2l0b3J5O1xuICAgIHRoaXMubW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5ID0gbW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5O1xuICAgIHRoaXMucmVsYXRpb25SZXBvc2l0b3J5ID0gcmVsYXRpb25SZXBvc2l0b3J5O1xuICAgIHRoaXMudmlld1JlcG9zaXRvcnkgPSB2aWV3UmVwb3NpdG9yeTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBtYWtlQ3VycmVudE1vZGVsTURMKCkge1xuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCB0aGlzLnByb2plY3RSZXBvc2l0b3J5LmdldEN1cnJlbnRQcm9qZWN0KCk7XG4gICAgY29uc3QgcHJvamVjdElkID0gcHJvamVjdC5pZDtcbiAgICBjb25zdCBtb2RlbHMgPSBhd2FpdCB0aGlzLm1vZGVsUmVwb3NpdG9yeS5maW5kQWxsQnkoeyBwcm9qZWN0SWQgfSk7XG4gICAgY29uc3QgbW9kZWxJZHMgPSBtb2RlbHMubWFwKChtKSA9PiBtLmlkKTtcbiAgICBjb25zdCBjb2x1bW5zID1cbiAgICAgIGF3YWl0IHRoaXMubW9kZWxDb2x1bW5SZXBvc2l0b3J5LmZpbmRDb2x1bW5zQnlNb2RlbElkcyhtb2RlbElkcyk7XG4gICAgY29uc3QgbW9kZWxOZXN0ZWRDb2x1bW5zID1cbiAgICAgIGF3YWl0IHRoaXMubW9kZWxOZXN0ZWRDb2x1bW5SZXBvc2l0b3J5LmZpbmROZXN0ZWRDb2x1bW5zQnlNb2RlbElkcyhcbiAgICAgICAgbW9kZWxJZHMsXG4gICAgICApO1xuICAgIGNvbnN0IHJlbGF0aW9ucyA9IGF3YWl0IHRoaXMucmVsYXRpb25SZXBvc2l0b3J5LmZpbmRSZWxhdGlvbkluZm9CeSh7XG4gICAgICBwcm9qZWN0SWQsXG4gICAgfSk7XG4gICAgY29uc3Qgdmlld3MgPSBhd2FpdCB0aGlzLnZpZXdSZXBvc2l0b3J5LmZpbmRBbGxCeSh7IHByb2plY3RJZCB9KTtcbiAgICBjb25zdCByZWxhdGVkTW9kZWxzID0gbW9kZWxzO1xuICAgIGNvbnN0IHJlbGF0ZWRDb2x1bW5zID0gY29sdW1ucztcbiAgICBjb25zdCByZWxhdGVkUmVsYXRpb25zID0gcmVsYXRpb25zO1xuICAgIGNvbnN0IG1kbEJ1aWxkZXIgPSBuZXcgTURMQnVpbGRlcih7XG4gICAgICBwcm9qZWN0LFxuICAgICAgbW9kZWxzLFxuICAgICAgY29sdW1ucyxcbiAgICAgIG5lc3RlZENvbHVtbnM6IG1vZGVsTmVzdGVkQ29sdW1ucyxcbiAgICAgIHJlbGF0aW9ucyxcbiAgICAgIHZpZXdzLFxuICAgICAgcmVsYXRlZE1vZGVscyxcbiAgICAgIHJlbGF0ZWRDb2x1bW5zLFxuICAgICAgcmVsYXRlZFJlbGF0aW9ucyxcbiAgICB9KTtcbiAgICByZXR1cm4geyBtYW5pZmVzdDogbWRsQnVpbGRlci5idWlsZCgpLCBtZGxCdWlsZGVyIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJNRExCdWlsZGVyIiwiTURMU2VydmljZSIsImNvbnN0cnVjdG9yIiwicHJvamVjdFJlcG9zaXRvcnkiLCJtb2RlbFJlcG9zaXRvcnkiLCJtb2RlbENvbHVtblJlcG9zaXRvcnkiLCJtb2RlbE5lc3RlZENvbHVtblJlcG9zaXRvcnkiLCJyZWxhdGlvblJlcG9zaXRvcnkiLCJ2aWV3UmVwb3NpdG9yeSIsIm1ha2VDdXJyZW50TW9kZWxNREwiLCJwcm9qZWN0IiwiZ2V0Q3VycmVudFByb2plY3QiLCJwcm9qZWN0SWQiLCJpZCIsIm1vZGVscyIsImZpbmRBbGxCeSIsIm1vZGVsSWRzIiwibWFwIiwibSIsImNvbHVtbnMiLCJmaW5kQ29sdW1uc0J5TW9kZWxJZHMiLCJtb2RlbE5lc3RlZENvbHVtbnMiLCJmaW5kTmVzdGVkQ29sdW1uc0J5TW9kZWxJZHMiLCJyZWxhdGlvbnMiLCJmaW5kUmVsYXRpb25JbmZvQnkiLCJ2aWV3cyIsInJlbGF0ZWRNb2RlbHMiLCJyZWxhdGVkQ29sdW1ucyIsInJlbGF0ZWRSZWxhdGlvbnMiLCJtZGxCdWlsZGVyIiwibmVzdGVkQ29sdW1ucyIsIm1hbmlmZXN0IiwiYnVpbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/mdlService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/metadataService.ts":
/*!*******************************************************!*\
  !*** ./src/apollo/server/services/metadataService.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConstraintType: () => (/* binding */ ConstraintType),\n/* harmony export */   DataSourceMetadataService: () => (/* binding */ DataSourceMetadataService)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/** \n    This class is responsible for handling the retrieval of metadata from the data source.\n    For DuckDB, we control the access logic and directly query the WrenEngine.\n    For PostgreSQL and BigQuery, we will use the Ibis server API.\n */ \n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_1__.getLogger)(\"MetadataService\");\nlogger.level = \"debug\";\nvar ConstraintType;\n(function(ConstraintType) {\n    ConstraintType[\"PRIMARY_KEY\"] = \"PRIMARY KEY\";\n    ConstraintType[\"FOREIGN_KEY\"] = \"FOREIGN KEY\";\n    ConstraintType[\"UNIQUE\"] = \"UNIQUE\";\n})(ConstraintType || (ConstraintType = {}));\nclass DataSourceMetadataService {\n    constructor({ ibisAdaptor, wrenEngineAdaptor }){\n        this.ibisAdaptor = ibisAdaptor;\n        this.wrenEngineAdaptor = wrenEngineAdaptor;\n    }\n    async listTables(project) {\n        const { type: dataSource, connectionInfo } = project;\n        if (dataSource === _types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB) {\n            const tables = await this.wrenEngineAdaptor.listTables();\n            return tables;\n        }\n        return await this.ibisAdaptor.getTables(dataSource, connectionInfo);\n    }\n    async listConstraints(project) {\n        const { type: dataSource, connectionInfo } = project;\n        if (dataSource === _types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB) {\n            return [];\n        }\n        return await this.ibisAdaptor.getConstraints(dataSource, connectionInfo);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci9zZXJ2aWNlcy9tZXRhZGF0YVNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0NBSUMsR0FLeUM7QUFDQTtBQUUxQyxNQUFNRSxTQUFTRCx3REFBU0EsQ0FBQztBQUN6QkMsT0FBT0MsS0FBSyxHQUFHOztVQVdIQzs7OztHQUFBQSxtQkFBQUE7QUE0QkwsTUFBTUM7SUFJWEMsWUFBWSxFQUNWQyxXQUFXLEVBQ1hDLGlCQUFpQixFQUlsQixDQUFFO1FBQ0QsSUFBSSxDQUFDRCxXQUFXLEdBQUdBO1FBQ25CLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdBO0lBQzNCO0lBRUEsTUFBYUMsV0FBV0MsT0FBTyxFQUEyQjtRQUN4RCxNQUFNLEVBQUVDLE1BQU1DLFVBQVUsRUFBRUMsY0FBYyxFQUFFLEdBQUdIO1FBQzdDLElBQUlFLGVBQWVaLGtEQUFjQSxDQUFDYyxNQUFNLEVBQUU7WUFDeEMsTUFBTUMsU0FBUyxNQUFNLElBQUksQ0FBQ1AsaUJBQWlCLENBQUNDLFVBQVU7WUFDdEQsT0FBT007UUFDVDtRQUNBLE9BQU8sTUFBTSxJQUFJLENBQUNSLFdBQVcsQ0FBQ1MsU0FBUyxDQUFDSixZQUFZQztJQUN0RDtJQUVBLE1BQWFJLGdCQUNYUCxPQUFnQixFQUNnQjtRQUNoQyxNQUFNLEVBQUVDLE1BQU1DLFVBQVUsRUFBRUMsY0FBYyxFQUFFLEdBQUdIO1FBQzdDLElBQUlFLGVBQWVaLGtEQUFjQSxDQUFDYyxNQUFNLEVBQUU7WUFDeEMsT0FBTyxFQUFFO1FBQ1g7UUFDQSxPQUFPLE1BQU0sSUFBSSxDQUFDUCxXQUFXLENBQUNXLGNBQWMsQ0FBQ04sWUFBWUM7SUFDM0Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci9zZXJ2aWNlcy9tZXRhZGF0YVNlcnZpY2UudHM/NmMzYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogXG4gICAgVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlIHJldHJpZXZhbCBvZiBtZXRhZGF0YSBmcm9tIHRoZSBkYXRhIHNvdXJjZS5cbiAgICBGb3IgRHVja0RCLCB3ZSBjb250cm9sIHRoZSBhY2Nlc3MgbG9naWMgYW5kIGRpcmVjdGx5IHF1ZXJ5IHRoZSBXcmVuRW5naW5lLlxuICAgIEZvciBQb3N0Z3JlU1FMIGFuZCBCaWdRdWVyeSwgd2Ugd2lsbCB1c2UgdGhlIEliaXMgc2VydmVyIEFQSS5cbiAqL1xuXG5pbXBvcnQgeyBJSWJpc0FkYXB0b3IgfSBmcm9tICcuLi9hZGFwdG9ycy9pYmlzQWRhcHRvcic7XG5pbXBvcnQgeyBJV3JlbkVuZ2luZUFkYXB0b3IgfSBmcm9tICcuLi9hZGFwdG9ycy93cmVuRW5naW5lQWRhcHRvcic7XG5pbXBvcnQgeyBQcm9qZWN0IH0gZnJvbSAnLi4vcmVwb3NpdG9yaWVzJztcbmltcG9ydCB7IERhdGFTb3VyY2VOYW1lIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnQHNlcnZlci91dGlscyc7XG5cbmNvbnN0IGxvZ2dlciA9IGdldExvZ2dlcignTWV0YWRhdGFTZXJ2aWNlJyk7XG5sb2dnZXIubGV2ZWwgPSAnZGVidWcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhY3RDb2x1bW4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgbm90TnVsbDogYm9vbGVhbjtcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHByb3BlcnRpZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBuZXN0ZWRDb2x1bW5zPzogQ29tcGFjdENvbHVtbltdO1xufVxuXG5leHBvcnQgZW51bSBDb25zdHJhaW50VHlwZSB7XG4gIFBSSU1BUllfS0VZID0gJ1BSSU1BUlkgS0VZJyxcbiAgRk9SRUlHTl9LRVkgPSAnRk9SRUlHTiBLRVknLFxuICBVTklRVUUgPSAnVU5JUVVFJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wYWN0VGFibGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIGNvbHVtbnM6IENvbXBhY3RDb2x1bW5bXTtcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHByb3BlcnRpZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBwcmltYXJ5S2V5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29tbWVuZENvbnN0cmFpbnQge1xuICBjb25zdHJhaW50TmFtZTogc3RyaW5nO1xuICBjb25zdHJhaW50VHlwZTogQ29uc3RyYWludFR5cGU7XG4gIGNvbnN0cmFpbnRUYWJsZTogc3RyaW5nO1xuICBjb25zdHJhaW50Q29sdW1uOiBzdHJpbmc7XG4gIGNvbnN0cmFpbnRlZFRhYmxlOiBzdHJpbmc7XG4gIGNvbnN0cmFpbnRlZENvbHVtbjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXRhU291cmNlTWV0YWRhdGFTZXJ2aWNlIHtcbiAgbGlzdFRhYmxlcyhwcm9qZWN0OiBQcm9qZWN0KTogUHJvbWlzZTxDb21wYWN0VGFibGVbXT47XG4gIGxpc3RDb25zdHJhaW50cyhwcm9qZWN0OiBQcm9qZWN0KTogUHJvbWlzZTxSZWNvbW1lbmRDb25zdHJhaW50W10+O1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YVNvdXJjZU1ldGFkYXRhU2VydmljZSBpbXBsZW1lbnRzIElEYXRhU291cmNlTWV0YWRhdGFTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBpYmlzQWRhcHRvcjogSUliaXNBZGFwdG9yO1xuICBwcml2YXRlIHJlYWRvbmx5IHdyZW5FbmdpbmVBZGFwdG9yOiBJV3JlbkVuZ2luZUFkYXB0b3I7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIGliaXNBZGFwdG9yLFxuICAgIHdyZW5FbmdpbmVBZGFwdG9yLFxuICB9OiB7XG4gICAgaWJpc0FkYXB0b3I6IElJYmlzQWRhcHRvcjtcbiAgICB3cmVuRW5naW5lQWRhcHRvcjogSVdyZW5FbmdpbmVBZGFwdG9yO1xuICB9KSB7XG4gICAgdGhpcy5pYmlzQWRhcHRvciA9IGliaXNBZGFwdG9yO1xuICAgIHRoaXMud3JlbkVuZ2luZUFkYXB0b3IgPSB3cmVuRW5naW5lQWRhcHRvcjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0VGFibGVzKHByb2plY3QpOiBQcm9taXNlPENvbXBhY3RUYWJsZVtdPiB7XG4gICAgY29uc3QgeyB0eXBlOiBkYXRhU291cmNlLCBjb25uZWN0aW9uSW5mbyB9ID0gcHJvamVjdDtcbiAgICBpZiAoZGF0YVNvdXJjZSA9PT0gRGF0YVNvdXJjZU5hbWUuRFVDS0RCKSB7XG4gICAgICBjb25zdCB0YWJsZXMgPSBhd2FpdCB0aGlzLndyZW5FbmdpbmVBZGFwdG9yLmxpc3RUYWJsZXMoKTtcbiAgICAgIHJldHVybiB0YWJsZXM7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmliaXNBZGFwdG9yLmdldFRhYmxlcyhkYXRhU291cmNlLCBjb25uZWN0aW9uSW5mbyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdENvbnN0cmFpbnRzKFxuICAgIHByb2plY3Q6IFByb2plY3QsXG4gICk6IFByb21pc2U8UmVjb21tZW5kQ29uc3RyYWludFtdPiB7XG4gICAgY29uc3QgeyB0eXBlOiBkYXRhU291cmNlLCBjb25uZWN0aW9uSW5mbyB9ID0gcHJvamVjdDtcbiAgICBpZiAoZGF0YVNvdXJjZSA9PT0gRGF0YVNvdXJjZU5hbWUuRFVDS0RCKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmliaXNBZGFwdG9yLmdldENvbnN0cmFpbnRzKGRhdGFTb3VyY2UsIGNvbm5lY3Rpb25JbmZvKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkRhdGFTb3VyY2VOYW1lIiwiZ2V0TG9nZ2VyIiwibG9nZ2VyIiwibGV2ZWwiLCJDb25zdHJhaW50VHlwZSIsIkRhdGFTb3VyY2VNZXRhZGF0YVNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImliaXNBZGFwdG9yIiwid3JlbkVuZ2luZUFkYXB0b3IiLCJsaXN0VGFibGVzIiwicHJvamVjdCIsInR5cGUiLCJkYXRhU291cmNlIiwiY29ubmVjdGlvbkluZm8iLCJEVUNLREIiLCJ0YWJsZXMiLCJnZXRUYWJsZXMiLCJsaXN0Q29uc3RyYWludHMiLCJnZXRDb25zdHJhaW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/metadataService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/modelService.ts":
/*!****************************************************!*\
  !*** ./src/apollo/server/services/modelService.ts ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ModelService: () => (/* binding */ ModelService)\n/* harmony export */ });\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @server/models */ \"(api)/./src/apollo/server/models/index.ts\");\n/* harmony import */ var _server_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/adaptors/ibisAdaptor */ \"(api)/./src/apollo/server/adaptors/ibisAdaptor.ts\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isEmpty */ \"lodash/isEmpty\");\n/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/capitalize */ \"lodash/capitalize\");\n/* harmony import */ var lodash_capitalize__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_capitalize__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _server_utils_regex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @server/utils/regex */ \"(api)/./src/apollo/server/utils/regex.ts\");\n/* harmony import */ var _server_utils_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @server/utils/error */ \"(api)/./src/apollo/server/utils/error.ts\");\n/* harmony import */ var _server_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @server/types */ \"(api)/./src/apollo/server/types/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_2__]);\n_server_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_0__.getLogger)(\"ModelService\");\nlogger.level = \"debug\";\nclass ModelService {\n    constructor({ projectService, modelRepository, modelColumnRepository, relationRepository, viewRepository, mdlService, wrenEngineAdaptor, queryService }){\n        this.projectService = projectService;\n        this.modelRepository = modelRepository;\n        this.modelColumnRepository = modelColumnRepository;\n        this.relationRepository = relationRepository;\n        this.viewRepository = viewRepository;\n        this.mdlService = mdlService;\n        this.wrenEngineAdaptor = wrenEngineAdaptor;\n        this.queryService = queryService;\n    }\n    async createCalculatedField(data) {\n        const { modelId, name: displayName, expression, lineage } = data;\n        const logTitle = `Create Calculated Field ${displayName}`;\n        const model = await this.modelRepository.findOneBy({\n            id: modelId\n        });\n        if (!model) {\n            throw new Error(\"Model not found\");\n        }\n        const { valid, message } = await this.validateCalculatedFieldNaming(displayName, modelId);\n        logger.debug(`${logTitle} : validateCalculatedFieldNaming: ${valid}, ${message}`);\n        if (!valid) {\n            throw new Error(message);\n        }\n        // generate referenceName\n        const referenceName = this.generateReferenceNameFromDisplayName(displayName);\n        logger.debug(`${logTitle} : generated referenceName: \"${referenceName}\"`);\n        // check this calculated field is valid for engine to query\n        const { valid: canQuery, message: errorMessage } = await this.checkCalculatedFieldCanQuery(modelId, model.referenceName, {\n            referenceName,\n            expression,\n            lineage\n        });\n        logger.debug(`${logTitle} : checkCalculatedFieldCanQuery: ${canQuery}`);\n        if (!canQuery) {\n            const parsedErrorMessage = (0,_server_utils__WEBPACK_IMPORTED_MODULE_0__.parseJson)(errorMessage);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_6__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_6__.GeneralErrorCodes.INVALID_CALCULATED_FIELD, {\n                customMessage: parsedErrorMessage?.message || errorMessage,\n                originalError: parsedErrorMessage || null\n            });\n        }\n        const inputFieldId = lineage[lineage.length - 1];\n        const dataType = await this.inferCalculatedFieldDataType(expression, inputFieldId);\n        logger.debug(`${logTitle} : inferCalculatedFieldDataType: ${dataType}`);\n        // create calculated field\n        const column = await this.modelColumnRepository.createOne({\n            modelId,\n            displayName: displayName,\n            sourceColumnName: referenceName,\n            referenceName,\n            type: dataType,\n            isCalculated: true,\n            isPk: false,\n            notNull: false,\n            aggregation: expression,\n            lineage: JSON.stringify(lineage),\n            properties: JSON.stringify({\n                description: \"\"\n            })\n        });\n        return column;\n    }\n    async updateCalculatedField(data, id) {\n        const { name: displayName, expression, lineage } = data;\n        const logTitle = `Update Calculated Field ${id}`;\n        const column = await this.modelColumnRepository.findOneBy({\n            id\n        });\n        if (!column) {\n            throw new Error(\"Column not found\");\n        }\n        const model = await this.modelRepository.findOneBy({\n            id: column.modelId\n        });\n        const { valid, message } = await this.validateCalculatedFieldNaming(displayName, column.modelId, id);\n        logger.debug(`${logTitle}: validateCalculatedFieldNaming: ${valid}, ${message}`);\n        if (!valid) {\n            throw new Error(message);\n        }\n        const referenceName = this.generateReferenceNameFromDisplayName(displayName);\n        logger.debug(`${logTitle}: generated referenceName: \"${referenceName}\"`);\n        // check this calculated field is valid for engine to query\n        const { valid: canQuery, message: errorMessage } = await this.checkCalculatedFieldCanQuery(model.id, model.referenceName, {\n            referenceName,\n            expression,\n            lineage\n        });\n        logger.debug(`${logTitle}: checkCalculatedFieldCanQuery: ${canQuery}`);\n        if (!canQuery) {\n            const error = JSON.parse(errorMessage);\n            throw _server_utils_error__WEBPACK_IMPORTED_MODULE_6__.create(_server_utils_error__WEBPACK_IMPORTED_MODULE_6__.GeneralErrorCodes.INVALID_CALCULATED_FIELD, {\n                customMessage: error?.message,\n                originalError: error\n            });\n        }\n        const inputFieldId = lineage[lineage.length - 1];\n        const dataType = await this.inferCalculatedFieldDataType(expression, inputFieldId);\n        logger.debug(`${logTitle}: inferCalculatedFieldDataType: ${dataType}`);\n        const updatedColumn = await this.modelColumnRepository.updateOne(id, {\n            displayName: displayName,\n            sourceColumnName: referenceName,\n            referenceName,\n            type: dataType,\n            aggregation: expression,\n            lineage: JSON.stringify(lineage)\n        });\n        return updatedColumn;\n    }\n    async updatePrimaryKeys(tables) {\n        logger.debug(\"start update primary keys\");\n        const { id } = await this.projectService.getCurrentProject();\n        const models = await this.modelRepository.findAllBy({\n            projectId: id\n        });\n        const tableToUpdate = tables.filter((t)=>t.primaryKey);\n        for (const table of tableToUpdate){\n            const model = models.find((m)=>m.sourceTableName === table.tableName);\n            if (!model) {\n                logger.debug(`Model not found, table name: ${table.tableName}`);\n            }\n            await this.modelColumnRepository.setModelPrimaryKey(model.id, table.primaryKey);\n        }\n    }\n    async batchUpdateModelProperties(tables) {\n        logger.debug(\"start batch update model description\");\n        const { id } = await this.projectService.getCurrentProject();\n        const models = await this.modelRepository.findAllBy({\n            projectId: id\n        });\n        await Promise.all([\n            tables.map(async (table)=>{\n                const model = models.find((m)=>m.sourceTableName === table.tableName);\n                if (!model) {\n                    logger.debug(`Model not found, table name: ${table.tableName}`);\n                    return;\n                }\n                const properties = model.properties ? {\n                    ...JSON.parse(model.properties),\n                    ...table.properties\n                } : {\n                    ...table.properties\n                };\n                await this.modelRepository.updateOne(model.id, {\n                    displayName: table.properties?.displayName || model.displayName,\n                    properties: JSON.stringify(properties)\n                });\n            })\n        ]);\n    }\n    async batchUpdateColumnProperties(tables) {\n        logger.debug(\"start batch update column description\");\n        const { id } = await this.projectService.getCurrentProject();\n        const models = await this.modelRepository.findAllBy({\n            projectId: id\n        });\n        const sourceColumns = await this.modelColumnRepository.findColumnsByModelIds(models.map((m)=>m.id));\n        const transformedColumns = tables.reduce((acc, table)=>{\n            const columns = table.columns?.map((column)=>{\n                return {\n                    ...column,\n                    tableName: table.tableName\n                };\n            });\n            if (columns) {\n                acc.push(...columns);\n            }\n            return acc;\n        }, []);\n        await Promise.all([\n            transformedColumns.map(async (column)=>{\n                if (!column.properties) {\n                    return;\n                }\n                const model = models.find((m)=>m.sourceTableName === column.tableName);\n                const sourceColumn = sourceColumns.find((sourceColumn)=>sourceColumn.modelId === model.id && sourceColumn.sourceColumnName === column.name);\n                if (!sourceColumn) {\n                    logger.debug(`Column not found, table name: ${column.tableName}, column name: ${column.name}`);\n                    return;\n                }\n                const properties = sourceColumn.properties ? {\n                    ...JSON.parse(sourceColumn.properties),\n                    ...column.properties\n                } : {\n                    description: column.description\n                };\n                await this.modelColumnRepository.updateOne(sourceColumn.id, {\n                    properties: JSON.stringify(properties)\n                });\n            })\n        ]);\n    }\n    generateReferenceName(data) {\n        const { sourceTableName, existedReferenceNames } = data;\n        if (!existedReferenceNames.includes(sourceTableName)) {\n            return sourceTableName;\n        }\n        return `${sourceTableName}_${existedReferenceNames.length + 1}`;\n    }\n    async saveRelations(relations) {\n        if (lodash_isEmpty__WEBPACK_IMPORTED_MODULE_3___default()(relations)) {\n            return [];\n        }\n        const { id } = await this.projectService.getCurrentProject();\n        const models = await this.modelRepository.findAllBy({\n            projectId: id\n        });\n        const columnIds = relations.map(({ fromColumnId, toColumnId })=>[\n                fromColumnId,\n                toColumnId\n            ]).flat();\n        const columns = await this.modelColumnRepository.findColumnsByIds(columnIds);\n        const relationValues = relations.map((relation)=>{\n            const fromColumn = columns.find((column)=>column.id === relation.fromColumnId);\n            if (!fromColumn) {\n                throw new Error(`Column not found, column Id ${relation.fromColumnId}`);\n            }\n            const toColumn = columns.find((column)=>column.id === relation.toColumnId);\n            if (!toColumn) {\n                throw new Error(`Column not found, column Id  ${relation.toColumnId}`);\n            }\n            const relationName = this.generateRelationName(relation, models, columns);\n            return {\n                projectId: id,\n                name: relationName,\n                fromColumnId: relation.fromColumnId,\n                toColumnId: relation.toColumnId,\n                joinType: relation.type,\n                properties: relation.description ? JSON.stringify({\n                    description: relation.description\n                }) : null\n            };\n        });\n        const savedRelations = await this.relationRepository.createMany(relationValues);\n        return savedRelations;\n    }\n    async createRelation(relation) {\n        const { id } = await this.projectService.getCurrentProject();\n        const modelIds = [\n            relation.fromModelId,\n            relation.toModelId\n        ];\n        const models = await this.modelRepository.findAllByIds(modelIds);\n        const columnIds = [\n            relation.fromColumnId,\n            relation.toColumnId\n        ];\n        const columns = await this.modelColumnRepository.findColumnsByIds(columnIds);\n        const { valid, message } = await this.validateCreateRelation(models, columns, relation);\n        if (!valid) {\n            throw new Error(message);\n        }\n        const relationName = this.generateRelationName(relation, models, columns);\n        const savedRelation = await this.relationRepository.createOne({\n            projectId: id,\n            name: relationName,\n            fromColumnId: relation.fromColumnId,\n            toColumnId: relation.toColumnId,\n            joinType: relation.type\n        });\n        return savedRelation;\n    }\n    async updateRelation(relation, id) {\n        const updatedRelation = await this.relationRepository.updateOne(id, {\n            joinType: relation.type\n        });\n        return updatedRelation;\n    }\n    async deleteRelation(id) {\n        const relation = await this.relationRepository.findOneBy({\n            id\n        });\n        if (!relation) {\n            throw new Error(\"Relation not found\");\n        }\n        const calculatedFields = await this.getCalculatedFieldByRelation(id);\n        if (calculatedFields.length > 0) {\n            // delete related calculated fields\n            await this.modelColumnRepository.deleteMany(calculatedFields.map((f)=>f.id));\n        }\n        await this.relationRepository.deleteOne(id);\n    }\n    async getCalculatedFieldByRelation(relationId) {\n        const calculatedFields = await this.modelColumnRepository.findAllBy({\n            isCalculated: true\n        });\n        const relatedCalculatedFields = calculatedFields.reduce((acc, field)=>{\n            const lineage = JSON.parse(field.lineage);\n            const relationIds = lineage.slice(0, lineage.length - 1);\n            if (relationIds.includes(relationId)) {\n                acc.push(field);\n            }\n            return acc;\n        }, []);\n        return relatedCalculatedFields;\n    }\n    async validateCalculatedFieldNaming(displayName, modelId, columnId) {\n        // only allow uppercase/lowercase english, numbers, syntaxes in the first raw of keyboard, {}, [], ', \", ,, .\n        const validationRes = (0,_server_utils__WEBPACK_IMPORTED_MODULE_0__.validateDisplayName)(displayName);\n        if (!validationRes.valid) {\n            return {\n                valid: false,\n                message: validationRes.message || \"Invalid Calculated field name\"\n            };\n        }\n        // can not duplicated with existed column\n        const referenceName = this.generateReferenceNameFromDisplayName(displayName);\n        let existedColumns = await this.modelColumnRepository.findColumnsByModelIds([\n            modelId\n        ]);\n        if (columnId) {\n            existedColumns = existedColumns.filter((column)=>column.id !== columnId);\n        }\n        if (existedColumns.find((column)=>column.referenceName === referenceName)) {\n            return {\n                valid: false,\n                message: `The generated calculated field name \"${referenceName}\" is duplicated with existed column, please change the name and try again`\n            };\n        }\n        return {\n            valid: true\n        };\n    }\n    async deleteAllViewsByProjectId(projectId) {\n        // delete all views\n        await this.viewRepository.deleteAllBy({\n            projectId\n        });\n    }\n    async deleteAllModelsByProjectId(projectId) {\n        // delete all relations\n        await this.relationRepository.deleteAllBy({\n            projectId\n        });\n        // delete all models\n        await this.modelRepository.deleteAllBy({\n            projectId\n        });\n    }\n    generateReferenceNameFromDisplayName(displayName) {\n        // replace all syntaxes that [in the first raw of keyboard, {}, [], ', \", ,, . ] with _\n        return (0,_server_utils__WEBPACK_IMPORTED_MODULE_0__.replaceAllowableSyntax)(displayName);\n    }\n    generateRelationName(relation, models, columns) {\n        const fromModel = models.find((m)=>m.id === relation.fromModelId);\n        const toModel = models.find((m)=>m.id === relation.toModelId);\n        if (!fromModel || !toModel) {\n            throw new Error(\"Model not found\");\n        }\n        const fromColumn = columns.find((column)=>column.id === relation.fromColumnId);\n        const toColumn = columns.find((column)=>column.id === relation.toColumnId);\n        return lodash_capitalize__WEBPACK_IMPORTED_MODULE_4___default()(fromModel.sourceTableName) + lodash_capitalize__WEBPACK_IMPORTED_MODULE_4___default()(fromColumn.referenceName) + lodash_capitalize__WEBPACK_IMPORTED_MODULE_4___default()(toModel.sourceTableName) + lodash_capitalize__WEBPACK_IMPORTED_MODULE_4___default()(toColumn.referenceName);\n    }\n    /** We currently support expression below, right side is the return type of the calculated field.\n  Aggregations\n    - **avg(***x***)** → double\n    - **count(***x***)** → bigint\n    - **max(***x***)** → [same as input]\n    - **min(***x***)** → [same as input]\n    - **sum(***x***)** → [same as input]\n  Math functions\n    - **abs(***x***)** → [same as input]\n    - **cbrt(***x***)** → double\n    - **ceil(***x***)** → [same as input]\n    - **exp(***x***)** → double\n    - **floor(***x***)** → [same as input]\n    - **ln(***x***)** → double\n    - **log10(***x***)** → double\n    - **round(***x***)** → [same as input]\n    - **sign(***x***)** → [same as input]\n\n  String functions\n    - **length(***string***)** → bigint\n    - **reverse(**string**)** → varbinary\n  */ async inferCalculatedFieldDataType(expression, inputFieldId) {\n        let type = null;\n        switch(expression){\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.CEIL:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.FLOOR:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.ROUND:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.SIGN:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.SUM:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.MAX:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.MIN:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.ABS:\n                type = await this.getFieldDataType(inputFieldId);\n                break;\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.CBRT:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.EXP:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.AVG:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.LN:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.LOG10:\n                type = \"DOUBLE\";\n                break;\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.COUNT:\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.LENGTH:\n                type = \"BIGINT\";\n                break;\n            case _server_models__WEBPACK_IMPORTED_MODULE_1__.ExpressionName.REVERSE:\n                type = \"VARBINARY\";\n                break;\n            default:\n                throw new Error(\"Unsupported expression\");\n        }\n        return type;\n    }\n    async getFieldDataType(fieldId) {\n        const field = await this.modelColumnRepository.findOneBy({\n            id: fieldId\n        });\n        if (!field) {\n            throw new Error(\"Field not found\");\n        }\n        return field.type;\n    }\n    async checkCalculatedFieldCanQuery(modelId, modelName, data) {\n        const project = await this.projectService.getCurrentProject();\n        const { mdlBuilder } = await this.mdlService.makeCurrentModelMDL();\n        const { referenceName, expression, lineage } = data;\n        const inputFieldId = lineage[lineage.length - 1];\n        const dataType = await this.inferCalculatedFieldDataType(expression, inputFieldId);\n        // add temporary calculated field\n        const modelColumn = {\n            id: 99999999,\n            modelId,\n            displayName: referenceName,\n            sourceColumnName: referenceName,\n            referenceName: referenceName,\n            type: dataType,\n            isCalculated: true,\n            isPk: false,\n            notNull: false,\n            aggregation: expression,\n            lineage: JSON.stringify(lineage),\n            properties: JSON.stringify({\n                description: \"\"\n            })\n        };\n        mdlBuilder.insertCalculatedField(modelName, modelColumn);\n        const manifest = mdlBuilder.getManifest();\n        // find the calculated field in manifest\n        const calculatedField = manifest.models.find((m)=>m.name === modelName)?.columns.find((c)=>c.name === referenceName);\n        logger.debug(`Calculated field MDL: ${JSON.stringify(calculatedField)}`);\n        // validate calculated field can query\n        const dataSource = project.type;\n        if (dataSource === _server_types__WEBPACK_IMPORTED_MODULE_7__.DataSourceName.DUCKDB) {\n            return await this.wrenEngineAdaptor.validateColumnIsValid(manifest, modelName, referenceName);\n        } else {\n            const parameters = {\n                modelName,\n                columnName: referenceName\n            };\n            return await this.queryService.validate(project, _server_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_2__.ValidationRules.COLUMN_IS_VALID, manifest, parameters);\n        }\n    }\n    async validateCreateRelation(models, columns, relation) {\n        const { fromModelId, fromColumnId, toModelId, toColumnId } = relation;\n        const fromModel = models.find((m)=>m.id === fromModelId);\n        const toModel = models.find((m)=>m.id === toModelId);\n        // model should exist\n        if (!fromModel) {\n            return {\n                valid: false,\n                message: `Model not found: fromModelId ${fromModelId}`\n            };\n        }\n        if (!toModel) {\n            return {\n                valid: false,\n                message: `Model not found: toModelId ${toModelId}`\n            };\n        }\n        // column should exist\n        const fromColumn = columns.find((column)=>column.id === fromColumnId);\n        const toColumn = columns.find((column)=>column.id === toColumnId);\n        if (!fromColumn) {\n            return {\n                valid: false,\n                message: `Column not found, column Id ${fromColumnId}`\n            };\n        }\n        if (!toColumn) {\n            return {\n                valid: false,\n                message: `Column not found, column Id ${toColumnId}`\n            };\n        }\n        // column should belong to the model\n        if (toColumn.modelId != toModelId) {\n            return {\n                valid: false,\n                message: `Column not belong to the model, column Id ${toColumnId}`\n            };\n        }\n        if (fromColumn.modelId != fromModelId) {\n            return {\n                valid: false,\n                message: `Column not belong to the model, column Id ${fromColumnId}`\n            };\n        }\n        const existedRelations = await this.relationRepository.findExistedRelationBetweenModels(relation);\n        if (existedRelations.length > 0) {\n            return {\n                valid: false,\n                message: \"This relationship already exists.\"\n            };\n        }\n        return {\n            valid: true\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/modelService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/projectService.ts":
/*!******************************************************!*\
  !*** ./src/apollo/server/services/projectService.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectService: () => (/* binding */ ProjectService)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_models_adaptor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/models/adaptor */ \"(api)/./src/apollo/server/models/adaptor.ts\");\n/* harmony import */ var _dataSource__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../dataSource */ \"(api)/./src/apollo/server/dataSource.ts\");\n/* harmony import */ var _askingService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./askingService */ \"(api)/./src/apollo/server/services/askingService.ts\");\n/* harmony import */ var _backgrounds__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../backgrounds */ \"(api)/./src/apollo/server/backgrounds/index.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../config */ \"(api)/./src/apollo/server/config.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_askingService__WEBPACK_IMPORTED_MODULE_6__, _backgrounds__WEBPACK_IMPORTED_MODULE_7__]);\n([_askingService__WEBPACK_IMPORTED_MODULE_6__, _backgrounds__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\nconst config = (0,_config__WEBPACK_IMPORTED_MODULE_8__.getConfig)();\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_3__.getLogger)(\"ProjectService\");\nlogger.level = \"debug\";\nconst SENSITIVE_PROPERTY_NAME = new Set([\n    \"credentials\",\n    \"password\"\n]);\nclass ProjectService {\n    constructor({ projectRepository, metadataService, mdlService, wrenAIAdaptor, telemetry }){\n        this.projectRepository = projectRepository;\n        this.metadataService = metadataService;\n        this.mdlService = mdlService;\n        this.wrenAIAdaptor = wrenAIAdaptor;\n        this.projectRecommendQuestionBackgroundTracker = new _backgrounds__WEBPACK_IMPORTED_MODULE_7__.ProjectRecommendQuestionBackgroundTracker({\n            projectRepository,\n            telemetry,\n            wrenAIAdaptor\n        });\n    }\n    async generateProjectRecommendationQuestions() {\n        const project = await this.getCurrentProject();\n        if (!project) {\n            throw new Error(`Project not found`);\n        }\n        const { manifest } = await this.mdlService.makeCurrentModelMDL();\n        const recommendQuestionResult = await this.wrenAIAdaptor.generateRecommendationQuestions({\n            manifest,\n            ...this.getProjectRecommendationQuestionsConfig(project)\n        });\n        const updatedProject = await this.projectRepository.updateOne(project.id, {\n            queryId: recommendQuestionResult.queryId,\n            questionsStatus: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_4__.RecommendationQuestionStatus.GENERATING,\n            questions: [],\n            questionsError: null\n        });\n        if (!this.projectRecommendQuestionBackgroundTracker.isExist(updatedProject)) {\n            this.projectRecommendQuestionBackgroundTracker.addTask(updatedProject);\n        } else {\n            logger.debug(`Generate Project Recommendation Questions Task ${updatedProject.id} already exists, skip adding`);\n        }\n    }\n    async getProjectRecommendationQuestions() {\n        const project = await this.projectRepository.getCurrentProject();\n        if (!project) {\n            throw new Error(`Project not found`);\n        }\n        const result = {\n            status: _askingService__WEBPACK_IMPORTED_MODULE_6__.RecommendQuestionResultStatus.NOT_STARTED,\n            questions: [],\n            error: null\n        };\n        if (project.queryId) {\n            result.status = project.questionsStatus ? _askingService__WEBPACK_IMPORTED_MODULE_6__.RecommendQuestionResultStatus[project.questionsStatus] : result.status;\n            result.questions = project.questions || [];\n            result.error = project.questionsError;\n        }\n        return result;\n    }\n    async getCurrentProject() {\n        return await this.projectRepository.getCurrentProject();\n    }\n    async getProjectById(projectId) {\n        return await this.projectRepository.findOneBy({\n            id: projectId\n        });\n    }\n    async getProjectDataSourceTables(project, projectId) {\n        const usedProject = project ? project : projectId ? await this.getProjectById(projectId) : await this.getCurrentProject();\n        return await this.metadataService.listTables(usedProject);\n    }\n    async getProjectSuggestedConstraint(project, projectId) {\n        const usedProject = project ? project : projectId ? await this.getProjectById(projectId) : await this.getCurrentProject();\n        return await this.metadataService.listConstraints(usedProject);\n    }\n    async createProject(projectData) {\n        const projectValue = {\n            displayName: projectData.displayName,\n            type: projectData.type,\n            catalog: \"wrenai\",\n            schema: \"public\",\n            connectionInfo: (0,_dataSource__WEBPACK_IMPORTED_MODULE_5__.encryptConnectionInfo)(projectData.type, projectData.connectionInfo)\n        };\n        logger.debug(\"Creating project...\");\n        const project = await this.projectRepository.createOne(projectValue);\n        return project;\n    }\n    writeCredentialFile(credentials, persistCredentialDir) {\n        // create persist_credential_dir if not exists\n        if (!fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(persistCredentialDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_1__.mkdirSync(persistCredentialDir, {\n                recursive: true\n            });\n        }\n        // file name will be the hash of the credentials, file path is current working directory\n        // convert credentials from base64 to string and replace all the matched \"\\n\" with \"\\\\n\",  there are many \\n in the \"private_key\" property\n        const credentialString = JSON.stringify(credentials);\n        const fileName = crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"md5\").update(credentialString).digest(\"hex\");\n        const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(persistCredentialDir, `${fileName}.json`);\n        // check if file exists\n        if (fs__WEBPACK_IMPORTED_MODULE_1__.existsSync(filePath)) {\n            logger.debug(`File ${filePath} already exists`);\n            return filePath;\n        }\n        fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(filePath, credentialString);\n        logger.debug(`Wrote credentials to file`);\n        return filePath;\n    }\n    async deleteProject(projectId) {\n        await this.projectRepository.deleteOne(projectId);\n    }\n    getGeneralConnectionInfo(project) {\n        return Object.entries(project.connectionInfo).reduce((acc, [key, value])=>{\n            if (!SENSITIVE_PROPERTY_NAME.has(key)) {\n                acc[key] = value;\n            }\n            return acc;\n        }, {});\n    }\n    getProjectRecommendationQuestionsConfig(project) {\n        return {\n            maxCategories: config.projectRecommendationQuestionMaxCategories,\n            maxQuestions: config.projectRecommendationQuestionsMaxQuestions,\n            regenerate: true,\n            configuration: {\n                language: _server_models_adaptor__WEBPACK_IMPORTED_MODULE_4__.WrenAILanguage[project.language] || _server_models_adaptor__WEBPACK_IMPORTED_MODULE_4__.WrenAILanguage.EN\n            }\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/projectService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/services/queryService.ts":
/*!****************************************************!*\
  !*** ./src/apollo/server/services/queryService.ts ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PREVIEW_LIMIT: () => (/* binding */ DEFAULT_PREVIEW_LIMIT),\n/* harmony export */   QueryService: () => (/* binding */ QueryService)\n/* harmony export */ });\n/* harmony import */ var _server_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/types */ \"(api)/./src/apollo/server/types/index.ts\");\n/* harmony import */ var _adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../adaptors/ibisAdaptor */ \"(api)/./src/apollo/server/adaptors/ibisAdaptor.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_1__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_3__]);\n([_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_1__, _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_2__.getLogger)(\"QueryService\");\nlogger.level = \"debug\";\nconst DEFAULT_PREVIEW_LIMIT = 500;\nclass QueryService {\n    constructor({ ibisAdaptor, wrenEngineAdaptor, telemetry }){\n        this.ibisAdaptor = ibisAdaptor;\n        this.wrenEngineAdaptor = wrenEngineAdaptor;\n        this.telemetry = telemetry;\n    }\n    async preview(sql, options) {\n        const { project, manifest: mdl, limit, dryRun } = options;\n        const { type: dataSource, connectionInfo } = project;\n        if (this.useEngine(dataSource)) {\n            if (dryRun) {\n                logger.debug(\"Using wren engine to dry run\");\n                await this.wrenEngineAdaptor.dryRun(sql, {\n                    manifest: mdl,\n                    limit\n                });\n                return true;\n            } else {\n                logger.debug(\"Using wren engine to preview\");\n                const data = await this.wrenEngineAdaptor.previewData(sql, mdl, limit);\n                return data;\n            }\n        } else {\n            this.checkDataSourceIsSupported(dataSource);\n            logger.debug(\"Use ibis adaptor to preview\");\n            if (dryRun) {\n                return await this.ibisDryRun(sql, dataSource, connectionInfo, mdl);\n            } else {\n                return await this.ibisQuery(sql, dataSource, connectionInfo, mdl, limit);\n            }\n        }\n    }\n    async describeStatement(sql, options) {\n        try {\n            // preview data with limit 1 to get column metadata\n            options.limit = 1;\n            const res = await this.preview(sql, options);\n            return {\n                columns: res.columns\n            };\n        } catch (err) {\n            logger.debug(`Got error when describing statement: ${err.message}`);\n            throw err;\n        }\n    }\n    async validate(project, rule, manifest, parameters) {\n        const { type: dataSource, connectionInfo } = project;\n        const res = await this.ibisAdaptor.validate(dataSource, rule, connectionInfo, manifest, parameters);\n        return res;\n    }\n    useEngine(dataSource) {\n        if (dataSource === _server_types__WEBPACK_IMPORTED_MODULE_0__.DataSourceName.DUCKDB) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    checkDataSourceIsSupported(dataSource) {\n        if (!Object.prototype.hasOwnProperty.call(_adaptors_ibisAdaptor__WEBPACK_IMPORTED_MODULE_1__.SupportedDataSource, dataSource)) {\n            throw new Error(`Unsupported datasource for ibis: \"${dataSource}\"`);\n        }\n    }\n    async ibisDryRun(sql, dataSource, connectionInfo, mdl) {\n        const event = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_3__.TelemetryEvent.IBIS_DRY_RUN;\n        try {\n            const res = await this.ibisAdaptor.dryRun(sql, {\n                dataSource,\n                connectionInfo,\n                mdl\n            });\n            this.sendIbisEvent(event, res, {\n                dataSource,\n                sql\n            });\n            return {\n                correlationId: res.correlationId\n            };\n        } catch (err) {\n            this.sendIbisFailedEvent(event, err, {\n                dataSource,\n                sql\n            });\n            throw err;\n        }\n    }\n    async ibisQuery(sql, dataSource, connectionInfo, mdl, limit) {\n        const event = _telemetry_telemetry__WEBPACK_IMPORTED_MODULE_3__.TelemetryEvent.IBIS_QUERY;\n        try {\n            const res = await this.ibisAdaptor.query(sql, {\n                dataSource,\n                connectionInfo,\n                mdl,\n                limit\n            });\n            this.sendIbisEvent(event, res, {\n                dataSource,\n                sql\n            });\n            const data = this.transformDataType(res);\n            return {\n                correlationId: res.correlationId,\n                ...data\n            };\n        } catch (err) {\n            this.sendIbisFailedEvent(event, err, {\n                dataSource,\n                sql\n            });\n            throw err;\n        }\n    }\n    transformDataType(data) {\n        const columns = data.columns;\n        const dtypes = data.dtypes;\n        const transformedColumns = columns.map((column)=>{\n            let type = \"unknown\";\n            if (dtypes && dtypes[column]) {\n                type = dtypes[column] === \"object\" ? \"string\" : dtypes[column];\n            }\n            if (type === \"unknown\") {\n                logger.debug(`Did not find type mapping for \"${column}\"`);\n                logger.debug(`dtypes mapping: ${dtypes ? JSON.stringify(dtypes, null, 2) : \"undefined\"} `);\n            }\n            return {\n                name: column,\n                type\n            };\n        });\n        return {\n            columns: transformedColumns,\n            data: data.data\n        };\n    }\n    sendIbisEvent(event, res, others) {\n        this.telemetry.sendEvent(event, {\n            correlationId: res.correlationId,\n            processTime: res.processTime,\n            ...others\n        });\n    }\n    sendIbisFailedEvent(event, err, others) {\n        this.telemetry.sendEvent(event, {\n            correlationId: err.extensions?.other?.correlationId,\n            processTime: err.extensions?.other?.processTime,\n            error: err.message,\n            ...others\n        }, err.extensions?.service, false);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/services/queryService.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/telemetry/telemetry.ts":
/*!**************************************************!*\
  !*** ./src/apollo/server/telemetry/telemetry.ts ***!
  \**************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostHogTelemetry: () => (/* binding */ PostHogTelemetry),\n/* harmony export */   TelemetryEvent: () => (/* binding */ TelemetryEvent),\n/* harmony export */   WrenService: () => (/* binding */ WrenService)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var posthog_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! posthog-node */ \"posthog-node\");\n/* harmony import */ var posthog_node__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(posthog_node__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_2__]);\nuuid__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_3__.getLogger)(\"TELEMETRY\");\nlogger.level = \"debug\";\nconst config = (0,_config__WEBPACK_IMPORTED_MODULE_0__.getConfig)();\nconst { userUUID, telemetryEnabled, wrenAIVersion, generationModel, wrenEngineVersion, wrenUIVersion, posthogApiKey, posthogHost } = config;\nvar TelemetryEvent;\n(function(TelemetryEvent) {\n    // onboarding\n    TelemetryEvent[\"CONNECTION_START_SAMPLE_DATASET\"] = \"connection_start_sample_dataset\";\n    TelemetryEvent[\"CONNECTION_SAVE_DATA_SOURCE\"] = \"connection_save_data_source\";\n    TelemetryEvent[\"CONNECTION_SAVE_TABLES\"] = \"connection_save_tables\";\n    TelemetryEvent[\"CONNECTION_SAVE_RELATION\"] = \"connection_save_relation\";\n    // modeling page\n    TelemetryEvent[\"MODELING_DEPLOY_MDL\"] = \"modeling_deploy_mdl\";\n    TelemetryEvent[\"MODELING_CREATE_MODEL\"] = \"modeling_create_model\";\n    TelemetryEvent[\"MODELING_UPDATE_MODEL\"] = \"modeling_update_model\";\n    TelemetryEvent[\"MODELING_CREATE_CF\"] = \"modeling_create_cf\";\n    TelemetryEvent[\"MODELING_UPDATE_CF\"] = \"modeling_update_cf\";\n    TelemetryEvent[\"MODELING_UPDATE_MODEL_METADATA\"] = \"modeling_update_model_metadata\";\n    TelemetryEvent[\"MODELING_UPDATE_VIEW_METADATA\"] = \"modeling_update_view_metadata\";\n    TelemetryEvent[\"MODELING_CREATE_RELATION\"] = \"modeling_create_relation\";\n    TelemetryEvent[\"MODELING_UPDATE_RELATION\"] = \"modeling_update_relation\";\n    // schema change\n    TelemetryEvent[\"MODELING_DETECT_SCHEMA_CHANGE\"] = \"modeling_detect_schema_change\";\n    TelemetryEvent[\"MODELING_RESOLVE_SCHEMA_CHANGE\"] = \"modeling_resolve_schema_change\";\n    TelemetryEvent[\"HOME_UPDATE_THREAD_SUMMARY\"] = \"update_thread_summary\";\n    // ask question\n    TelemetryEvent[\"HOME_ASK_CANDIDATE\"] = \"home_ask_candidate\";\n    TelemetryEvent[\"HOME_CREATE_THREAD\"] = \"home_create_thread\";\n    TelemetryEvent[\"HOME_ANSWER_QUESTION\"] = \"home_answer_question\";\n    TelemetryEvent[\"HOME_ANSWER_QUESTION_INTERRUPTED\"] = \"home_answer_question_interrupted\";\n    TelemetryEvent[\"HOME_ANSWER_BREAKDOWN\"] = \"home_answer_breakdown\";\n    TelemetryEvent[\"HOME_ANSWER_CHART\"] = \"home_answer_chart\";\n    TelemetryEvent[\"HOME_ANSWER_ADJUST_CHART\"] = \"home_answer_adjust_chart\";\n    TelemetryEvent[\"HOME_ASK_FOLLOWUP_QUESTION\"] = \"home_ask_followup_question\";\n    TelemetryEvent[\"HOME_CANCEL_ASK\"] = \"home_cancel_ask\";\n    TelemetryEvent[\"HOME_GENERATE_PROJECT_RECOMMENDATION_QUESTIONS\"] = \"home_generate_project_recommendation_questions\";\n    TelemetryEvent[\"HOME_GENERATE_THREAD_RECOMMENDATION_QUESTIONS\"] = \"home_generate_thread_recommendation_questions\";\n    // event after ask\n    TelemetryEvent[\"HOME_CREATE_VIEW\"] = \"home_create_view\";\n    TelemetryEvent[\"HOME_PREVIEW_ANSWER\"] = \"home_preview_answer\";\n    // settings event\n    TelemetryEvent[\"SETTING_RESET_PROJECT\"] = \"setting_reset_project\";\n    // ibis event\n    TelemetryEvent[\"IBIS_DRY_RUN\"] = \"ibis_dry_run\";\n    TelemetryEvent[\"IBIS_QUERY\"] = \"ibis_query\";\n    // Default error\n    TelemetryEvent[\"GRAPHQL_ERROR\"] = \"graphql_error\";\n})(TelemetryEvent || (TelemetryEvent = {}));\nvar WrenService;\n(function(WrenService) {\n    WrenService[\"BE\"] = \"BE\";\n    WrenService[\"AI\"] = \"AI\";\n    WrenService[\"ENGINE\"] = \"ENGINE\";\n    WrenService[\"UNKNOWN\"] = \"UNKNOWN\";\n})(WrenService || (WrenService = {}));\nclass PostHogTelemetry {\n    constructor(){\n        if (telemetryEnabled) {\n            if (!posthogApiKey) {\n                logger.debug(\"Telemetry enabled but posthogApiKey not provided.\");\n                return;\n            }\n            const client = new posthog_node__WEBPACK_IMPORTED_MODULE_1__.PostHog(posthogApiKey, {\n                host: posthogHost || \"https://us.posthog.com\"\n            });\n            this.posthog = client;\n            this.userId = userUUID || (0,uuid__WEBPACK_IMPORTED_MODULE_2__.v4)();\n            logger.info(`Telemetry initialized: ${this.userId}`);\n            return;\n        }\n        logger.info(\"Telemetry not enabled.\");\n    }\n    async sendEvent(event, properties = {}, service = \"UNKNOWN\", actionSuccess = true) {\n        if (!this.posthog) {\n            return;\n        }\n        const eventName = actionSuccess ? `${event}_success` : `${event}_failed`;\n        try {\n            const systemInfo = this.collectSystemInfo();\n            this.posthog.capture({\n                distinctId: this.userId,\n                event: eventName,\n                properties: {\n                    ...systemInfo,\n                    ...properties,\n                    wren_service: service\n                }\n            });\n        } catch (e) {\n            logger.error(e);\n        }\n    }\n    collectSystemInfo() {\n        return {\n            // collect services version\n            \"wren-ui-version\": wrenUIVersion || null,\n            \"wren-engine-version\": wrenEngineVersion || null,\n            \"wren-ai-service-version\": wrenAIVersion || null,\n            // collect AI model info\n            \"generation-model\": generationModel || null,\n            // collect some system info from process module\n            node_version: process.version,\n            node_platform: process.platform,\n            node_arch: process.arch,\n            memory_usage: process.memoryUsage(),\n            cpu_usage: process.cpuUsage()\n        };\n    }\n    stop() {\n        if (this.posthog) {\n            this.posthog.shutdown();\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/telemetry/telemetry.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/context.ts":
/*!********************************************!*\
  !*** ./src/apollo/server/types/context.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9jb250ZXh0LnRzIiwibWFwcGluZ3MiOiI7QUFxRUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvdHlwZXMvY29udGV4dC50cz82OTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25maWcgfSBmcm9tICdAc2VydmVyL2NvbmZpZyc7XG5pbXBvcnQge1xuICBJSWJpc0FkYXB0b3IsXG4gIElXcmVuQUlBZGFwdG9yLFxuICBJV3JlbkVuZ2luZUFkYXB0b3IsXG59IGZyb20gJ0BzZXJ2ZXIvYWRhcHRvcnMnO1xuaW1wb3J0IHtcbiAgSU1vZGVsQ29sdW1uUmVwb3NpdG9yeSxcbiAgSU1vZGVsTmVzdGVkQ29sdW1uUmVwb3NpdG9yeSxcbiAgSU1vZGVsUmVwb3NpdG9yeSxcbiAgSVByb2plY3RSZXBvc2l0b3J5LFxuICBJUmVsYXRpb25SZXBvc2l0b3J5LFxuICBJVmlld1JlcG9zaXRvcnksXG4gIElMZWFybmluZ1JlcG9zaXRvcnksXG4gIElTY2hlbWFDaGFuZ2VSZXBvc2l0b3J5LFxuICBJRGVwbG95TG9nUmVwb3NpdG9yeSxcbiAgSURhc2hib2FyZFJlcG9zaXRvcnksXG4gIElEYXNoYm9hcmRJdGVtUmVwb3NpdG9yeSxcbn0gZnJvbSAnQHNlcnZlci9yZXBvc2l0b3JpZXMnO1xuaW1wb3J0IHtcbiAgSVF1ZXJ5U2VydmljZSxcbiAgSUFza2luZ1NlcnZpY2UsXG4gIElEZXBsb3lTZXJ2aWNlLFxuICBJTW9kZWxTZXJ2aWNlLFxuICBJTURMU2VydmljZSxcbiAgSVByb2plY3RTZXJ2aWNlLFxuICBJRGFzaGJvYXJkU2VydmljZSxcbn0gZnJvbSAnQHNlcnZlci9zZXJ2aWNlcyc7XG5pbXBvcnQgeyBJVGVsZW1ldHJ5IH0gZnJvbSAnQHNlcnZlci90ZWxlbWV0cnkvdGVsZW1ldHJ5JztcbmltcG9ydCB7XG4gIFByb2plY3RSZWNvbW1lbmRRdWVzdGlvbkJhY2tncm91bmRUcmFja2VyLFxuICBUaHJlYWRSZWNvbW1lbmRRdWVzdGlvbkJhY2tncm91bmRUcmFja2VyLFxufSBmcm9tICdAc2VydmVyL2JhY2tncm91bmRzJztcblxuZXhwb3J0IGludGVyZmFjZSBJQ29udGV4dCB7XG4gIGNvbmZpZzogSUNvbmZpZztcbiAgLy8gdGVsZW1ldHJ5XG4gIHRlbGVtZXRyeTogSVRlbGVtZXRyeTtcblxuICAvLyBhZGFwdG9yXG4gIHdyZW5FbmdpbmVBZGFwdG9yOiBJV3JlbkVuZ2luZUFkYXB0b3I7XG4gIGliaXNTZXJ2ZXJBZGFwdG9yOiBJSWJpc0FkYXB0b3I7XG4gIHdyZW5BSUFkYXB0b3I6IElXcmVuQUlBZGFwdG9yO1xuXG4gIC8vIHNlcnZpY2VzXG4gIHByb2plY3RTZXJ2aWNlOiBJUHJvamVjdFNlcnZpY2U7XG4gIG1vZGVsU2VydmljZTogSU1vZGVsU2VydmljZTtcbiAgbWRsU2VydmljZTogSU1ETFNlcnZpY2U7XG4gIGRlcGxveVNlcnZpY2U6IElEZXBsb3lTZXJ2aWNlO1xuICBhc2tpbmdTZXJ2aWNlOiBJQXNraW5nU2VydmljZTtcbiAgcXVlcnlTZXJ2aWNlOiBJUXVlcnlTZXJ2aWNlO1xuICBkYXNoYm9hcmRTZXJ2aWNlOiBJRGFzaGJvYXJkU2VydmljZTtcblxuICAvLyByZXBvc2l0b3J5XG4gIHByb2plY3RSZXBvc2l0b3J5OiBJUHJvamVjdFJlcG9zaXRvcnk7XG4gIG1vZGVsUmVwb3NpdG9yeTogSU1vZGVsUmVwb3NpdG9yeTtcbiAgbW9kZWxDb2x1bW5SZXBvc2l0b3J5OiBJTW9kZWxDb2x1bW5SZXBvc2l0b3J5O1xuICBtb2RlbE5lc3RlZENvbHVtblJlcG9zaXRvcnk6IElNb2RlbE5lc3RlZENvbHVtblJlcG9zaXRvcnk7XG4gIHJlbGF0aW9uUmVwb3NpdG9yeTogSVJlbGF0aW9uUmVwb3NpdG9yeTtcbiAgdmlld1JlcG9zaXRvcnk6IElWaWV3UmVwb3NpdG9yeTtcbiAgZGVwbG95UmVwb3NpdG9yeTogSURlcGxveUxvZ1JlcG9zaXRvcnk7XG4gIHNjaGVtYUNoYW5nZVJlcG9zaXRvcnk6IElTY2hlbWFDaGFuZ2VSZXBvc2l0b3J5O1xuICBsZWFybmluZ1JlcG9zaXRvcnk6IElMZWFybmluZ1JlcG9zaXRvcnk7XG4gIGRhc2hib2FyZFJlcG9zaXRvcnk6IElEYXNoYm9hcmRSZXBvc2l0b3J5O1xuICBkYXNoYm9hcmRJdGVtUmVwb3NpdG9yeTogSURhc2hib2FyZEl0ZW1SZXBvc2l0b3J5O1xuXG4gIC8vIGJhY2tncm91bmQgdHJhY2tlcnNcbiAgcHJvamVjdFJlY29tbWVuZFF1ZXN0aW9uQmFja2dyb3VuZFRyYWNrZXI6IFByb2plY3RSZWNvbW1lbmRRdWVzdGlvbkJhY2tncm91bmRUcmFja2VyO1xuICB0aHJlYWRSZWNvbW1lbmRRdWVzdGlvbkJhY2tncm91bmRUcmFja2VyOiBUaHJlYWRSZWNvbW1lbmRRdWVzdGlvbkJhY2tncm91bmRUcmFja2VyO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/context.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/dataSource.ts":
/*!***********************************************!*\
  !*** ./src/apollo/server/types/dataSource.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataSourceName: () => (/* binding */ DataSourceName)\n/* harmony export */ });\nvar DataSourceName;\n(function(DataSourceName) {\n    DataSourceName[\"BIG_QUERY\"] = \"BIG_QUERY\";\n    DataSourceName[\"DUCKDB\"] = \"DUCKDB\";\n    DataSourceName[\"POSTGRES\"] = \"POSTGRES\";\n    DataSourceName[\"MYSQL\"] = \"MYSQL\";\n    DataSourceName[\"MSSQL\"] = \"MSSQL\";\n    DataSourceName[\"CLICK_HOUSE\"] = \"CLICK_HOUSE\";\n    DataSourceName[\"TRINO\"] = \"TRINO\";\n    DataSourceName[\"SNOWFLAKE\"] = \"SNOWFLAKE\";\n})(DataSourceName || (DataSourceName = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9kYXRhU291cmNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O1VBQVlBOzs7Ozs7Ozs7R0FBQUEsbUJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3R5cGVzL2RhdGFTb3VyY2UudHM/ZGYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBEYXRhU291cmNlTmFtZSB7XG4gIEJJR19RVUVSWSA9ICdCSUdfUVVFUlknLFxuICBEVUNLREIgPSAnRFVDS0RCJyxcbiAgUE9TVEdSRVMgPSAnUE9TVEdSRVMnLFxuICBNWVNRTCA9ICdNWVNRTCcsXG4gIE1TU1FMID0gJ01TU1FMJyxcbiAgQ0xJQ0tfSE9VU0UgPSAnQ0xJQ0tfSE9VU0UnLFxuICBUUklOTyA9ICdUUklOTycsXG4gIFNOT1dGTEFLRSA9ICdTTk9XRkxBS0UnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFTb3VyY2Uge1xuICB0eXBlOiBEYXRhU291cmNlTmFtZTtcbiAgcHJvcGVydGllczogRGF0YVNvdXJjZVByb3BlcnRpZXM7XG4gIHNhbXBsZURhdGFzZXQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FtcGxlRGF0YXNldERhdGEge1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIERhdGFTb3VyY2VQcm9wZXJ0aWVzID0geyBkaXNwbGF5TmFtZTogc3RyaW5nIH0gJiBQYXJ0aWFsPFxuICBCaWdRdWVyeURhdGFTb3VyY2VQcm9wZXJ0aWVzICZcbiAgICBEdWNrREJEYXRhU291cmNlUHJvcGVydGllcyAmXG4gICAgUEdEYXRhU291cmNlUHJvcGVydGllc1xuPjtcblxuZXhwb3J0IGludGVyZmFjZSBCaWdRdWVyeURhdGFTb3VyY2VQcm9wZXJ0aWVzIHtcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcbiAgcHJvamVjdElkOiBzdHJpbmc7XG4gIGRhdGFzZXRJZDogc3RyaW5nO1xuICBjcmVkZW50aWFsczogSlNPTjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEdWNrREJEYXRhU291cmNlUHJvcGVydGllcyB7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIGluaXRTcWw6IHN0cmluZztcbiAgZXh0ZW5zaW9uczogc3RyaW5nW107XG4gIGNvbmZpZ3VyYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBHRGF0YVNvdXJjZVByb3BlcnRpZXMge1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICBob3N0OiBzdHJpbmc7XG4gIHBvcnQ6IG51bWJlcjtcbiAgZGF0YWJhc2U6IHN0cmluZztcbiAgdXNlcjogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xuICBzc2w/OiBib29sZWFuO1xufVxuIl0sIm5hbWVzIjpbIkRhdGFTb3VyY2VOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/dataSource.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/diagram.ts":
/*!********************************************!*\
  !*** ./src/apollo/server/types/diagram.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeType: () => (/* binding */ NodeType)\n/* harmony export */ });\nvar NodeType;\n(function(NodeType) {\n    NodeType[\"MODEL\"] = \"MODEL\";\n    NodeType[\"VIEW\"] = \"VIEW\";\n    NodeType[\"RELATION\"] = \"RELATION\";\n    NodeType[\"FIELD\"] = \"FIELD\";\n    NodeType[\"CALCULATED_FIELD\"] = \"CALCULATED_FIELD\";\n})(NodeType || (NodeType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9kaWFncmFtLnRzIiwibWFwcGluZ3MiOiI7Ozs7O1VBRVlBOzs7Ozs7R0FBQUEsYUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvdHlwZXMvZGlhZ3JhbS50cz9iMzE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJ0BzZXJ2ZXIvdHlwZXMnO1xuXG5leHBvcnQgZW51bSBOb2RlVHlwZSB7XG4gIE1PREVMID0gJ01PREVMJyxcbiAgVklFVyA9ICdWSUVXJyxcbiAgUkVMQVRJT04gPSAnUkVMQVRJT04nLFxuICBGSUVMRCA9ICdGSUVMRCcsXG4gIENBTENVTEFURURfRklFTEQgPSAnQ0FMQ1VMQVRFRF9GSUVMRCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhZ3JhbSB7XG4gIG1vZGVsczogRGlhZ3JhbU1vZGVsW107XG4gIHZpZXdzOiBEaWFncmFtVmlld1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpYWdyYW1WaWV3IHtcbiAgaWQ6IHN0cmluZztcbiAgdmlld0lkOiBudW1iZXI7XG4gIG5vZGVUeXBlOiBOb2RlVHlwZTtcbiAgc3RhdGVtZW50OiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgZmllbGRzOiBEaWFncmFtVmlld0ZpZWxkW107XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhZ3JhbVZpZXdGaWVsZCB7XG4gIGlkOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBub2RlVHlwZTogTm9kZVR5cGU7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhZ3JhbU1vZGVsIHtcbiAgaWQ6IHN0cmluZztcbiAgbW9kZWxJZDogbnVtYmVyO1xuICBub2RlVHlwZTogTm9kZVR5cGU7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgc291cmNlVGFibGVOYW1lOiBzdHJpbmc7XG4gIHJlZlNxbD86IHN0cmluZztcbiAgY2FjaGVkOiBib29sZWFuO1xuICByZWZyZXNoVGltZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBmaWVsZHM6IERpYWdyYW1Nb2RlbEZpZWxkW107XG4gIGNhbGN1bGF0ZWRGaWVsZHM6IERpYWdyYW1Nb2RlbEZpZWxkW107XG4gIHJlbGF0aW9uRmllbGRzOiBEaWFncmFtTW9kZWxSZWxhdGlvbkZpZWxkW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlhZ3JhbU1vZGVsTmVzdGVkRmllbGQge1xuICBpZDogc3RyaW5nO1xuICBuZXN0ZWRDb2x1bW5JZDogbnVtYmVyO1xuICB0eXBlOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEaWFncmFtTW9kZWxGaWVsZCB7XG4gIGlkOiBzdHJpbmc7XG4gIGNvbHVtbklkOiBudW1iZXI7XG4gIHR5cGU6IHN0cmluZztcbiAgbm9kZVR5cGU6IE5vZGVUeXBlO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICByZWZlcmVuY2VOYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGlzUHJpbWFyeUtleT86IGJvb2xlYW47XG4gIGV4cHJlc3Npb24/OiBzdHJpbmc7XG4gIGxpbmVhZ2U/OiBzdHJpbmc7XG4gIGFnZ3JlZ2F0aW9uPzogc3RyaW5nO1xuICBuZXN0ZWRGaWVsZHM/OiBEaWFncmFtTW9kZWxOZXN0ZWRGaWVsZFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpYWdyYW1Nb2RlbFJlbGF0aW9uRmllbGQge1xuICBpZDogc3RyaW5nO1xuICByZWxhdGlvbklkOiBudW1iZXI7XG4gIHR5cGU6IFJlbGF0aW9uVHlwZTtcbiAgbm9kZVR5cGU6IE5vZGVUeXBlO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICByZWZlcmVuY2VOYW1lOiBzdHJpbmc7XG4gIGZyb21Nb2RlbElkOiBudW1iZXI7XG4gIGZyb21Nb2RlbE5hbWU6IHN0cmluZztcbiAgZnJvbU1vZGVsRGlzcGxheU5hbWU6IHN0cmluZztcbiAgZnJvbUNvbHVtbklkOiBudW1iZXI7XG4gIGZyb21Db2x1bW5OYW1lOiBzdHJpbmc7XG4gIGZyb21Db2x1bW5EaXNwbGF5TmFtZTogc3RyaW5nO1xuICB0b01vZGVsSWQ6IG51bWJlcjtcbiAgdG9Nb2RlbE5hbWU6IHN0cmluZztcbiAgdG9Nb2RlbERpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHRvQ29sdW1uSWQ6IG51bWJlcjtcbiAgdG9Db2x1bW5OYW1lOiBzdHJpbmc7XG4gIHRvQ29sdW1uRGlzcGxheU5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cbiJdLCJuYW1lcyI6WyJOb2RlVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/diagram.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/index.ts":
/*!******************************************!*\
  !*** ./src/apollo/server/types/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dataSource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataSource */ \"(api)/./src/apollo/server/types/dataSource.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _dataSource__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _dataSource__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _relationship__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./relationship */ \"(api)/./src/apollo/server/types/relationship.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _relationship__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _relationship__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _manifest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./manifest */ \"(api)/./src/apollo/server/types/manifest.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _manifest__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _manifest__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _diagram__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./diagram */ \"(api)/./src/apollo/server/types/diagram.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _diagram__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _diagram__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _metric__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metric */ \"(api)/./src/apollo/server/types/metric.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _metric__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _metric__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./context */ \"(api)/./src/apollo/server/types/context.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _context__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _context__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZCO0FBQ0U7QUFDSjtBQUNEO0FBQ0Q7QUFDQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9pbmRleC50cz81ZGQ1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGF0YVNvdXJjZSc7XG5leHBvcnQgKiBmcm9tICcuL3JlbGF0aW9uc2hpcCc7XG5leHBvcnQgKiBmcm9tICcuL21hbmlmZXN0JztcbmV4cG9ydCAqIGZyb20gJy4vZGlhZ3JhbSc7XG5leHBvcnQgKiBmcm9tICcuL21ldHJpYyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbnRleHQnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/manifest.ts":
/*!*********************************************!*\
  !*** ./src/apollo/server/types/manifest.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9tYW5pZmVzdC50cyIsIm1hcHBpbmdzIjoiO0FBMElDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3R5cGVzL21hbmlmZXN0LnRzPzcyNmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBNYW5pZmVzdCB7XG4gIGNhdGFsb2c6IHN0cmluZztcbiAgc2NoZW1hOiBzdHJpbmc7XG4gIG1vZGVsczogTW9kZWxbXTtcbiAgcmVsYXRpb25zaGlwczogUmVsYXRpb25zaGlwW107XG4gIGVudW1EZWZpbml0aW9uczogRW51bURlZmluaXRpb25bXTtcbiAgbWV0cmljczogTWV0cmljW107XG4gIGN1bXVsYXRpdmVNZXRyaWNzOiBDdW11bGF0aXZlTWV0cmljW107XG4gIHZpZXdzOiBFbnVtRGVmaW5pdGlvbltdO1xuICBtYWNyb3M6IE1hY3JvW107XG4gIGRhdGVTcGluZTogRGF0ZVNwaW5lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1bXVsYXRpdmVNZXRyaWMge1xuICBuYW1lOiBzdHJpbmc7XG4gIGJhc2VPYmplY3Q6IHN0cmluZztcbiAgbWVhc3VyZTogTWVhc3VyZTtcbiAgd2luZG93OiBXaW5kb3c7XG4gIGNhY2hlZDogYm9vbGVhbjtcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IEN1bXVsYXRpdmVNZXRyaWNQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lYXN1cmUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgb3BlcmF0b3I6IHN0cmluZztcbiAgcmVmQ29sdW1uOiBzdHJpbmc7XG4gIHByb3BlcnRpZXM/OiBDdW11bGF0aXZlTWV0cmljUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdW11bGF0aXZlTWV0cmljUHJvcGVydGllcyB7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdpbmRvdyB7XG4gIG5hbWU6IHN0cmluZztcbiAgcmVmQ29sdW1uOiBzdHJpbmc7XG4gIHRpbWVVbml0OiBzdHJpbmc7XG4gIHN0YXJ0OiBEYXRlO1xuICBlbmQ6IERhdGU7XG4gIHByb3BlcnRpZXM6IEN1bXVsYXRpdmVNZXRyaWNQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGVTcGluZSB7XG4gIHVuaXQ6IHN0cmluZztcbiAgc3RhcnQ6IERhdGU7XG4gIGVuZDogRGF0ZTtcbiAgcHJvcGVydGllczogQ3VtdWxhdGl2ZU1ldHJpY1Byb3BlcnRpZXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW51bURlZmluaXRpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlcz86IFZhbHVlW107XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IEN1bXVsYXRpdmVNZXRyaWNQcm9wZXJ0aWVzO1xuICBzdGF0ZW1lbnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IEN1bXVsYXRpdmVNZXRyaWNQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hY3JvIHtcbiAgbmFtZTogc3RyaW5nO1xuICBkZWZpbml0aW9uOiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IEN1bXVsYXRpdmVNZXRyaWNQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1ldHJpYyB7XG4gIG5hbWU6IHN0cmluZztcbiAgYmFzZU9iamVjdDogc3RyaW5nO1xuICBkaW1lbnNpb246IERpbWVuc2lvbltdO1xuICBtZWFzdXJlOiBEaW1lbnNpb25bXTtcbiAgdGltZUdyYWluOiBUaW1lR3JhaW5bXTtcbiAgY2FjaGVkOiBib29sZWFuO1xuICByZWZyZXNoVGltZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwcm9wZXJ0aWVzOiBDdW11bGF0aXZlTWV0cmljUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgaXNDYWxjdWxhdGVkOiBib29sZWFuO1xuICBub3ROdWxsOiBib29sZWFuO1xuICBwcm9wZXJ0aWVzOiBEaW1lbnNpb25Qcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpbWVuc2lvblByb3BlcnRpZXMge31cblxuZXhwb3J0IGludGVyZmFjZSBUaW1lR3JhaW4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHJlZkNvbHVtbjogc3RyaW5nO1xuICBkYXRlUGFydHM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsIHtcbiAgbmFtZTogc3RyaW5nO1xuICByZWZTcWw6IHN0cmluZztcbiAgY29sdW1uczogQ29sdW1uW107XG4gIHByaW1hcnlLZXk/OiBzdHJpbmc7XG4gIGNhY2hlZDogYm9vbGVhbjtcbiAgcmVmcmVzaFRpbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IEN1bXVsYXRpdmVNZXRyaWNQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIGNyZWF0ZUNvbHVtbklucHV0IHtcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBpc0NhbGN1bGF0ZWQ6IGJvb2xlYW47XG4gIG5vdE51bGw6IGJvb2xlYW47XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwcm9wZXJ0aWVzOiBDdW11bGF0aXZlTWV0cmljUHJvcGVydGllcztcbiAgcmVsYXRpb25zaGlwPzogc3RyaW5nO1xuICBleHByZXNzaW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbGF0aW9uc2hpcCB7XG4gIG5hbWU6IHN0cmluZztcbiAgbW9kZWxzOiBzdHJpbmdbXTtcbiAgam9pblR5cGU6IHN0cmluZztcbiAgY29uZGl0aW9uOiBzdHJpbmc7XG4gIG1hbnlTaWRlU29ydEtleXM6IE1hbnlTaWRlU29ydEtleVtdO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBwcm9wZXJ0aWVzOiBDdW11bGF0aXZlTWV0cmljUHJvcGVydGllcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYW55U2lkZVNvcnRLZXkge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NlbmRpbmc6IGJvb2xlYW47XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/manifest.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/metric.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/types/metric.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nvar ModelType;\n(function(ModelType) {\n    ModelType[\"TABLE\"] = \"TABLE\";\n    ModelType[\"METRIC\"] = \"METRIC\";\n})(ModelType || (ModelType = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9tZXRyaWMudHMiLCJtYXBwaW5ncyI6Ijs7VUFBS0E7OztHQUFBQSxjQUFBQTtBQWtFeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvdHlwZXMvbWV0cmljLnRzP2EwMDciXSwic291cmNlc0NvbnRlbnQiOlsiZW51bSBNb2RlbFR5cGUge1xuICBUQUJMRSA9ICdUQUJMRScsXG4gIE1FVFJJQyA9ICdNRVRSSUMnLFxufVxuXG5leHBvcnQgdHlwZSBDcmVhdGVTaW1wbGVNZXRyaWNQYXlsb2FkID0gQmFzZU1ldHJpY1BheWxvZCAmIHtcbiAgbWVhc3VyZTogU2ltcGxlTWVhc3VyZVtdO1xuICBkaW1lbnNpb246IERpbWVuc2lvbltdO1xuICB0aW1lR3JhaW46IFRpbWVHcmFpbltdO1xufTtcblxuZXhwb3J0IHR5cGUgQ3JlYXRlQ3VtdWxhdGl2ZU1ldHJpY1BheWxvYWQgPSBCYXNlTWV0cmljUGF5bG9kICYge1xuICBtZWFzdXJlOiBDdW11bGF0aXZlTWVhc3VyZVtdO1xuICB3aW5kb3c6IFdpbmRvdztcbn07XG5cbmludGVyZmFjZSBCYXNlTWV0cmljUGF5bG9kIHtcbiAgbmFtZTogc3RyaW5nO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBjYWNoZWQ6IGJvb2xlYW47XG4gIHJlZnJlc2hUaW1lPzogc3RyaW5nO1xuICBtb2RlbDogc3RyaW5nO1xuICBtb2RlbFR5cGU6IE1vZGVsVHlwZTtcbiAgcHJvcGVydGllczogUHJvcGVydGllcztcbn1cblxuaW50ZXJmYWNlIFNpbXBsZU1lYXN1cmUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgaXNDYWxjdWxhdGVkOiBib29sZWFuO1xuICBub3ROdWxsOiBib29sZWFuO1xuICBwcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzO1xufVxuXG5pbnRlcmZhY2UgQ3VtdWxhdGl2ZU1lYXN1cmUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgb3BlcmF0b3I6IHN0cmluZztcbiAgcmVmQ29sdW1uOiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IFByb3BlcnRpZXM7XG59XG5cbmludGVyZmFjZSBEaW1lbnNpb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgaXNDYWxjdWxhdGVkOiBib29sZWFuO1xuICBub3ROdWxsOiBib29sZWFuO1xuICBwcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzO1xufVxuXG5pbnRlcmZhY2UgVGltZUdyYWluIHtcbiAgbmFtZTogc3RyaW5nO1xuICByZWZDb2x1bW46IHN0cmluZztcbiAgZGF0ZVBhcnRzOiBzdHJpbmdbXTtcbn1cblxuaW50ZXJmYWNlIFdpbmRvdyB7XG4gIG5hbWU6IHN0cmluZztcbiAgcmVmQ29sdW1uOiBzdHJpbmc7XG4gIHRpbWVVbml0OiBzdHJpbmc7XG4gIHN0YXJ0OiBzdHJpbmc7XG4gIGVuZDogc3RyaW5nO1xuICBwcm9wZXJ0aWVzOiBQcm9wZXJ0aWVzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BlcnRpZXMge31cbiJdLCJuYW1lcyI6WyJNb2RlbFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/metric.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/types/relationship.ts":
/*!*************************************************!*\
  !*** ./src/apollo/server/types/relationship.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RelationType: () => (/* binding */ RelationType)\n/* harmony export */ });\nvar RelationType;\n(function(RelationType) {\n    RelationType[\"ONE_TO_ONE\"] = \"ONE_TO_ONE\";\n    RelationType[\"ONE_TO_MANY\"] = \"ONE_TO_MANY\";\n    RelationType[\"MANY_TO_ONE\"] = \"MANY_TO_ONE\";\n})(RelationType || (RelationType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9yZWxhdGlvbnNoaXAudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7VUEwQllBOzs7O0dBQUFBLGlCQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci90eXBlcy9yZWxhdGlvbnNoaXAudHM/OGUzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFJlbGF0aW9uRGF0YSB7XG4gIGZyb21Nb2RlbElkOiBudW1iZXI7XG4gIGZyb21Db2x1bW5JZDogbnVtYmVyO1xuICB0b01vZGVsSWQ6IG51bWJlcjtcbiAgdG9Db2x1bW5JZDogbnVtYmVyO1xuICB0eXBlOiBSZWxhdGlvblR5cGU7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZVJlbGF0aW9uRGF0YSB7XG4gIHR5cGU6IFJlbGF0aW9uVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbmFseXNpc1JlbGF0aW9uSW5mbyB7XG4gIG5hbWU6IHN0cmluZztcbiAgZnJvbU1vZGVsSWQ6IG51bWJlcjtcbiAgZnJvbU1vZGVsUmVmZXJlbmNlTmFtZTogc3RyaW5nO1xuICBmcm9tQ29sdW1uSWQ6IG51bWJlcjtcbiAgZnJvbUNvbHVtblJlZmVyZW5jZU5hbWU6IHN0cmluZztcbiAgdG9Nb2RlbElkOiBudW1iZXI7XG4gIHRvTW9kZWxSZWZlcmVuY2VOYW1lOiBzdHJpbmc7XG4gIHRvQ29sdW1uSWQ6IG51bWJlcjtcbiAgdG9Db2x1bW5SZWZlcmVuY2VOYW1lOiBzdHJpbmc7XG4gIHR5cGU6IFJlbGF0aW9uVHlwZTtcbn1cblxuZXhwb3J0IGVudW0gUmVsYXRpb25UeXBlIHtcbiAgT05FX1RPX09ORSA9ICdPTkVfVE9fT05FJyxcbiAgT05FX1RPX01BTlkgPSAnT05FX1RPX01BTlknLFxuICBNQU5ZX1RPX09ORSA9ICdNQU5ZX1RPX09ORScsXG59XG4iXSwibmFtZXMiOlsiUmVsYXRpb25UeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/types/relationship.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/docker.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/utils/docker.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toDockerHost: () => (/* binding */ toDockerHost)\n/* harmony export */ });\nconst toDockerHost = (host)=>{\n    // if host is localhost or 127.0.0.1, rewrite it to docker.for.{platform}.localhost\n    if (host === \"localhost\" || host === \"127.0.0.1\") {\n        const platform = process.platform;\n        switch(platform){\n            case \"darwin\":\n                return \"docker.for.mac.localhost\";\n            case \"linux\":\n                return \"docker.for.linux.localhost\";\n            default:\n                // windows and others...\n                return \"host.docker.internal\";\n        }\n    }\n    return host;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9kb2NrZXIudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGVBQWUsQ0FBQ0M7SUFDM0IsbUZBQW1GO0lBQ25GLElBQUlBLFNBQVMsZUFBZUEsU0FBUyxhQUFhO1FBQ2hELE1BQU1DLFdBQVdDLFFBQVFELFFBQVE7UUFDakMsT0FBUUE7WUFDTixLQUFLO2dCQUNILE9BQU87WUFDVCxLQUFLO2dCQUNILE9BQU87WUFDVDtnQkFDRSx3QkFBd0I7Z0JBQ3hCLE9BQU87UUFDWDtJQUNGO0lBQ0EsT0FBT0Q7QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3V0aWxzL2RvY2tlci50cz8yOTVhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB0b0RvY2tlckhvc3QgPSAoaG9zdDogc3RyaW5nKSA9PiB7XG4gIC8vIGlmIGhvc3QgaXMgbG9jYWxob3N0IG9yIDEyNy4wLjAuMSwgcmV3cml0ZSBpdCB0byBkb2NrZXIuZm9yLntwbGF0Zm9ybX0ubG9jYWxob3N0XG4gIGlmIChob3N0ID09PSAnbG9jYWxob3N0JyB8fCBob3N0ID09PSAnMTI3LjAuMC4xJykge1xuICAgIGNvbnN0IHBsYXRmb3JtID0gcHJvY2Vzcy5wbGF0Zm9ybTtcbiAgICBzd2l0Y2ggKHBsYXRmb3JtKSB7XG4gICAgICBjYXNlICdkYXJ3aW4nOlxuICAgICAgICByZXR1cm4gJ2RvY2tlci5mb3IubWFjLmxvY2FsaG9zdCc7XG4gICAgICBjYXNlICdsaW51eCc6XG4gICAgICAgIHJldHVybiAnZG9ja2VyLmZvci5saW51eC5sb2NhbGhvc3QnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gd2luZG93cyBhbmQgb3RoZXJzLi4uXG4gICAgICAgIHJldHVybiAnaG9zdC5kb2NrZXIuaW50ZXJuYWwnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaG9zdDtcbn07XG4iXSwibmFtZXMiOlsidG9Eb2NrZXJIb3N0IiwiaG9zdCIsInBsYXRmb3JtIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/docker.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/encode.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/utils/encode.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBase64: () => (/* binding */ toBase64)\n/* harmony export */ });\nfunction toBase64(str) {\n    return Buffer.from(str).toString(\"base64\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9lbmNvZGUudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLFNBQVNDLEdBQVc7SUFDbEMsT0FBT0MsT0FBT0MsSUFBSSxDQUFDRixLQUFLRyxRQUFRLENBQUM7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvdXRpbHMvZW5jb2RlLnRzPzFjODEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvQmFzZTY0KHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0cikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xufVxuIl0sIm5hbWVzIjpbInRvQmFzZTY0Iiwic3RyIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/encode.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/encryptor.ts":
/*!**********************************************!*\
  !*** ./src/apollo/server/utils/encryptor.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Encryptor: () => (/* binding */ Encryptor)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nclass Encryptor {\n    constructor({ encryptionPassword, encryptionSalt }){\n        this.ENCRYPTION_ITERATION = 1000;\n        this.ENCRYPTION_KEY_LENGTH = 256 / 8 // in bytes\n        ;\n        this.ENCRYPTION_ALGORITHM = \"aes-256-cbc\";\n        this.ENCRYPTION_SEPARATOR = \":\";\n        this.ENCRYPTION_PASSWORD = encryptionPassword;\n        this.ENCRYPTION_SALT = encryptionSalt;\n    }\n    encrypt(credentials) {\n        const credentialsString = JSON.stringify(credentials);\n        const key = this.createSecretKey();\n        const iv = crypto__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(16); // AES block size\n        const cipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createCipheriv(this.ENCRYPTION_ALGORITHM, key, iv);\n        const encrypted = Buffer.concat([\n            cipher.update(credentialsString, \"utf8\"),\n            cipher.final()\n        ]);\n        return iv.toString(\"base64\") + this.ENCRYPTION_SEPARATOR + encrypted.toString(\"base64\");\n    }\n    decrypt(encryptedText) {\n        const [ivBase64, encryptedBase64] = encryptedText.split(this.ENCRYPTION_SEPARATOR);\n        const iv = Buffer.from(ivBase64, \"base64\");\n        const encrypted = Buffer.from(encryptedBase64, \"base64\");\n        const key = this.createSecretKey();\n        const decipher = crypto__WEBPACK_IMPORTED_MODULE_0___default().createDecipheriv(this.ENCRYPTION_ALGORITHM, key, iv);\n        const decrypted = Buffer.concat([\n            decipher.update(encrypted),\n            decipher.final()\n        ]);\n        return decrypted.toString(\"utf8\");\n    }\n    createSecretKey() {\n        return crypto__WEBPACK_IMPORTED_MODULE_0___default().pbkdf2Sync(this.ENCRYPTION_PASSWORD, this.ENCRYPTION_SALT, this.ENCRYPTION_ITERATION, this.ENCRYPTION_KEY_LENGTH, \"sha512\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9lbmNyeXB0b3IudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCO0FBV3JCLE1BQU1DO0lBUVhDLFlBQVksRUFDVkMsa0JBQWtCLEVBQ2xCQyxjQUFjLEVBSWYsQ0FBRTthQVhLQyx1QkFBdUI7YUFDdkJDLHdCQUF3QixNQUFNLEVBQUcsV0FBVzs7YUFDNUNDLHVCQUF1QjthQUN2QkMsdUJBQXVCO1FBUzdCLElBQUksQ0FBQ0MsbUJBQW1CLEdBQUdOO1FBQzNCLElBQUksQ0FBQ08sZUFBZSxHQUFHTjtJQUN6QjtJQUVPTyxRQUFRQyxXQUFpQixFQUFFO1FBQ2hDLE1BQU1DLG9CQUFvQkMsS0FBS0MsU0FBUyxDQUFDSDtRQUN6QyxNQUFNSSxNQUFNLElBQUksQ0FBQ0MsZUFBZTtRQUNoQyxNQUFNQyxLQUFLbEIseURBQWtCLENBQUMsS0FBSyxpQkFBaUI7UUFDcEQsTUFBTW9CLFNBQVNwQiw0REFBcUIsQ0FBQyxJQUFJLENBQUNPLG9CQUFvQixFQUFFUyxLQUFLRTtRQUNyRSxNQUFNSSxZQUFZQyxPQUFPQyxNQUFNLENBQUM7WUFDOUJKLE9BQU9LLE1BQU0sQ0FBQ1osbUJBQW1CO1lBQ2pDTyxPQUFPTSxLQUFLO1NBQ2I7UUFDRCxPQUNFUixHQUFHUyxRQUFRLENBQUMsWUFDWixJQUFJLENBQUNuQixvQkFBb0IsR0FDekJjLFVBQVVLLFFBQVEsQ0FBQztJQUV2QjtJQUVPQyxRQUFRQyxhQUFxQixFQUFFO1FBQ3BDLE1BQU0sQ0FBQ0MsVUFBVUMsZ0JBQWdCLEdBQUdGLGNBQWNHLEtBQUssQ0FDckQsSUFBSSxDQUFDeEIsb0JBQW9CO1FBRTNCLE1BQU1VLEtBQUtLLE9BQU9VLElBQUksQ0FBQ0gsVUFBVTtRQUNqQyxNQUFNUixZQUFZQyxPQUFPVSxJQUFJLENBQUNGLGlCQUFpQjtRQUMvQyxNQUFNZixNQUFNLElBQUksQ0FBQ0MsZUFBZTtRQUNoQyxNQUFNaUIsV0FBV2xDLDhEQUF1QixDQUN0QyxJQUFJLENBQUNPLG9CQUFvQixFQUN6QlMsS0FDQUU7UUFFRixNQUFNa0IsWUFBWWIsT0FBT0MsTUFBTSxDQUFDO1lBQzlCVSxTQUFTVCxNQUFNLENBQUNIO1lBQ2hCWSxTQUFTUixLQUFLO1NBQ2Y7UUFDRCxPQUFPVSxVQUFVVCxRQUFRLENBQUM7SUFDNUI7SUFFUVYsa0JBQWtCO1FBQ3hCLE9BQU9qQix3REFBaUIsQ0FDdEIsSUFBSSxDQUFDUyxtQkFBbUIsRUFDeEIsSUFBSSxDQUFDQyxlQUFlLEVBQ3BCLElBQUksQ0FBQ0wsb0JBQW9CLEVBQ3pCLElBQUksQ0FBQ0MscUJBQXFCLEVBQzFCO0lBRUo7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9lbmNyeXB0b3IudHM/MmI3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgZW5jcnlwdE9wdGlvbnMge1xuICBwYXNzd29yZDogc3RyaW5nO1xuICBzYWx0OiBzdHJpbmc7XG4gIGl0ZXJhdGlvbj86IG51bWJlcjtcbiAga2V5TGVuZ3RoPzogbnVtYmVyO1xuICBhbGdvcml0aG0/OiBzdHJpbmc7XG4gIHNlcGFyYXRvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEVuY3J5cHRvciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgRU5DUllQVElPTl9QQVNTV09SRDogc3RyaW5nO1xuICBwcml2YXRlIHJlYWRvbmx5IEVOQ1JZUFRJT05fU0FMVDogc3RyaW5nO1xuICBwcml2YXRlIEVOQ1JZUFRJT05fSVRFUkFUSU9OID0gMTAwMDtcbiAgcHJpdmF0ZSBFTkNSWVBUSU9OX0tFWV9MRU5HVEggPSAyNTYgLyA4OyAvLyBpbiBieXRlc1xuICBwcml2YXRlIEVOQ1JZUFRJT05fQUxHT1JJVEhNID0gJ2Flcy0yNTYtY2JjJztcbiAgcHJpdmF0ZSBFTkNSWVBUSU9OX1NFUEFSQVRPUiA9ICc6JztcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgZW5jcnlwdGlvblBhc3N3b3JkLFxuICAgIGVuY3J5cHRpb25TYWx0LFxuICB9OiB7XG4gICAgZW5jcnlwdGlvblBhc3N3b3JkOiBzdHJpbmc7XG4gICAgZW5jcnlwdGlvblNhbHQ6IHN0cmluZztcbiAgfSkge1xuICAgIHRoaXMuRU5DUllQVElPTl9QQVNTV09SRCA9IGVuY3J5cHRpb25QYXNzd29yZDtcbiAgICB0aGlzLkVOQ1JZUFRJT05fU0FMVCA9IGVuY3J5cHRpb25TYWx0O1xuICB9XG5cbiAgcHVibGljIGVuY3J5cHQoY3JlZGVudGlhbHM6IEpTT04pIHtcbiAgICBjb25zdCBjcmVkZW50aWFsc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxzKTtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmNyZWF0ZVNlY3JldEtleSgpO1xuICAgIGNvbnN0IGl2ID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDE2KTsgLy8gQUVTIGJsb2NrIHNpemVcbiAgICBjb25zdCBjaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYodGhpcy5FTkNSWVBUSU9OX0FMR09SSVRITSwga2V5LCBpdik7XG4gICAgY29uc3QgZW5jcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbXG4gICAgICBjaXBoZXIudXBkYXRlKGNyZWRlbnRpYWxzU3RyaW5nLCAndXRmOCcpLFxuICAgICAgY2lwaGVyLmZpbmFsKCksXG4gICAgXSk7XG4gICAgcmV0dXJuIChcbiAgICAgIGl2LnRvU3RyaW5nKCdiYXNlNjQnKSArXG4gICAgICB0aGlzLkVOQ1JZUFRJT05fU0VQQVJBVE9SICtcbiAgICAgIGVuY3J5cHRlZC50b1N0cmluZygnYmFzZTY0JylcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGRlY3J5cHQoZW5jcnlwdGVkVGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3QgW2l2QmFzZTY0LCBlbmNyeXB0ZWRCYXNlNjRdID0gZW5jcnlwdGVkVGV4dC5zcGxpdChcbiAgICAgIHRoaXMuRU5DUllQVElPTl9TRVBBUkFUT1IsXG4gICAgKTtcbiAgICBjb25zdCBpdiA9IEJ1ZmZlci5mcm9tKGl2QmFzZTY0LCAnYmFzZTY0Jyk7XG4gICAgY29uc3QgZW5jcnlwdGVkID0gQnVmZmVyLmZyb20oZW5jcnlwdGVkQmFzZTY0LCAnYmFzZTY0Jyk7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5jcmVhdGVTZWNyZXRLZXkoKTtcbiAgICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KFxuICAgICAgdGhpcy5FTkNSWVBUSU9OX0FMR09SSVRITSxcbiAgICAgIGtleSxcbiAgICAgIGl2LFxuICAgICk7XG4gICAgY29uc3QgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbXG4gICAgICBkZWNpcGhlci51cGRhdGUoZW5jcnlwdGVkKSxcbiAgICAgIGRlY2lwaGVyLmZpbmFsKCksXG4gICAgXSk7XG4gICAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZygndXRmOCcpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVTZWNyZXRLZXkoKSB7XG4gICAgcmV0dXJuIGNyeXB0by5wYmtkZjJTeW5jKFxuICAgICAgdGhpcy5FTkNSWVBUSU9OX1BBU1NXT1JELFxuICAgICAgdGhpcy5FTkNSWVBUSU9OX1NBTFQsXG4gICAgICB0aGlzLkVOQ1JZUFRJT05fSVRFUkFUSU9OLFxuICAgICAgdGhpcy5FTkNSWVBUSU9OX0tFWV9MRU5HVEgsXG4gICAgICAnc2hhNTEyJyxcbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY3J5cHRvIiwiRW5jcnlwdG9yIiwiY29uc3RydWN0b3IiLCJlbmNyeXB0aW9uUGFzc3dvcmQiLCJlbmNyeXB0aW9uU2FsdCIsIkVOQ1JZUFRJT05fSVRFUkFUSU9OIiwiRU5DUllQVElPTl9LRVlfTEVOR1RIIiwiRU5DUllQVElPTl9BTEdPUklUSE0iLCJFTkNSWVBUSU9OX1NFUEFSQVRPUiIsIkVOQ1JZUFRJT05fUEFTU1dPUkQiLCJFTkNSWVBUSU9OX1NBTFQiLCJlbmNyeXB0IiwiY3JlZGVudGlhbHMiLCJjcmVkZW50aWFsc1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJjcmVhdGVTZWNyZXRLZXkiLCJpdiIsInJhbmRvbUJ5dGVzIiwiY2lwaGVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJlbmNyeXB0ZWQiLCJCdWZmZXIiLCJjb25jYXQiLCJ1cGRhdGUiLCJmaW5hbCIsInRvU3RyaW5nIiwiZGVjcnlwdCIsImVuY3J5cHRlZFRleHQiLCJpdkJhc2U2NCIsImVuY3J5cHRlZEJhc2U2NCIsInNwbGl0IiwiZnJvbSIsImRlY2lwaGVyIiwiY3JlYXRlRGVjaXBoZXJpdiIsImRlY3J5cHRlZCIsInBia2RmMlN5bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/encryptor.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/error.ts":
/*!******************************************!*\
  !*** ./src/apollo/server/utils/error.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeneralErrorCodes: () => (/* binding */ GeneralErrorCodes),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   defaultApolloErrorHandler: () => (/* binding */ defaultApolloErrorHandler),\n/* harmony export */   errorMessages: () => (/* binding */ errorMessages),\n/* harmony export */   shortMessages: () => (/* binding */ shortMessages)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"graphql\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(graphql__WEBPACK_IMPORTED_MODULE_0__);\n\nvar GeneralErrorCodes;\n(function(GeneralErrorCodes) {\n    GeneralErrorCodes[\"INTERNAL_SERVER_ERROR\"] = \"INTERNAL_SERVER_ERROR\";\n    // AI service errors\n    GeneralErrorCodes[\"NO_RELEVANT_DATA\"] = \"NO_RELEVANT_DATA\";\n    GeneralErrorCodes[\"NO_RELEVANT_SQL\"] = \"NO_RELEVANT_SQL\";\n    GeneralErrorCodes[\"RESOURCE_NOT_FOUND\"] = \"RESOURCE_NOT_FOUND\";\n    GeneralErrorCodes[\"MDL_PARSE_ERROR\"] = \"MDL_PARSE_ERROR\";\n    GeneralErrorCodes[\"NO_CHART\"] = \"NO_CHART\";\n    // Exception error for AI service (e.g., network connection error)\n    GeneralErrorCodes[\"AI_SERVICE_UNDEFINED_ERROR\"] = \"OTHERS\";\n    // IBIS Error\n    GeneralErrorCodes[\"IBIS_SERVER_ERROR\"] = \"IBIS_SERVER_ERROR\";\n    // Connector errors\n    GeneralErrorCodes[\"CONNECTION_ERROR\"] = \"CONNECTION_ERROR\";\n    // duckdb\n    GeneralErrorCodes[\"INIT_SQL_ERROR\"] = \"INIT_SQL_ERROR\";\n    GeneralErrorCodes[\"SESSION_PROPS_ERROR\"] = \"SESSION_PROPS_ERROR\";\n    // postgres\n    GeneralErrorCodes[\"CONNECTION_REFUSED\"] = \"CONNECTION_REFUSED\";\n    // calculated field validation\n    GeneralErrorCodes[\"DUPLICATED_FIELD_NAME\"] = \"DUPLICATED_FIELD_NAME\";\n    GeneralErrorCodes[\"INVALID_EXPRESSION\"] = \"INVALID_EXPRESSION\";\n    GeneralErrorCodes[\"INVALID_CALCULATED_FIELD\"] = \"INVALID_CALCULATED_FIELD\";\n    // when createing views\n    GeneralErrorCodes[\"INVALID_VIEW_CREATION\"] = \"INVALID_VIEW_CREATION\";\n    // dry run error\n    GeneralErrorCodes[\"DRY_RUN_ERROR\"] = \"DRY_RUN_ERROR\";\n    GeneralErrorCodes[\"DRY_PLAN_ERROR\"] = \"DRY_PLAN_ERROR\";\n})(GeneralErrorCodes || (GeneralErrorCodes = {}));\nconst errorMessages = {\n    [\"INTERNAL_SERVER_ERROR\"]: \"Internal server error\",\n    // AI service errors\n    [\"NO_RELEVANT_DATA\"]: \"I can’t find the exact data you’re looking for, but feel free to ask about other available topics.\",\n    [\"NO_RELEVANT_SQL\"]: \"Could you please provide more details or specify the information you're seeking?\",\n    [\"NO_CHART\"]: \"The chart couldn’t be generated this time. Please try regenerating the chart or rephrasing your question for better results.\",\n    // Connector errors\n    [\"CONNECTION_ERROR\"]: \"Can not connect to data source\",\n    // duckdb\n    [\"INIT_SQL_ERROR\"]: \"The initializing SQL seems to be invalid, Please check your SQL and try again.\",\n    [\"SESSION_PROPS_ERROR\"]: \"The session properties seem to be invalid, Please check your session properties and try again.\",\n    // postgres\n    [\"CONNECTION_REFUSED\"]: \"Connection refused by the server, Please check your connection settings and try again.\",\n    // ibis service errors\n    [\"IBIS_SERVER_ERROR\"]: \"Error occurred while querying ibis server, please try again later.\",\n    // calculated field validation\n    [\"DUPLICATED_FIELD_NAME\"]: \"This field name already exists\",\n    [\"INVALID_EXPRESSION\"]: \"Invalid expression, please check your expression and try again.\",\n    [\"INVALID_CALCULATED_FIELD\"]: \"Can not execute a query when using this calculated field\",\n    // when createing views\n    [\"INVALID_VIEW_CREATION\"]: \"Invalid view creation\",\n    // dry run error\n    [\"DRY_RUN_ERROR\"]: \"Dry run sql statement error\",\n    [\"DRY_PLAN_ERROR\"]: \"Dry plan error\"\n};\nconst shortMessages = {\n    [\"INTERNAL_SERVER_ERROR\"]: \"Internal server error\",\n    [\"NO_RELEVANT_DATA\"]: \"Try a different query\",\n    [\"NO_RELEVANT_SQL\"]: \"Clarification needed\",\n    [\"NO_CHART\"]: \"Chart not available\",\n    [\"CONNECTION_ERROR\"]: \"Failed to connect\",\n    [\"IBIS_SERVER_ERROR\"]: \"Data connection error\",\n    [\"INIT_SQL_ERROR\"]: \"Invalid initializing SQL\",\n    [\"SESSION_PROPS_ERROR\"]: \"Invalid session properties\",\n    [\"CONNECTION_REFUSED\"]: \"Connection refused\",\n    [\"DUPLICATED_FIELD_NAME\"]: \"Duplicated field name\",\n    [\"INVALID_EXPRESSION\"]: \"Invalid expression\",\n    [\"INVALID_CALCULATED_FIELD\"]: \"Invalid calculated field\",\n    [\"INVALID_VIEW_CREATION\"]: \"Invalid view creation\",\n    [\"DRY_RUN_ERROR\"]: \"Dry run sql statement error\",\n    [\"DRY_PLAN_ERROR\"]: \"Dry plan error\"\n};\nconst create = (code, options)=>{\n    const { customMessage, originalError, service } = options || {};\n    // Default to INTERNAL_SERVER_ERROR if no code is provided\n    code = code || \"INTERNAL_SERVER_ERROR\";\n    // Get the error message based on the code\n    const message = customMessage || originalError?.message || errorMessages[code] || errorMessages[\"INTERNAL_SERVER_ERROR\"];\n    // Return the GraphQLError\n    const err = new graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(message, {\n        extensions: {\n            originalError,\n            code,\n            message,\n            service,\n            shortMessage: shortMessages[code] || shortMessages[\"INTERNAL_SERVER_ERROR\"],\n            other: options?.other\n        }\n    });\n    return err;\n};\n/**\n * Default error handler for Apollo Server\n * For error like this:\n * [GraphQLError: connect ECONNREFUSED 127.0.0.1:8080] {\n *   locations: [ { line: 2, column: 3 } ],\n *   path: [ 'previewData' ],\n *   extensions: {\n *     code: 'INTERNAL_SERVER_ERROR',\n *     exception: {\n *       port: 8080,\n *       address: '127.0.0.1',\n *       syscall: 'connect',\n *       code: 'ECONNREFUSED',\n *       errno: -61,\n *       message: 'connect ECONNREFUSED 127.0.0.1:8080',\n *       stack: 'Error: connect ECONNREFUSED 127.0.0.1:8080\\n' +\n *         '    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1278:16)',\n *       name: 'Error',\n *       config: [Object],\n *       request: [Writable],\n *       stacktrace: [Array]\n *     }\n *   }\n * }\n * it will easily cause `Converting circular structure to JSON` error.\n * Thus, we only pick required fields to reformat the error.\n */ const defaultApolloErrorHandler = (error)=>{\n    if (error instanceof graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError) {\n        const code = error.extensions?.code || \"INTERNAL_SERVER_ERROR\";\n        return {\n            locations: error.locations,\n            path: error.path,\n            message: error.message,\n            extensions: {\n                code,\n                message: error.message,\n                shortMessage: shortMessages[code],\n                stacktrace: error.extensions?.exception?.stacktrace\n            }\n        };\n    }\n    // Return the original error if it's not a GraphQLError\n    return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/error.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/helper.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/utils/helper.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertColumnType: () => (/* binding */ convertColumnType),\n/* harmony export */   parseJson: () => (/* binding */ parseJson)\n/* harmony export */ });\n/**\n * @function\n * @description Retrieve json without error\n */ const parseJson = (data)=>{\n    try {\n        return JSON.parse(data);\n    } catch (_e) {\n        return false;\n    }\n};\nconst convertColumnType = (parent)=>{\n    return parent.type.includes(\"STRUCT\") ? \"RECORD\" : parent.type;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9oZWxwZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FDTSxNQUFNQSxZQUFZLENBQUNDO0lBQ3hCLElBQUk7UUFDRixPQUFPQyxLQUFLQyxLQUFLLENBQUNGO0lBQ3BCLEVBQUUsT0FBT0csSUFBSTtRQUNYLE9BQU87SUFDVDtBQUNGLEVBQUU7QUFFSyxNQUFNQyxvQkFBb0IsQ0FBQ0M7SUFDaEMsT0FBT0EsT0FBT0MsSUFBSSxDQUFDQyxRQUFRLENBQUMsWUFBWSxXQUFXRixPQUFPQyxJQUFJO0FBQ2hFLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvdXRpbHMvaGVscGVyLnRzPzg0ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZSBqc29uIHdpdGhvdXQgZXJyb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnNlSnNvbiA9IChkYXRhKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gIH0gY2F0Y2ggKF9lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgY29udmVydENvbHVtblR5cGUgPSAocGFyZW50OiB7IHR5cGU6IHN0cmluZyB9KSA9PiB7XG4gIHJldHVybiBwYXJlbnQudHlwZS5pbmNsdWRlcygnU1RSVUNUJykgPyAnUkVDT1JEJyA6IHBhcmVudC50eXBlO1xufTtcbiJdLCJuYW1lcyI6WyJwYXJzZUpzb24iLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiX2UiLCJjb252ZXJ0Q29sdW1uVHlwZSIsInBhcmVudCIsInR5cGUiLCJpbmNsdWRlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/helper.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/index.ts":
/*!******************************************!*\
  !*** ./src/apollo/server/utils/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logger */ \"(api)/./src/apollo/server/utils/logger.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _logger__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _logger__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _encryptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./encryptor */ \"(api)/./src/apollo/server/utils/encryptor.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _encryptor__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _encryptor__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _encode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./encode */ \"(api)/./src/apollo/server/utils/encode.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _encode__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _encode__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string */ \"(api)/./src/apollo/server/utils/string.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _string__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _string__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _docker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./docker */ \"(api)/./src/apollo/server/utils/docker.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _docker__WEBPACK_IMPORTED_MODULE_4__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _docker__WEBPACK_IMPORTED_MODULE_4__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model */ \"(api)/./src/apollo/server/utils/model.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _model__WEBPACK_IMPORTED_MODULE_5__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _model__WEBPACK_IMPORTED_MODULE_5__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helper */ \"(api)/./src/apollo/server/utils/helper.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _helper__WEBPACK_IMPORTED_MODULE_6__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _helper__WEBPACK_IMPORTED_MODULE_6__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _regex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./regex */ \"(api)/./src/apollo/server/utils/regex.ts\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _regex__WEBPACK_IMPORTED_MODULE_7__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _regex__WEBPACK_IMPORTED_MODULE_7__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUI7QUFDRztBQUNIO0FBQ0E7QUFDQTtBQUNEO0FBQ0M7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL3dyZW4tdWkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9pbmRleC50cz9hYmZjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vbG9nZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vZW5jcnlwdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vZW5jb2RlJztcbmV4cG9ydCAqIGZyb20gJy4vc3RyaW5nJztcbmV4cG9ydCAqIGZyb20gJy4vZG9ja2VyJztcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWwnO1xuZXhwb3J0ICogZnJvbSAnLi9oZWxwZXInO1xuZXhwb3J0ICogZnJvbSAnLi9yZWdleCc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/index.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/knex.ts":
/*!*****************************************!*\
  !*** ./src/apollo/server/utils/knex.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bootstrapKnex: () => (/* binding */ bootstrapKnex)\n/* harmony export */ });\nconst bootstrapKnex = (options)=>{\n    if (options.dbType === \"pg\") {\n        const { pgUrl, debug } = options;\n        console.log(\"using pg\");\n        /* eslint-disable @typescript-eslint/no-var-requires */ return __webpack_require__(/*! knex */ \"knex\")({\n            client: \"pg\",\n            connection: pgUrl,\n            debug,\n            pool: {\n                min: 2,\n                max: 10\n            }\n        });\n    } else {\n        console.log(\"using sqlite\");\n        /* eslint-disable @typescript-eslint/no-var-requires */ return __webpack_require__(/*! knex */ \"knex\")({\n            client: \"better-sqlite3\",\n            connection: {\n                filename: options.sqliteFile\n            },\n            useNullAsDefault: true\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9rbmV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFPTyxNQUFNQSxnQkFBZ0IsQ0FBQ0M7SUFDNUIsSUFBSUEsUUFBUUMsTUFBTSxLQUFLLE1BQU07UUFDM0IsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLEtBQUssRUFBRSxHQUFHSDtRQUN6QkksUUFBUUMsR0FBRyxDQUFDO1FBQ1oscURBQXFELEdBQ3JELE9BQU9DLG1CQUFPQSxDQUFDLG9CQUFRO1lBQ3JCQyxRQUFRO1lBQ1JDLFlBQVlOO1lBQ1pDO1lBQ0FNLE1BQU07Z0JBQUVDLEtBQUs7Z0JBQUdDLEtBQUs7WUFBRztRQUMxQjtJQUNGLE9BQU87UUFDTFAsUUFBUUMsR0FBRyxDQUFDO1FBQ1oscURBQXFELEdBQ3JELE9BQU9DLG1CQUFPQSxDQUFDLG9CQUFRO1lBQ3JCQyxRQUFRO1lBQ1JDLFlBQVk7Z0JBQ1ZJLFVBQVVaLFFBQVFhLFVBQVU7WUFDOUI7WUFDQUMsa0JBQWtCO1FBQ3BCO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3V0aWxzL2tuZXgudHM/ZmU1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgS25leE9wdGlvbnMge1xuICBkYlR5cGU6IHN0cmluZztcbiAgcGdVcmw/OiBzdHJpbmc7XG4gIGRlYnVnPzogYm9vbGVhbjtcbiAgc3FsaXRlRmlsZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGJvb3RzdHJhcEtuZXggPSAob3B0aW9uczogS25leE9wdGlvbnMpID0+IHtcbiAgaWYgKG9wdGlvbnMuZGJUeXBlID09PSAncGcnKSB7XG4gICAgY29uc3QgeyBwZ1VybCwgZGVidWcgfSA9IG9wdGlvbnM7XG4gICAgY29uc29sZS5sb2coJ3VzaW5nIHBnJyk7XG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcyAqL1xuICAgIHJldHVybiByZXF1aXJlKCdrbmV4Jykoe1xuICAgICAgY2xpZW50OiAncGcnLFxuICAgICAgY29ubmVjdGlvbjogcGdVcmwsXG4gICAgICBkZWJ1ZyxcbiAgICAgIHBvb2w6IHsgbWluOiAyLCBtYXg6IDEwIH0sXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ3VzaW5nIHNxbGl0ZScpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMgKi9cbiAgICByZXR1cm4gcmVxdWlyZSgna25leCcpKHtcbiAgICAgIGNsaWVudDogJ2JldHRlci1zcWxpdGUzJyxcbiAgICAgIGNvbm5lY3Rpb246IHtcbiAgICAgICAgZmlsZW5hbWU6IG9wdGlvbnMuc3FsaXRlRmlsZSxcbiAgICAgIH0sXG4gICAgICB1c2VOdWxsQXNEZWZhdWx0OiB0cnVlLFxuICAgIH0pO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImJvb3RzdHJhcEtuZXgiLCJvcHRpb25zIiwiZGJUeXBlIiwicGdVcmwiLCJkZWJ1ZyIsImNvbnNvbGUiLCJsb2ciLCJyZXF1aXJlIiwiY2xpZW50IiwiY29ubmVjdGlvbiIsInBvb2wiLCJtaW4iLCJtYXgiLCJmaWxlbmFtZSIsInNxbGl0ZUZpbGUiLCJ1c2VOdWxsQXNEZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/knex.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/logger.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/utils/logger.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLogger: () => (/* reexport safe */ log4js__WEBPACK_IMPORTED_MODULE_0__.getLogger)\n/* harmony export */ });\n/* harmony import */ var log4js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! log4js */ \"log4js\");\n/* harmony import */ var log4js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(log4js__WEBPACK_IMPORTED_MODULE_0__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9sb2dnZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3V0aWxzL2xvZ2dlci50cz83MGExIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2xvZzRqcyc7XG4iXSwibmFtZXMiOlsiZ2V0TG9nZ2VyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/logger.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/model.ts":
/*!******************************************!*\
  !*** ./src/apollo/server/utils/model.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findColumnsToUpdate: () => (/* binding */ findColumnsToUpdate),\n/* harmony export */   getPreviewColumnsStr: () => (/* binding */ getPreviewColumnsStr),\n/* harmony export */   handleNestedColumns: () => (/* binding */ handleNestedColumns),\n/* harmony export */   replaceInvalidReferenceName: () => (/* binding */ replaceInvalidReferenceName),\n/* harmony export */   transformInvalidColumnName: () => (/* binding */ transformInvalidColumnName),\n/* harmony export */   updateModelPrimaryKey: () => (/* binding */ updateModelPrimaryKey)\n/* harmony export */ });\n/* harmony import */ var _regex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex */ \"(api)/./src/apollo/server/utils/regex.ts\");\n\nfunction getPreviewColumnsStr(modelColumns) {\n    if (modelColumns.length === 0) return \"*\";\n    const columns = modelColumns.map((column)=>`\"${column.referenceName}\"`);\n    return columns.join(\",\");\n}\nfunction transformInvalidColumnName(columnName) {\n    let referenceName = (0,_regex__WEBPACK_IMPORTED_MODULE_0__.replaceAllowableSyntax)(columnName);\n    // If the reference name does not start with a letter, add a prefix\n    const startWithLetterRegex = /^[A-Za-z]/;\n    if (!startWithLetterRegex.test(referenceName)) {\n        referenceName = `col_${referenceName}`;\n    }\n    return referenceName;\n}\nfunction replaceInvalidReferenceName(referenceName) {\n    // replace dot with underscore\n    return referenceName.replace(/\\./g, \"_\");\n}\nfunction findColumnsToUpdate(columns, existingColumns, sourceTableColumns) {\n    const toDeleteColumnIds = existingColumns.map(({ id, sourceColumnName })=>{\n        const shouldKeep = columns.includes(sourceColumnName);\n        return shouldKeep ? undefined : id;\n    }).filter((id)=>id);\n    const existColumnNames = existingColumns.map(({ sourceColumnName })=>sourceColumnName);\n    const toCreateColumns = columns.filter((columnName)=>!existColumnNames.includes(columnName));\n    const toUpdateColumns = sourceTableColumns.reduce((acc, sourceColumn)=>{\n        const existingColumn = existingColumns.find((col)=>col.sourceColumnName === sourceColumn.name);\n        if (!existingColumn) return acc;\n        const columnName = columns.find((col)=>col === sourceColumn.name);\n        if (!columnName) return acc;\n        if (sourceColumn.type === existingColumn.type) return acc;\n        return [\n            ...acc,\n            {\n                id: existingColumn.id,\n                sourceColumnName: sourceColumn.name,\n                type: sourceColumn.type || \"string\"\n            }\n        ];\n    }, []);\n    return {\n        toDeleteColumnIds,\n        toCreateColumns,\n        toUpdateColumns\n    };\n}\nasync function updateModelPrimaryKey(repository, modelId, primaryKey) {\n    await repository.resetModelPrimaryKey(modelId);\n    if (primaryKey) {\n        await repository.setModelPrimaryKey(modelId, primaryKey);\n    }\n}\nfunction handleNestedColumns(column, parent) {\n    if (!column.nestedColumns) return [];\n    const nestedColumnValues = [];\n    for (const nestedColumn of column.nestedColumns){\n        const parentColumnPath = parent.columnPath || [\n            parent.sourceColumnName\n        ];\n        const name = nestedColumn.name.split(`${parent.sourceColumnName}.`)[1];\n        const columnPath = [\n            ...parentColumnPath,\n            name\n        ];\n        const nestedColumnValue = {\n            modelId: parent.modelId,\n            columnId: parent.columnId,\n            columnPath,\n            displayName: nestedColumn.name,\n            sourceColumnName: nestedColumn.name,\n            referenceName: columnPath.map(transformInvalidColumnName).join(\".\"),\n            type: nestedColumn.type || \"string\",\n            properties: nestedColumn.properties\n        };\n        nestedColumnValues.push(nestedColumnValue);\n        nestedColumnValues.push(...handleNestedColumns(nestedColumn, {\n            modelId: parent.modelId,\n            columnId: parent.columnId,\n            sourceColumnName: nestedColumn.name,\n            columnPath\n        }));\n    }\n    return nestedColumnValues;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/model.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/regex.ts":
/*!******************************************!*\
  !*** ./src/apollo/server/utils/regex.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   replaceAllowableSyntax: () => (/* binding */ replaceAllowableSyntax),\n/* harmony export */   validateDisplayName: () => (/* binding */ validateDisplayName)\n/* harmony export */ });\nfunction validateDisplayName(displayName) {\n    let message = null;\n    let valid = true;\n    const allowableSyntaxRegex = /^[A-Za-z0-9 !@#$%^&*()_+{}[\\],.'\"-]*$/;\n    const syntaxValid = allowableSyntaxRegex.test(displayName);\n    if (!syntaxValid) {\n        valid = false;\n        message = \"Only space & [  a-z, A-Z, 0-9, _, -, !@#$%^&*()-+{}[]'\\\".,  ] are allowed.\";\n    }\n    const startWithLetterRegex = /^[A-Za-z]/;\n    const startWithLetterValid = startWithLetterRegex.test(displayName);\n    if (!startWithLetterValid) {\n        valid = false;\n        message = \"Must start with a letter.\";\n    }\n    return {\n        valid,\n        message\n    };\n}\nfunction replaceAllowableSyntax(str) {\n    const replacedStr = str.replace(/[!@#$%^&*()+{}[\\]'\",. -]/g, \"_\");\n    return replacedStr;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9yZWdleC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUtPLFNBQVNBLG9CQUFvQkMsV0FBbUI7SUFDckQsSUFBSUMsVUFBVTtJQUNkLElBQUlDLFFBQVE7SUFFWixNQUFNQyx1QkFBdUI7SUFDN0IsTUFBTUMsY0FBY0QscUJBQXFCRSxJQUFJLENBQUNMO0lBQzlDLElBQUksQ0FBQ0ksYUFBYTtRQUNoQkYsUUFBUTtRQUNSRCxVQUNFO0lBQ0o7SUFDQSxNQUFNSyx1QkFBdUI7SUFDN0IsTUFBTUMsdUJBQXVCRCxxQkFBcUJELElBQUksQ0FBQ0w7SUFDdkQsSUFBSSxDQUFDTyxzQkFBc0I7UUFDekJMLFFBQVE7UUFDUkQsVUFBVTtJQUNaO0lBRUEsT0FBTztRQUNMQztRQUNBRDtJQUNGO0FBQ0Y7QUFFTyxTQUFTTyx1QkFBdUJDLEdBQVc7SUFDaEQsTUFBTUMsY0FBY0QsSUFBSUUsT0FBTyxDQUFDLDZCQUE2QjtJQUM3RCxPQUFPRDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3Jlbi11aS8uL3NyYy9hcG9sbG8vc2VydmVyL3V0aWxzL3JlZ2V4LnRzP2IyMTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uUmVzdWx0IHtcbiAgdmFsaWQ6IGJvb2xlYW47XG4gIG1lc3NhZ2U6IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURpc3BsYXlOYW1lKGRpc3BsYXlOYW1lOiBzdHJpbmcpOiBWYWxpZGF0aW9uUmVzdWx0IHtcbiAgbGV0IG1lc3NhZ2UgPSBudWxsO1xuICBsZXQgdmFsaWQgPSB0cnVlO1xuXG4gIGNvbnN0IGFsbG93YWJsZVN5bnRheFJlZ2V4ID0gL15bQS1aYS16MC05ICFAIyQlXiYqKClfK3t9W1xcXSwuJ1wiLV0qJC87XG4gIGNvbnN0IHN5bnRheFZhbGlkID0gYWxsb3dhYmxlU3ludGF4UmVnZXgudGVzdChkaXNwbGF5TmFtZSk7XG4gIGlmICghc3ludGF4VmFsaWQpIHtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICAgIG1lc3NhZ2UgPVxuICAgICAgJ09ubHkgc3BhY2UgJiBbICBhLXosIEEtWiwgMC05LCBfLCAtLCAhQCMkJV4mKigpLSt7fVtdXFwnXCIuLCAgXSBhcmUgYWxsb3dlZC4nO1xuICB9XG4gIGNvbnN0IHN0YXJ0V2l0aExldHRlclJlZ2V4ID0gL15bQS1aYS16XS87XG4gIGNvbnN0IHN0YXJ0V2l0aExldHRlclZhbGlkID0gc3RhcnRXaXRoTGV0dGVyUmVnZXgudGVzdChkaXNwbGF5TmFtZSk7XG4gIGlmICghc3RhcnRXaXRoTGV0dGVyVmFsaWQpIHtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICAgIG1lc3NhZ2UgPSAnTXVzdCBzdGFydCB3aXRoIGEgbGV0dGVyLic7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbGlkLFxuICAgIG1lc3NhZ2UsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQWxsb3dhYmxlU3ludGF4KHN0cjogc3RyaW5nKSB7XG4gIGNvbnN0IHJlcGxhY2VkU3RyID0gc3RyLnJlcGxhY2UoL1shQCMkJV4mKigpK3t9W1xcXSdcIiwuIC1dL2csICdfJyk7XG4gIHJldHVybiByZXBsYWNlZFN0cjtcbn1cbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZURpc3BsYXlOYW1lIiwiZGlzcGxheU5hbWUiLCJtZXNzYWdlIiwidmFsaWQiLCJhbGxvd2FibGVTeW50YXhSZWdleCIsInN5bnRheFZhbGlkIiwidGVzdCIsInN0YXJ0V2l0aExldHRlclJlZ2V4Iiwic3RhcnRXaXRoTGV0dGVyVmFsaWQiLCJyZXBsYWNlQWxsb3dhYmxlU3ludGF4Iiwic3RyIiwicmVwbGFjZWRTdHIiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/regex.ts\n");

/***/ }),

/***/ "(api)/./src/apollo/server/utils/string.ts":
/*!*******************************************!*\
  !*** ./src/apollo/server/utils/string.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trim: () => (/* binding */ trim)\n/* harmony export */ });\nconst trim = (str)=>str.replace(/^\\s+|\\s+$/g, \"\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvYXBvbGxvL3NlcnZlci91dGlscy9zdHJpbmcudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLE9BQU8sQ0FBQ0MsTUFBZ0JBLElBQUlDLE9BQU8sQ0FBQyxjQUFjLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cmVuLXVpLy4vc3JjL2Fwb2xsby9zZXJ2ZXIvdXRpbHMvc3RyaW5nLnRzPzE1ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHRyaW0gPSAoc3RyOiBzdHJpbmcpID0+IHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4iXSwibmFtZXMiOlsidHJpbSIsInN0ciIsInJlcGxhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/apollo/server/utils/string.ts\n");

/***/ }),

/***/ "(api)/./src/common.ts":
/*!***********************!*\
  !*** ./src/common.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   components: () => (/* binding */ components),\n/* harmony export */   initComponents: () => (/* binding */ initComponents),\n/* harmony export */   serverConfig: () => (/* binding */ serverConfig)\n/* harmony export */ });\n/* harmony import */ var _server_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @server/config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _apollo_server_utils_knex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apollo/server/utils/knex */ \"(api)/./src/apollo/server/utils/knex.ts\");\n/* harmony import */ var _server_repositories__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server/repositories */ \"(api)/./src/apollo/server/repositories/index.ts\");\n/* harmony import */ var _server_adaptors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/adaptors */ \"(api)/./src/apollo/server/adaptors/index.ts\");\n/* harmony import */ var _server_services__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/services */ \"(api)/./src/apollo/server/services/index.ts\");\n/* harmony import */ var _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./apollo/server/telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\n/* harmony import */ var _apollo_server_backgrounds__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./apollo/server/backgrounds */ \"(api)/./src/apollo/server/backgrounds/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server_adaptors__WEBPACK_IMPORTED_MODULE_3__, _server_services__WEBPACK_IMPORTED_MODULE_4__, _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__, _apollo_server_backgrounds__WEBPACK_IMPORTED_MODULE_6__]);\n([_server_adaptors__WEBPACK_IMPORTED_MODULE_3__, _server_services__WEBPACK_IMPORTED_MODULE_4__, _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__, _apollo_server_backgrounds__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nconst serverConfig = (0,_server_config__WEBPACK_IMPORTED_MODULE_0__.getConfig)();\nconst initComponents = ()=>{\n    const telemetry = new _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_5__.PostHogTelemetry();\n    const knex = (0,_apollo_server_utils_knex__WEBPACK_IMPORTED_MODULE_1__.bootstrapKnex)({\n        dbType: serverConfig.dbType,\n        pgUrl: serverConfig.pgUrl,\n        debug: serverConfig.debug,\n        sqliteFile: serverConfig.sqliteFile\n    });\n    // repositories\n    const projectRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ProjectRepository(knex);\n    const deployLogRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.DeployLogRepository(knex);\n    const threadRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ThreadRepository(knex);\n    const threadResponseRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ThreadResponseRepository(knex);\n    const viewRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ViewRepository(knex);\n    const modelRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ModelRepository(knex);\n    const modelColumnRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ModelColumnRepository(knex);\n    const modelNestedColumnRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.ModelNestedColumnRepository(knex);\n    const relationRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.RelationRepository(knex);\n    const schemaChangeRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.SchemaChangeRepository(knex);\n    const learningRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.LearningRepository(knex);\n    const dashboardRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.DashboardRepository(knex);\n    const dashboardItemRepository = new _server_repositories__WEBPACK_IMPORTED_MODULE_2__.DashboardItemRepository(knex);\n    // adaptors\n    const wrenEngineAdaptor = new _server_adaptors__WEBPACK_IMPORTED_MODULE_3__.WrenEngineAdaptor({\n        wrenEngineEndpoint: serverConfig.wrenEngineEndpoint\n    });\n    const wrenAIAdaptor = new _server_adaptors__WEBPACK_IMPORTED_MODULE_3__.WrenAIAdaptor({\n        wrenAIBaseEndpoint: serverConfig.wrenAIEndpoint\n    });\n    const ibisAdaptor = new _server_adaptors__WEBPACK_IMPORTED_MODULE_3__.IbisAdaptor({\n        ibisServerEndpoint: serverConfig.ibisServerEndpoint\n    });\n    // services\n    const metadataService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.DataSourceMetadataService({\n        ibisAdaptor,\n        wrenEngineAdaptor\n    });\n    const queryService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.QueryService({\n        ibisAdaptor,\n        wrenEngineAdaptor,\n        telemetry\n    });\n    const deployService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.DeployService({\n        wrenAIAdaptor,\n        deployLogRepository,\n        telemetry\n    });\n    const mdlService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.MDLService({\n        projectRepository,\n        modelRepository,\n        modelColumnRepository,\n        modelNestedColumnRepository,\n        relationRepository,\n        viewRepository\n    });\n    const projectService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.ProjectService({\n        projectRepository,\n        metadataService,\n        mdlService,\n        wrenAIAdaptor,\n        telemetry\n    });\n    const askingService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.AskingService({\n        telemetry,\n        wrenAIAdaptor,\n        deployService,\n        projectService,\n        viewRepository,\n        threadRepository,\n        threadResponseRepository,\n        queryService,\n        mdlService\n    });\n    const dashboardService = new _server_services__WEBPACK_IMPORTED_MODULE_4__.DashboardService({\n        projectService,\n        dashboardItemRepository,\n        dashboardRepository\n    });\n    // background trackers\n    const projectRecommendQuestionBackgroundTracker = new _apollo_server_backgrounds__WEBPACK_IMPORTED_MODULE_6__.ProjectRecommendQuestionBackgroundTracker({\n        telemetry,\n        wrenAIAdaptor,\n        projectRepository\n    });\n    const threadRecommendQuestionBackgroundTracker = new _apollo_server_backgrounds__WEBPACK_IMPORTED_MODULE_6__.ThreadRecommendQuestionBackgroundTracker({\n        telemetry,\n        wrenAIAdaptor,\n        threadRepository\n    });\n    return {\n        knex,\n        telemetry,\n        // repositories\n        projectRepository,\n        deployLogRepository,\n        threadRepository,\n        threadResponseRepository,\n        viewRepository,\n        modelRepository,\n        modelColumnRepository,\n        relationRepository,\n        schemaChangeRepository,\n        learningRepository,\n        modelNestedColumnRepository,\n        dashboardRepository,\n        dashboardItemRepository,\n        // adaptors\n        wrenEngineAdaptor,\n        wrenAIAdaptor,\n        ibisAdaptor,\n        // services\n        metadataService,\n        projectService,\n        queryService,\n        deployService,\n        askingService,\n        mdlService,\n        dashboardService,\n        // background trackers\n        projectRecommendQuestionBackgroundTracker,\n        threadRecommendQuestionBackgroundTracker\n    };\n};\n// singleton components\nconst components = initComponents();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/common.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/graphql.ts":
/*!**********************************!*\
  !*** ./src/pages/api/graphql.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var micro_cors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! micro-cors */ \"micro-cors\");\n/* harmony import */ var micro_cors__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(micro_cors__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var apollo_server_micro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! apollo-server-micro */ \"apollo-server-micro\");\n/* harmony import */ var apollo_server_micro__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(apollo_server_micro__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @server */ \"(api)/./src/apollo/server/index.ts\");\n/* harmony import */ var _server_resolvers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @server/resolvers */ \"(api)/./src/apollo/server/resolvers.ts\");\n/* harmony import */ var _server_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @server/utils */ \"(api)/./src/apollo/server/utils/index.ts\");\n/* harmony import */ var _server_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @server/config */ \"(api)/./src/apollo/server/config.ts\");\n/* harmony import */ var _server_services_modelService__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @server/services/modelService */ \"(api)/./src/apollo/server/services/modelService.ts\");\n/* harmony import */ var _apollo_server_utils_error__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/apollo/server/utils/error */ \"(api)/./src/apollo/server/utils/error.ts\");\n/* harmony import */ var _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/apollo/server/telemetry/telemetry */ \"(api)/./src/apollo/server/telemetry/telemetry.ts\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @/common */ \"(api)/./src/common.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_server__WEBPACK_IMPORTED_MODULE_2__, _server_resolvers__WEBPACK_IMPORTED_MODULE_3__, _server_services_modelService__WEBPACK_IMPORTED_MODULE_6__, _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_8__, _common__WEBPACK_IMPORTED_MODULE_9__]);\n([_server__WEBPACK_IMPORTED_MODULE_2__, _server_resolvers__WEBPACK_IMPORTED_MODULE_3__, _server_services_modelService__WEBPACK_IMPORTED_MODULE_6__, _apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_8__, _common__WEBPACK_IMPORTED_MODULE_9__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\nconst serverConfig = (0,_server_config__WEBPACK_IMPORTED_MODULE_5__.getConfig)();\nconst logger = (0,_server_utils__WEBPACK_IMPORTED_MODULE_4__.getLogger)(\"APOLLO\");\nlogger.level = \"debug\";\nconst cors = micro_cors__WEBPACK_IMPORTED_MODULE_0___default()();\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nconst bootstrapServer = async ()=>{\n    const { telemetry, // repositories\n    projectRepository, modelRepository, modelColumnRepository, relationRepository, deployLogRepository, viewRepository, schemaChangeRepository, learningRepository, modelNestedColumnRepository, dashboardRepository, dashboardItemRepository, // adaptors\n    wrenEngineAdaptor, ibisAdaptor, wrenAIAdaptor, // services\n    projectService, queryService, askingService, deployService, mdlService, dashboardService, // background trackers\n    projectRecommendQuestionBackgroundTracker, threadRecommendQuestionBackgroundTracker } = _common__WEBPACK_IMPORTED_MODULE_9__.components;\n    const modelService = new _server_services_modelService__WEBPACK_IMPORTED_MODULE_6__.ModelService({\n        projectService,\n        modelRepository,\n        modelColumnRepository,\n        relationRepository,\n        viewRepository,\n        mdlService,\n        wrenEngineAdaptor,\n        queryService\n    });\n    // initialize services\n    await Promise.all([\n        askingService.initialize(),\n        projectRecommendQuestionBackgroundTracker.initialize(),\n        threadRecommendQuestionBackgroundTracker.initialize()\n    ]);\n    const apolloServer = new apollo_server_micro__WEBPACK_IMPORTED_MODULE_1__.ApolloServer({\n        typeDefs: _server__WEBPACK_IMPORTED_MODULE_2__.typeDefs,\n        resolvers: _server_resolvers__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        formatError: (error)=>{\n            // stop print error stacktrace of dry run error\n            if (error.extensions?.code === _apollo_server_utils_error__WEBPACK_IMPORTED_MODULE_7__.GeneralErrorCodes.DRY_RUN_ERROR) {\n                return (0,_apollo_server_utils_error__WEBPACK_IMPORTED_MODULE_7__.defaultApolloErrorHandler)(error);\n            }\n            // print error stacktrace of graphql error\n            const stacktrace = error.extensions?.exception?.stacktrace;\n            if (stacktrace) {\n                logger.error(stacktrace.join(\"\\n\"));\n            }\n            // print original error stacktrace\n            const originalError = error.extensions?.originalError;\n            if (originalError) {\n                logger.error(`== original error ==`);\n                // error may not have stack, so print error message if stack is not available\n                logger.error(originalError.stack || originalError.message);\n            }\n            // telemetry: capture internal server error\n            if (error.extensions?.code === _apollo_server_utils_error__WEBPACK_IMPORTED_MODULE_7__.GeneralErrorCodes.INTERNAL_SERVER_ERROR) {\n                telemetry.sendEvent(_apollo_server_telemetry_telemetry__WEBPACK_IMPORTED_MODULE_8__.TelemetryEvent.GRAPHQL_ERROR, {\n                    originalErrorStack: originalError?.stack,\n                    originalErrorMessage: originalError?.message,\n                    errorMessage: error.message\n                }, error.extensions?.service, false);\n            }\n            return (0,_apollo_server_utils_error__WEBPACK_IMPORTED_MODULE_7__.defaultApolloErrorHandler)(error);\n        },\n        introspection: \"development\" !== \"production\",\n        context: ()=>({\n                config: serverConfig,\n                telemetry,\n                // adaptor\n                wrenEngineAdaptor,\n                ibisServerAdaptor: ibisAdaptor,\n                wrenAIAdaptor,\n                // services\n                projectService,\n                modelService,\n                mdlService,\n                deployService,\n                askingService,\n                queryService,\n                dashboardService,\n                // repository\n                projectRepository,\n                modelRepository,\n                modelColumnRepository,\n                modelNestedColumnRepository,\n                relationRepository,\n                viewRepository,\n                deployRepository: deployLogRepository,\n                schemaChangeRepository,\n                learningRepository,\n                dashboardRepository,\n                dashboardItemRepository,\n                // background trackers\n                projectRecommendQuestionBackgroundTracker,\n                threadRecommendQuestionBackgroundTracker\n            })\n    });\n    await apolloServer.start();\n    return apolloServer;\n};\nconst startServer = bootstrapServer();\nconst handler = async (req, res)=>{\n    const apolloServer = await startServer;\n    await apolloServer.createHandler({\n        path: \"/api/graphql\"\n    })(req, res);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cors((req, res)=>req.method === \"OPTIONS\" ? res.status(200).end() : handler(req, res)));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/graphql.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgraphql&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cgraphql.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();